"use strict";var obsidian=require("obsidian"),require$$0=require("crypto");function _interopDefaultLegacy(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var require$$0__default=_interopDefaultLegacy(require$$0);function __awaiter(e,o,s,u){return new(s=s||Promise)(function(r,t){function n(e){try{a(u.next(e))}catch(e){t(e)}}function i(e){try{a(u.throw(e))}catch(e){t(e)}}function a(e){var t;e.done?r(e.value):((t=e.value)instanceof s?t:new s(function(e){e(t)})).then(n,i)}a((u=u.apply(e,o||[])).next())})}function getTaggedFiles(e){var t;const r=e.metadataCache,n=[],i=[],a=[],o=[];for(const u of e.vault.getMarkdownFiles()){var s=r.getFileCache(u);if(!s)return;null!==(t=null===(t=s.frontmatter)||void 0===t?void 0:t.tags)&&void 0!==t&&t.includes("solo/list")?n.push(Object.assign({},u,s)):null!==(t=null===(t=s.frontmatter)||void 0===t?void 0:t.tags)&&void 0!==t&&t.includes("solo/deck")?i.push(Object.assign({},u,s)):null!==(t=null===(t=s.frontmatter)||void 0===t?void 0:t.tags)&&void 0!==t&&t.includes("solo/weighted")?a.push(Object.assign({},u,s)):null!==(s=null===(s=s.frontmatter)||void 0===s?void 0:s.tags)&&void 0!==s&&s.includes("solo/config")&&o.push(u)}return{simpleList:n,decks:i,weightedTables:a,config:o}}const getRandomListItem=(e,r,n)=>{const i=r.frontmatter.position.end.offset;var t=e.metadataCache.getFirstLinkpathDest(r.name,r.path);return e.vault.cachedRead(t).then(e=>{const t=e.substring(i).trim();e=t.split(/\r?\n/),e=(r.frontmatter.label?r.frontmatter.label+" ":"")+e[Math.floor(Math.random()*e.length)];return n(e)}).catch(e=>console.log(e))},getRandomWeightedListItem=(e,t,u)=>{const c=t.frontmatter.position.end.offset;t=e.metadataCache.getFirstLinkpathDest(t.name,t.path);return e.vault.cachedRead(t).then(e=>{const t=e.substring(c).trim(),r=t.split(/\r?\n/),n=[];let i=0;r.forEach(e=>{e=e.split("|"),e=parseInt(e[0])+i;n.push(e),i=e}),console.log(n);var a=n[n.length-1];const o=Math.floor(Math.random()*a+1);var s=n.findIndex(e=>e>=o),e=r[s].split("|")[1].trim(),e=`1d${a} = ${o} : `+e;return console.log(`roll ${o}, index ${s}, `+r[s].split("|")[1]),u(e)}).catch(e=>console.log(e))};var commonjsGlobal="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function getDefaultExportFromCjs(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function createCommonjsModule(e){var t={exports:{}};return e(t,t.exports),t.exports}var _extends_1=createCommonjsModule(function(e){function t(){return e.exports=t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r,n=arguments[t];for(r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},e.exports.default=e.exports,e.exports.__esModule=!0,t.apply(this,arguments)}e.exports=t,e.exports.default=e.exports,e.exports.__esModule=!0}),_extends$1=getDefaultExportFromCjs(_extends_1),DEFAULT_CONFIG={epsilon:1e-12,matrix:"Matrix",number:"number",precision:64,predictable:!1,randomSeed:null};function isNumber(e){return"number"==typeof e}function isBigNumber(e){return!(!e||"object"!=typeof e||"function"!=typeof e.constructor)&&(!0===e.isBigNumber&&"object"==typeof e.constructor.prototype&&!0===e.constructor.prototype.isBigNumber||"function"==typeof e.constructor.isDecimal&&!0===e.constructor.isDecimal(e))}function isComplex(e){return e&&"object"==typeof e&&!0===Object.getPrototypeOf(e).isComplex||!1}function isFraction(e){return e&&"object"==typeof e&&!0===Object.getPrototypeOf(e).isFraction||!1}function isUnit(e){return e&&!0===e.constructor.prototype.isUnit||!1}function isString(e){return"string"==typeof e}var isArray=Array.isArray;function isMatrix(e){return e&&!0===e.constructor.prototype.isMatrix||!1}function isCollection(e){return Array.isArray(e)||isMatrix(e)}function isDenseMatrix(e){return e&&e.isDenseMatrix&&!0===e.constructor.prototype.isMatrix||!1}function isSparseMatrix(e){return e&&e.isSparseMatrix&&!0===e.constructor.prototype.isMatrix||!1}function isRange(e){return e&&!0===e.constructor.prototype.isRange||!1}function isIndex(e){return e&&!0===e.constructor.prototype.isIndex||!1}function isBoolean(e){return"boolean"==typeof e}function isResultSet(e){return e&&!0===e.constructor.prototype.isResultSet||!1}function isHelp(e){return e&&!0===e.constructor.prototype.isHelp||!1}function isFunction(e){return"function"==typeof e}function isDate(e){return e instanceof Date}function isRegExp(e){return e instanceof RegExp}function isObject(e){return!(!e||"object"!=typeof e||e.constructor!==Object||isComplex(e)||isFraction(e))}function isNull(e){return null===e}function isUndefined(e){return void 0===e}function isAccessorNode(e){return e&&!0===e.isAccessorNode&&!0===e.constructor.prototype.isNode||!1}function isArrayNode(e){return e&&!0===e.isArrayNode&&!0===e.constructor.prototype.isNode||!1}function isAssignmentNode(e){return e&&!0===e.isAssignmentNode&&!0===e.constructor.prototype.isNode||!1}function isBlockNode(e){return e&&!0===e.isBlockNode&&!0===e.constructor.prototype.isNode||!1}function isConditionalNode(e){return e&&!0===e.isConditionalNode&&!0===e.constructor.prototype.isNode||!1}function isConstantNode(e){return e&&!0===e.isConstantNode&&!0===e.constructor.prototype.isNode||!1}function isFunctionAssignmentNode(e){return e&&!0===e.isFunctionAssignmentNode&&!0===e.constructor.prototype.isNode||!1}function isFunctionNode(e){return e&&!0===e.isFunctionNode&&!0===e.constructor.prototype.isNode||!1}function isIndexNode(e){return e&&!0===e.isIndexNode&&!0===e.constructor.prototype.isNode||!1}function isNode(e){return e&&!0===e.isNode&&!0===e.constructor.prototype.isNode||!1}function isObjectNode(e){return e&&!0===e.isObjectNode&&!0===e.constructor.prototype.isNode||!1}function isOperatorNode(e){return e&&!0===e.isOperatorNode&&!0===e.constructor.prototype.isNode||!1}function isParenthesisNode(e){return e&&!0===e.isParenthesisNode&&!0===e.constructor.prototype.isNode||!1}function isRangeNode(e){return e&&!0===e.isRangeNode&&!0===e.constructor.prototype.isNode||!1}function isSymbolNode(e){return e&&!0===e.isSymbolNode&&!0===e.constructor.prototype.isNode||!1}function isChain(e){return e&&!0===e.constructor.prototype.isChain||!1}function typeOf$1(e){var t=typeof e;return"object"==t?null===e?"null":Array.isArray(e)?"Array":e instanceof Date?"Date":e instanceof RegExp?"RegExp":isBigNumber(e)?"BigNumber":isComplex(e)?"Complex":isFraction(e)?"Fraction":isMatrix(e)?"Matrix":isUnit(e)?"Unit":isIndex(e)?"Index":isRange(e)?"Range":isResultSet(e)?"ResultSet":isNode(e)?e.type:isChain(e)?"Chain":isHelp(e)?"Help":"Object":"function"==t?"Function":t}function clone$1(e){var t=typeof e;if("number"==t||"string"==t||"boolean"==t||null==e)return e;if("function"==typeof e.clone)return e.clone();if(Array.isArray(e))return e.map(function(e){return clone$1(e)});if(e instanceof Date)return new Date(e.valueOf());if(isBigNumber(e))return e;if(e instanceof RegExp)throw new TypeError("Cannot clone "+e);return mapObject(e,clone$1)}function mapObject(e,t){var r,n={};for(r in e)hasOwnProperty$1(e,r)&&(n[r]=t(e[r]));return n}function extend(e,t){for(var r in t)hasOwnProperty$1(t,r)&&(e[r]=t[r]);return e}function deepStrictEqual(e,t){var r,n,i;if(Array.isArray(e)){if(!Array.isArray(t))return!1;if(e.length!==t.length)return!1;for(n=0,i=e.length;n<i;n++)if(!deepStrictEqual(e[n],t[n]))return!1;return!0}if("function"==typeof e)return e===t;if(e instanceof Object){if(Array.isArray(t)||!(t instanceof Object))return!1;for(r in e)if(!(r in t&&deepStrictEqual(e[r],t[r])))return!1;for(r in t)if(!(r in e))return!1;return!0}return e===t}function lazy(e,t,r){var n,i=!0;Object.defineProperty(e,t,{get:function(){return i&&(n=r(),i=!1),n},set:function(e){n=e,i=!1},configurable:!0,enumerable:!0})}function hasOwnProperty$1(e,t){return e&&Object.hasOwnProperty.call(e,t)}function pickShallow(e,t){for(var r={},n=0;n<t.length;n++){var i=t[n],a=e[i];void 0!==a&&(r[i]=a)}return r}var MATRIX_OPTIONS=["Matrix","Array"],NUMBER_OPTIONS=["number","BigNumber","Fraction"],config=function(e){if(e)throw new Error("The global config is readonly. \nPlease create a mathjs instance if you want to change the default configuration. \nExample:\n\n  import { create, all } from 'mathjs';\n  const mathjs = create(all);\n  mathjs.config({ number: 'BigNumber' });\n");return Object.freeze(DEFAULT_CONFIG)};_extends$1(config,DEFAULT_CONFIG,{MATRIX_OPTIONS:MATRIX_OPTIONS,NUMBER_OPTIONS:NUMBER_OPTIONS});var typedFunction=createCommonjsModule(function(e,t){function B(){return!0}function te(){return!1}function re(){}e.exports=function e(){var t=[{name:"number",test:function(e){return"number"==typeof e}},{name:"string",test:function(e){return"string"==typeof e}},{name:"boolean",test:function(e){return"boolean"==typeof e}},{name:"Function",test:function(e){return"function"==typeof e}},{name:"Array",test:Array.isArray},{name:"Date",test:function(e){return e instanceof Date}},{name:"RegExp",test:function(e){return e instanceof RegExp}},{name:"Object",test:function(e){return"object"==typeof e&&null!==e&&e.constructor===Object}},{name:"null",test:function(e){return null===e}},{name:"undefined",test:function(e){return void 0===e}}];var r={name:"any",test:B};var n=[];var i=[];var k={types:t,conversions:i,ignore:n};function s(t){var e=K(k.types,function(e){return e.name===t});if(e)return e;if("any"===t)return r;e=K(k.types,function(e){return e.name.toLowerCase()===t.toLowerCase()});throw new TypeError('Unknown type "'+t+'"'+(e?'. Did you mean "'+e.name+'"?':""))}function a(e){return e===r?999:k.types.indexOf(e)}function l(t){var e=K(k.types,function(e){return e.test(t)});if(e)return e.name;throw new TypeError("Value has unknown type. Value: "+t)}function o(e,t){if(!e.signatures)throw new TypeError("Function is no typed-function");var r;if("string"==typeof t){r=t.split(",");for(var n=0;n<r.length;n++)r[n]=r[n].trim()}else{if(!Array.isArray(t))throw new TypeError("String array or a comma separated string expected");r=t}var t=r.join(","),t=e.signatures[t];if(t)return t;throw new TypeError("Signature not found (signature: "+(e.name||"unnamed")+"("+r.join(", ")+"))")}function u(e,t){var r=l(e);if(t===r)return e;for(var n=0;n<k.conversions.length;n++){var i=k.conversions[n];if(i.from===r&&i.to===t)return i.convert(e)}throw new Error("Cannot convert from "+r+" to "+t)}function U(e){return e.map(function(e){var t=e.types.map(d);return(e.restParam?"...":"")+t.join("|")}).join(",")}function c(e,r){var t=0===e.indexOf("..."),n=t?3<e.length?e.slice(3):"any":e,e=n.split("|").map(S).filter($).filter(M),n=b(r,e),e=e.map(function(e){var t=s(e);return{name:e,typeIndex:a(t),test:t.test,conversion:null,conversionIndex:-1}}),n=n.map(function(e){var t=s(e.from);return{name:e.from,typeIndex:a(t),test:t.test,conversion:e,conversionIndex:r.indexOf(e)}});return{types:e.concat(n),restParam:t}}function L(e,t,i){var r=[];return(r=""!==e.trim()?e.split(",").map(S).map(function(e,t,r){var n=c(e,i);if(n.restParam&&t!==r.length-1)throw new SyntaxError('Unexpected rest parameter "'+e+'": only allowed for the last parameter');return n}):r).some(E)?null:{params:r,fn:t}}function j(e){e=O(e);return!!e&&e.restParam}function p(e){return e.types.some(function(e){return null!=e.conversion})}function G(e){if(e&&0!==e.types.length){if(1===e.types.length)return s(e.types[0].name).test;if(2===e.types.length){var t=s(e.types[0].name).test,r=s(e.types[1].name).test;return function(e){return t(e)||r(e)}}var n=e.types.map(function(e){return s(e.name).test});return function(e){for(var t=0;t<n.length;t++)if(n[t](e))return!0;return!1}}return B}function H(e){var r,t,n;if(j(e)){var i=(r=A(e).map(G)).length,a=G(O(e)),o=function(e){for(var t=i;t<e.length;t++)if(!a(e[t]))return!1;return!0};return function(e){for(var t=0;t<r.length;t++)if(!r[t](e[t]))return!1;return o(e)&&e.length>=i+1}}return 0===e.length?function(e){return 0===e.length}:1===e.length?(t=G(e[0]),function(e){return t(e[0])&&1===e.length}):2===e.length?(t=G(e[0]),n=G(e[1]),function(e){return t(e[0])&&n(e[1])&&2===e.length}):(r=e.map(G),function(e){for(var t=0;t<r.length;t++)if(!r[t](e[t]))return!1;return e.length===r.length})}function m(e,t){return t<e.params.length?e.params[t]:j(e.params)?O(e.params):null}function f(e,t,r){var t=m(e,t),t=t?r?t.types.filter(h):t.types:[];return t.map(d)}function d(e){return e.name}function h(e){return null===e.conversion||void 0===e.conversion}function y(e,t){e=_(ee(e,function(e){return f(e,t,!1)}));return-1!==e.indexOf("any")?["any"]:e}function V(e,r,t){var n,i,a,o=e||"unnamed",s=t;for(a=0;a<r.length;a++){var u=s.filter(function(e){var t=G(m(e,a));return(a<e.params.length||j(e.params))&&t(r[a])});if(0===u.length){if(0<(i=y(s,a)).length){var c=l(r[a]);return(n=new TypeError("Unexpected type of argument in function "+o+" (expected: "+i.join(" or ")+", actual: "+c+", index: "+a+")")).data={category:"wrongType",fn:o,index:a,actual:c,expected:i},n}}else s=u}var t=s.map(function(e){return j(e.params)?1/0:e.params.length});if(r.length<Math.min.apply(null,t))return i=y(s,a),(n=new TypeError("Too few arguments in function "+o+" (expected: "+i.join(" or ")+", index: "+r.length+")")).data={category:"tooFewArgs",fn:o,index:r.length,expected:i},n;t=Math.max.apply(null,t);return r.length>t?(n=new TypeError("Too many arguments in function "+o+" (expected: "+t+", actual: "+r.length+")")).data={category:"tooManyArgs",fn:o,index:r.length,expectedLength:t}:(n=new TypeError('Arguments of type "'+r.join(", ")+'" do not match any of the defined signatures of function '+o+".")).data={category:"mismatch",actual:r.map(l)},n}function g(e){for(var t=999,r=0;r<e.types.length;r++)h(e.types[r])&&(t=Math.min(t,e.types[r].typeIndex));return t}function x(e){for(var t=999,r=0;r<e.types.length;r++)h(e.types[r])||(t=Math.min(t,e.types[r].conversionIndex));return t}function v(e,t){var r;return 0!==(r=e.restParam-t.restParam)||0!==(r=p(e)-p(t))||0!==(r=g(e)-g(t))?r:x(e)-x(t)}function Z(e,t){var r,n,i=Math.min(e.params.length,t.params.length);if(0!==(n=e.params.some(p)-t.params.some(p)))return n;for(r=0;r<i;r++)if(0!==(n=p(e.params[r])-p(t.params[r])))return n;for(r=0;r<i;r++)if(0!==(n=v(e.params[r],t.params[r])))return n;return e.params.length-t.params.length}function b(e,t){var r={};return e.forEach(function(e){-1!==t.indexOf(e.from)||-1===t.indexOf(e.to)||r[e.from]||(r[e.from]=e)}),Object.keys(r).map(function(e){return r[e]})}function W(e,n){var i,a,t=n;e.some(p)&&(i=j(e),a=e.map(w),t=function(){for(var e=[],t=i?arguments.length-1:arguments.length,r=0;r<t;r++)e[r]=a[r](arguments[r]);return i&&(e[t]=arguments[t].map(a[t])),n.apply(this,e)});var r,o=t;return j(e)&&(r=e.length-1,o=function(){return t.apply(this,C(arguments,0,r).concat([C(arguments,r)]))}),o}function w(e){var t,r,n,i,a=[],o=[];switch(e.types.forEach(function(e){e.conversion&&(a.push(s(e.conversion.from).test),o.push(e.conversion.convert))}),o.length){case 0:return function(e){return e};case 1:return t=a[0],n=o[0],function(e){return t(e)?n(e):e};case 2:return t=a[0],r=a[1],n=o[0],i=o[1],function(e){return t(e)?n(e):r(e)?i(e):e};default:return function(e){for(var t=0;t<o.length;t++)if(a[t](e))return o[t](e);return e}}}function J(e){var r={};return e.forEach(function(t){t.params.some(p)||Y(t.params,!0).forEach(function(e){r[U(e)]=t.fn})}),r}function Y(e,a){function o(r,t,n){if(t<r.length){var e=r[t],i=a?e.types.filter(h):e.types;return i=e.restParam?(e=i.filter(h)).length<i.length?[e,i]:[i]:i.map(function(e){return[e]}),ee(i,function(e){return o(r,t+1,n.concat([e]))})}i=n.map(function(e,t){return{types:e,restParam:t===r.length-1&&j(r)}});return[i]}return o(e,0,[])}function X(e,t){for(var r=Math.max(e.params.length,t.params.length),n=0;n<r;n++){var i=f(e,n,!0),a=f(t,n,!0);if(!D(i,a))return!1}var o=e.params.length,s=t.params.length,u=j(e.params),c=j(t.params);return u?c?o===s:o<=s:c?s<=o:o===s}function N(t,r){if(0===Object.keys(r).length)throw new SyntaxError("No signatures provided");var n=[];Object.keys(r).map(function(e){return L(e,r[e],k.conversions)}).filter(Q).forEach(function(t){var e=K(n,function(e){return X(e,t)});if(e)throw new TypeError('Conflicting signatures "'+U(e.params)+'" and "'+U(t.params)+'".');n.push(t)});var i=ee(n,function(t){var e=t?Y(t.params,!1):[];return e.map(function(e){return{params:e,fn:t.fn}})}).filter(Q);i.sort(Z);var e=i[0]&&i[0].params.length<=2&&!j(i[0].params),a=i[1]&&i[1].params.length<=2&&!j(i[1].params),o=i[2]&&i[2].params.length<=2&&!j(i[2].params),s=i[3]&&i[3].params.length<=2&&!j(i[3].params),u=i[4]&&i[4].params.length<=2&&!j(i[4].params),c=i[5]&&i[5].params.length<=2&&!j(i[5].params),l=e&&a&&o&&s&&u&&c,p=i.map(function(e){return H(e.params)}),m=e?G(i[0].params[0]):te,f=a?G(i[1].params[0]):te,d=o?G(i[2].params[0]):te,h=s?G(i[3].params[0]):te,y=u?G(i[4].params[0]):te,g=c?G(i[5].params[0]):te,x=e?G(i[0].params[1]):te,v=a?G(i[1].params[1]):te,b=o?G(i[2].params[1]):te,w=s?G(i[3].params[1]):te,N=u?G(i[4].params[1]):te,M=c?G(i[5].params[1]):te,S=i.map(function(e){return W(e.params,e.fn)}),$=e?S[0]:re,E=a?S[1]:re,A=o?S[2]:re,O=s?S[3]:re,C=u?S[4]:re,T=c?S[5]:re,D=e?i[0].params.length:-1,_=a?i[1].params.length:-1,I=o?i[2].params.length:-1,R=s?i[3].params.length:-1,B=u?i[4].params.length:-1,q=c?i[5].params.length:-1,F=l?6:0,z=i.length,P=function(){for(var e=F;e<z;e++)if(p[e](arguments))return S[e].apply(this,arguments);throw V(t,arguments,i)},l=function e(t,r){return(arguments.length===D&&m(t)&&x(r)?$:arguments.length===_&&f(t)&&v(r)?E:arguments.length===I&&d(t)&&b(r)?A:arguments.length===R&&h(t)&&w(r)?O:arguments.length===B&&y(t)&&N(r)?C:arguments.length===q&&g(t)&&M(r)?T:P).apply(e,arguments)};try{Object.defineProperty(l,"name",{value:t})}catch(e){}return l.signatures=J(i),l}function M(e){return-1===k.ignore.indexOf(e)}function S(e){return e.trim()}function $(e){return!!e}function Q(e){return null!==e}function E(e){return 0===e.types.length}function A(e){return e.slice(0,e.length-1)}function O(e){return e[e.length-1]}function C(e,t,r){return Array.prototype.slice.call(e,t,r)}function T(e,t){return-1!==e.indexOf(t)}function D(e,t){for(var r=0;r<e.length;r++)if(T(t,e[r]))return!0;return!1}function K(e,t){for(var r=0;r<e.length;r++)if(t(e[r]))return e[r]}function _(e){for(var t={},r=0;r<e.length;r++)t[e[r]]=!0;return Object.keys(t)}function ee(e,t){return Array.prototype.concat.apply([],e.map(t))}function I(e){for(var t="",r=0;r<e.length;r++){var n=e[r];if(("object"==typeof n.signatures||"string"==typeof n.signature)&&""!==n.name)if(""===t)t=n.name;else if(t!==n.name){var i=new Error("Function names do not match (expected: "+t+", actual: "+n.name+")");throw i.data={actual:n.name,expected:t},i}}return t}function R(e){var r,n={};function t(e,t){if(n.hasOwnProperty(e)&&t!==n[e])throw(r=new Error('Signature "'+e+'" is defined twice')).data={signature:e},r}for(var i=0;i<e.length;i++){var a=e[i];if("object"==typeof a.signatures)for(var o in a.signatures)a.signatures.hasOwnProperty(o)&&(t(o,a.signatures[o]),n[o]=a.signatures[o]);else{if("string"!=typeof a.signature)throw(r=new TypeError("Function is no typed-function (index: "+i+")")).data={index:i},r;t(a.signature,a),n[a.signature]=a}}return n}k=N("typed",{"string, Object":N,Object:function(e){var t,r=[];for(t in e)e.hasOwnProperty(t)&&r.push(e[t]);var n=I(r);return N(n,e)},"...Function":function(e){return N(I(e),R(e))},"string, ...Function":function(e,t){return N(e,R(t))}});k.create=e;k.types=t;k.conversions=i;k.ignore=n;k.convert=u;k.find=o;k.addType=function(e,t){if(!e||"string"!=typeof e.name||"function"!=typeof e.test)throw new TypeError("Object with properties {name: string, test: function} expected");if(!1!==t)for(var r=0;r<k.types.length;r++)if("Object"===k.types[r].name)return void k.types.splice(r,0,e);k.types.push(e)};k.addConversion=function(e){if(!e||"string"!=typeof e.from||"string"!=typeof e.to||"function"!=typeof e.convert)throw new TypeError("Object with properties {from: string, to: string, convert: function} expected");k.conversions.push(e)};return k}()});function isInteger$1(e){return"boolean"==typeof e||!!isFinite(e)&&e===Math.round(e)}var sign$1=Math.sign||function(e){return 0<e?1:e<0?-1:0},log2$1=Math.log2||function(e){return Math.log(e)/Math.LN2},log10$1=Math.log10||function(e){return Math.log(e)/Math.LN10},log1p$1=Math.log1p||function(e){return Math.log(e+1)},cbrt$1=Math.cbrt||function(e){if(0===e)return e;var t,r=e<0;return r&&(e=-e),t=isFinite(e)?(e/((t=Math.exp(Math.log(e)/3))*t)+2*t)/3:e,r?-t:t},expm1$1=Math.expm1||function(e){return 2e-4<=e||e<=-2e-4?Math.exp(e)-1:e+e*e/2+e*e*e/6};function formatNumberToBase(e,t,r){var n={2:"0b",8:"0o",16:"0x"}[t],i="";if(r){if(r<1)throw new Error("size must be in greater than 0");if(!isInteger$1(r))throw new Error("size must be an integer");if(2**(r-1)-1<e||e<-(2**(r-1)))throw new Error("Value must be in range [-2^".concat(r-1,", 2^").concat(r-1,"-1]"));if(!isInteger$1(e))throw new Error("Value must be an integer");e<0&&(e+=2**r),i="i".concat(r)}r="";return e<0&&(e=-e,r="-"),"".concat(r).concat(n).concat(e.toString(t)).concat(i)}function format$3(e,t){if("function"==typeof t)return t(e);if(e===1/0)return"Infinity";if(e===-1/0)return"-Infinity";if(isNaN(e))return"NaN";var r,n,i="auto";if(t&&(t.notation&&(i=t.notation),isNumber(t)?r=t:isNumber(t.precision)&&(r=t.precision),t.wordSize&&"number"!=typeof(n=t.wordSize)))throw new Error('Option "wordSize" must be a number');switch(i){case"fixed":return toFixed$2(e,r);case"exponential":return toExponential$1(e,r);case"engineering":return toEngineering$1(e,r);case"bin":return formatNumberToBase(e,2,n);case"oct":return formatNumberToBase(e,8,n);case"hex":return formatNumberToBase(e,16,n);case"auto":return toPrecision(e,r,t).replace(/((\.\d*?)(0+))($|e)/,function(){var e=arguments[2],t=arguments[4];return"."!==e?e+t:t});default:throw new Error('Unknown notation "'+i+'". Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.')}}function splitNumber(e){var t=String(e).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);if(!t)throw new SyntaxError("Invalid number "+e);var r=t[1],e=t[2],n=parseFloat(t[4]||"0"),t=e.indexOf(".");n+=-1!==t?t-1:e.length-1;e=e.replace(".","").replace(/^0*/,function(e){return n-=e.length,""}).replace(/0*$/,"").split("").map(function(e){return parseInt(e)});return 0===e.length&&(e.push(0),n++),{sign:r,coefficients:e,exponent:n}}function toEngineering$1(e,t){if(isNaN(e)||!isFinite(e))return String(e);var r=roundDigits(splitNumber(e),t),n=r.exponent,i=r.coefficients,a=n%3==0?n:n<0?n-3-n%3:n-n%3;if(isNumber(t))for(;t>i.length||n-a+1>i.length;)i.push(0);else for(var o=Math.abs(n-a)-(i.length-1),s=0;s<o;s++)i.push(0);for(var u=Math.abs(n-a),c=1;0<u;)c++,u--;e=i.slice(c).join(""),e=isNumber(t)&&e.length||e.match(/[1-9]/)?"."+e:"",e=i.slice(0,c).join("")+e+"e"+(0<=n?"+":"")+a.toString();return r.sign+e}function toFixed$2(e,t){if(isNaN(e)||!isFinite(e))return String(e);var r=splitNumber(e),n="number"==typeof t?roundDigits(r,r.exponent+1+t):r,e=n.coefficients,r=n.exponent+1,t=r+(t||0);return e.length<t&&(e=e.concat(zeros$1(t-e.length))),r<0&&(e=zeros$1(1-r).concat(e),r=1),r<e.length&&e.splice(r,0,0===r?"0.":"."),n.sign+e.join("")}function toExponential$1(e,t){if(isNaN(e)||!isFinite(e))return String(e);var r=splitNumber(e),n=t?roundDigits(r,t):r,e=n.coefficients,r=n.exponent,t=(e=e.length<t?e.concat(zeros$1(t-e.length)):e).shift();return n.sign+t+(0<e.length?"."+e.join(""):"")+"e"+(0<=r?"+":"")+r}function toPrecision(e,t,r){if(isNaN(e)||!isFinite(e))return String(e);var n=r&&void 0!==r.lowerExp?r.lowerExp:-3,i=r&&void 0!==r.upperExp?r.upperExp:5,r=splitNumber(e),r=t?roundDigits(r,t):r;if(r.exponent<n||r.exponent>=i)return toExponential$1(e,t);i=r.coefficients,e=r.exponent;i=(i=i.length<t?i.concat(zeros$1(t-i.length)):i).concat(zeros$1(e-i.length+1+(i.length<t?t-i.length:0)));t=0<e?e:0;return t<(i=zeros$1(-e).concat(i)).length-1&&i.splice(t+1,0,"."),r.sign+i.join("")}function roundDigits(e,t){for(var r={sign:e.sign,coefficients:e.coefficients,exponent:e.exponent},n=r.coefficients;t<=0;)n.unshift(0),r.exponent++,t++;if(n.length>t&&5<=n.splice(t,n.length-t)[0]){var i=t-1;for(n[i]++;10===n[i];)n.pop(),0===i&&(n.unshift(0),r.exponent++,i++),n[--i]++}return r}function zeros$1(e){for(var t=[],r=0;r<e;r++)t.push(0);return t}function digits(e){return e.toExponential().replace(/e.*$/,"").replace(/^0\.?0*|\./,"").length}var DBL_EPSILON=Number.EPSILON||2220446049250313e-31;function nearlyEqual$1(e,t,r){if(null==r)return e===t;if(e===t)return!0;if(isNaN(e)||isNaN(t))return!1;if(isFinite(e)&&isFinite(t)){var n=Math.abs(e-t);return n<DBL_EPSILON||n<=Math.max(Math.abs(e),Math.abs(t))*r}return!1}var acosh$1=Math.acosh||function(e){return Math.log(Math.sqrt(e*e-1)+e)},asinh$1=Math.asinh||function(e){return Math.log(Math.sqrt(e*e+1)+e)},atanh$1=Math.atanh||function(e){return Math.log((1+e)/(1-e))/2},cosh$1=Math.cosh||function(e){return(Math.exp(e)+Math.exp(-e))/2},sinh$1=Math.sinh||function(e){return(Math.exp(e)-Math.exp(-e))/2},tanh$1=Math.tanh||function(e){e=Math.exp(2*e);return(e-1)/(e+1)};function formatBigNumberToBase(e,t,r){var n=new e.constructor(2),i="";if(r){if(r<1)throw new Error("size must be in greater than 0");if(!isInteger$1(r))throw new Error("size must be an integer");if(e.greaterThan(n.pow(r-1).sub(1))||e.lessThan(n.pow(r-1).mul(-1)))throw new Error("Value must be in range [-2^".concat(r-1,", 2^").concat(r-1,"-1]"));if(!e.isInteger())throw new Error("Value must be an integer");e.lessThan(0)&&(e=e.add(n.pow(r))),i="i".concat(r)}switch(t){case 2:return"".concat(e.toBinary()).concat(i);case 8:return"".concat(e.toOctal()).concat(i);case 16:return"".concat(e.toHexadecimal()).concat(i);default:throw new Error("Base ".concat(t," not supported "))}}function format$2(e,t){if("function"==typeof t)return t(e);if(!e.isFinite())return e.isNaN()?"NaN":e.gt(0)?"Infinity":"-Infinity";var r,n,i="auto";if(void 0!==t&&(t.notation&&(i=t.notation),"number"==typeof t?r=t:t.precision&&(r=t.precision),t.wordSize&&"number"!=typeof(n=t.wordSize)))throw new Error('Option "wordSize" must be a number');switch(i){case"fixed":return toFixed$1(e,r);case"exponential":return toExponential(e,r);case"engineering":return toEngineering(e,r);case"bin":return formatBigNumberToBase(e,2,n);case"oct":return formatBigNumberToBase(e,8,n);case"hex":return formatBigNumberToBase(e,16,n);case"auto":var a=t&&void 0!==t.lowerExp?t.lowerExp:-3,o=t&&void 0!==t.upperExp?t.upperExp:5;if(e.isZero())return"0";var s=e.toSignificantDigits(r),u=s.e;return(a<=u&&u<o?s.toFixed():toExponential(e,r)).replace(/((\.\d*?)(0+))($|e)/,function(){var e=arguments[2],t=arguments[4];return"."!==e?e+t:t});default:throw new Error('Unknown notation "'+i+'". Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.')}}function toEngineering(e,t){var r=e.e,n=r%3==0?r:r<0?r-3-r%3:r-r%3,e=e.mul(Math.pow(10,-n)),t=e.toPrecision(t);return(t=-1!==t.indexOf("e")?e.toString():t)+"e"+(0<=r?"+":"")+n.toString()}function toExponential(e,t){return void 0!==t?e.toExponential(t-1):e.toExponential()}function toFixed$1(e,t){return e.toFixed(t)}function endsWith(e,t){var r=e.length-t.length,n=e.length;return e.substring(r,n)===t}function format$1(t,r){return"number"==typeof t?format$3(t,r):isBigNumber(t)?format$2(t,r):looksLikeFraction(t)?r&&"decimal"===r.fraction?t.toString():t.s*t.n+"/"+t.d:Array.isArray(t)?formatArray(t,r):isString(t)?'"'+t+'"':"function"==typeof t?t.syntax?String(t.syntax):"function":t&&"object"==typeof t?"function"==typeof t.format?t.format(r):t&&t.toString(r)!=={}.toString()?t.toString(r):"{"+Object.keys(t).map(e=>'"'+e+'": '+format$1(t[e],r)).join(", ")+"}":String(t)}function stringify(e){for(var t=String(e),r="",n=0;n<t.length;){var i=t.charAt(n);"\\"===i?(r+=i,n++,""!==(i=t.charAt(n))&&-1!=='"\\/bfnrtu'.indexOf(i)||(r+="\\"),r+=i):r+='"'===i?'\\"':i,n++}return'"'+r+'"'}function escape(e){return String(e).replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function formatArray(e,t){if(Array.isArray(e)){for(var r="[",n=e.length,i=0;i<n;i++)0!==i&&(r+=", "),r+=formatArray(e[i],t);return r+="]"}return format$1(e,t)}function looksLikeFraction(e){return e&&"object"==typeof e&&"number"==typeof e.s&&"number"==typeof e.n&&"number"==typeof e.d||!1}function compareText$1(e,t){if(!isString(e))throw new TypeError("Unexpected type of argument in function compareText (expected: string or Array or Matrix, actual: "+typeOf$1(e)+", index: 0)");if(!isString(t))throw new TypeError("Unexpected type of argument in function compareText (expected: string or Array or Matrix, actual: "+typeOf$1(t)+", index: 1)");return e===t?0:t<e?1:-1}function DimensionError(e,t,r){if(!(this instanceof DimensionError))throw new SyntaxError("Constructor must be called with the new operator");this.actual=e,this.expected=t,this.relation=r,this.message="Dimension mismatch ("+(Array.isArray(e)?"["+e.join(", ")+"]":e)+" "+(this.relation||"!=")+" "+(Array.isArray(t)?"["+t.join(", ")+"]":t)+")",this.stack=(new Error).stack}function IndexError(e,t,r){if(!(this instanceof IndexError))throw new SyntaxError("Constructor must be called with the new operator");this.index=e,arguments.length<3?(this.min=0,this.max=t):(this.min=t,this.max=r),void 0!==this.min&&this.index<this.min?this.message="Index out of range ("+this.index+" < "+this.min+")":void 0!==this.max&&this.index>=this.max?this.message="Index out of range ("+this.index+" > "+(this.max-1)+")":this.message="Index out of range ("+this.index+")",this.stack=(new Error).stack}function arraySize(e){for(var t=[];Array.isArray(e);)t.push(e.length),e=e[0];return t}function _validate(e,t,r){var n=e.length;if(n!==t[r])throw new DimensionError(n,t[r]);if(r<t.length-1)for(var i=r+1,a=0;a<n;a++){var o=e[a];if(!Array.isArray(o))throw new DimensionError(t.length-1,t.length,"<");_validate(e[a],t,i)}else for(a=0;a<n;a++)if(Array.isArray(e[a]))throw new DimensionError(t.length+1,t.length,">")}function validate(e,t){if(0===t.length){if(Array.isArray(e))throw new DimensionError(e.length,0)}else _validate(e,t,0)}function validateIndex(e,t){if(!isNumber(e)||!isInteger$1(e))throw new TypeError("Index must be an integer (value: "+e+")");if(e<0||"number"==typeof t&&t<=e)throw new IndexError(e,t)}function resize$1(e,t,r){if(!Array.isArray(e)||!Array.isArray(t))throw new TypeError("Array expected");if(0===t.length)throw new Error("Resizing to scalar is not supported");return t.forEach(function(e){if(!isNumber(e)||!isInteger$1(e)||e<0)throw new TypeError("Invalid size, must contain positive integers (size: "+format$1(t)+")")}),_resize(e,t,0,void 0!==r?r:0),e}function _resize(e,t,r,n){var i,a=e.length,o=t[r],s=Math.min(a,o);if(e.length=o,r<t.length-1){for(var u=r+1,c=0;c<s;c++)i=e[c],Array.isArray(i)||(e[c]=i=[i]),_resize(i,t,u,n);for(c=s;c<o;c++)_resize(e[c]=i=[],t,u,n)}else{for(c=0;c<s;c++)for(;Array.isArray(e[c]);)e[c]=e[c][0];for(c=s;c<o;c++)e[c]=n}}function reshape$1(t,e){var r=flatten$1(t),n=r.length;if(!Array.isArray(t)||!Array.isArray(e))throw new TypeError("Array expected");if(0===e.length)throw new DimensionError(0,n,"!=");t=product$1(e=processSizesWildcard(e,n));if(n!==t)throw new DimensionError(t,n,"!=");try{return _reshape(r,e)}catch(e){if(e instanceof DimensionError)throw new DimensionError(t,n,"!=");throw e}}function processSizesWildcard(e,t){var r=product$1(e),n=e.slice(),i=e.indexOf(-1);if(0<=e.indexOf(-1,i+1))throw new Error("More than one wildcard in sizes");if(0<=i){if(!(t%r==0))throw new Error("Could not replace wildcard, since "+t+" is no multiple of "+-r);n[i]=-t/r}return n}function product$1(e){return e.reduce((e,t)=>e*t,1)}function _reshape(e,t){for(var r=e,n=t.length-1;0<n;n--){for(var i=t[n],a=[],o=r.length/i,s=0;s<o;s++)a.push(r.slice(s*i,(s+1)*i));r=a}return r}function squeeze$1(e,t){for(var r=t||arraySize(e);Array.isArray(e)&&1===e.length;)e=e[0],r.shift();for(var n=r.length;1===r[n-1];)n--;return n<r.length&&(e=_squeeze(e,n,0),r.length=n),e}function _squeeze(e,t,r){if(r<t)for(var n=r+1,i=0,a=e.length;i<a;i++)e[i]=_squeeze(e[i],t,n);else for(;Array.isArray(e);)e=e[0];return e}function unsqueeze(e,t,r,n){var i=n||arraySize(e);if(r)for(var a=0;a<r;a++)e=[e],i.unshift(1);for(e=_unsqueeze(e,t,0);i.length<t;)i.push(1);return e}function _unsqueeze(e,t,r){if(Array.isArray(e))for(var n=r+1,i=0,a=e.length;i<a;i++)e[i]=_unsqueeze(e[i],t,n);else for(var o=r;o<t;o++)e=[e];return e}function flatten$1(e){if(!Array.isArray(e))return e;var r=[];return e.forEach(function e(t){Array.isArray(t)?t.forEach(e):r.push(t)}),r}function map$1(e,t){return Array.prototype.map.call(e,t)}function forEach$1(e,t){Array.prototype.forEach.call(e,t)}function filter$1(e,t){if(1!==arraySize(e).length)throw new Error("Only one dimensional matrices supported");return Array.prototype.filter.call(e,t)}function filterRegExp(e,t){if(1!==arraySize(e).length)throw new Error("Only one dimensional matrices supported");return Array.prototype.filter.call(e,e=>t.test(e))}function join(e,t){return Array.prototype.join.call(e,t)}function identify(e){if(!Array.isArray(e))throw new TypeError("Array input expected");if(0===e.length)return e;var t=[],r=0;t[0]={value:e[0],identifier:0};for(var n=1;n<e.length;n++)e[n]===e[n-1]?r++:r=0,t.push({value:e[n],identifier:r});return t}function generalize(e){if(!Array.isArray(e))throw new TypeError("Array input expected");if(0===e.length)return e;for(var t=[],r=0;r<e.length;r++)t.push(e[r].value);return t}function getArrayDataType(e,t){for(var r,n=0,i=0;i<e.length;i++){var a=e[i],o=Array.isArray(a);if(0===i&&o&&(n=a.length),o&&a.length!==n)return;a=o?getArrayDataType(a,t):t(a);if(void 0===r)r=a;else if(r!==a)return"mixed"}return r}function factory(r,n,i,e){function t(e){var t=pickShallow(e,n.map(stripOptionalNotation));return assertDependencies(r,n,e),i(t)}return t.isFactory=!0,t.fn=r,t.dependencies=n.slice().sort(),e&&(t.meta=e),t}function assertDependencies(e,t,r){if(!t.filter(e=>!isOptionalDependency(e)).every(e=>void 0!==r[e])){t=t.filter(e=>void 0===r[e]);throw new Error('Cannot create function "'.concat(e,'", ')+"some dependencies are missing: ".concat(t.map(e=>'"'.concat(e,'"')).join(", "),"."))}}function isOptionalDependency(e){return e&&"?"===e[0]}function stripOptionalNotation(e){return e&&"?"===e[0]?e.slice(1):e}function getSafeProperty(e,t){if(isPlainObject(e)&&isSafeProperty(e,t))return e[t];if("function"==typeof e[t]&&isSafeMethod(e,t))throw new Error('Cannot access method "'+t+'" as a property');throw new Error('No access to property "'+t+'"')}function setSafeProperty(e,t,r){if(isPlainObject(e)&&isSafeProperty(e,t))return e[t]=r;throw new Error('No access to property "'+t+'"')}function hasSafeProperty(e,t){return t in e}function isSafeProperty(e,t){return!(!e||"object"!=typeof e)&&(!!hasOwnProperty$1(safeNativeProperties,t)||!(t in Object.prototype)&&!(t in Function.prototype))}function validateSafeMethod(e,t){if(!isSafeMethod(e,t))throw new Error('No access to method "'+t+'"')}function isSafeMethod(e,t){return null!=e&&"function"==typeof e[t]&&(!(hasOwnProperty$1(e,t)&&Object.getPrototypeOf&&t in Object.getPrototypeOf(e))&&(!!hasOwnProperty$1(safeNativeMethods,t)||!(t in Object.prototype)&&!(t in Function.prototype)))}function isPlainObject(e){return"object"==typeof e&&e&&e.constructor===Object}DimensionError.prototype=new RangeError,DimensionError.prototype.constructor=RangeError,DimensionError.prototype.name="DimensionError",DimensionError.prototype.isDimensionError=!0,IndexError.prototype=new RangeError,IndexError.prototype.constructor=RangeError,IndexError.prototype.name="IndexError";var safeNativeProperties={length:IndexError.prototype.isIndexError=!0,name:!0},safeNativeMethods={toString:!0,valueOf:!0,toLocaleString:!0};class ObjectWrappingMap{constructor(e){this.wrappedObject=e}keys(){return Object.keys(this.wrappedObject)}get(e){return getSafeProperty(this.wrappedObject,e)}set(e,t){return setSafeProperty(this.wrappedObject,e,t),this}has(e){return hasSafeProperty(this.wrappedObject,e)}}function createEmptyMap(){return new Map}function createMap$1(e){if(!e)return createEmptyMap();if(isMap(e))return e;if(isObject(e))return new ObjectWrappingMap(e);throw new Error("createMap can create maps from objects or Maps")}function toObject(e){if(e instanceof ObjectWrappingMap)return e.wrappedObject;var t,r={};for(t of e.keys())setSafeProperty(r,t,e.get(t));return r}function isMap(e){return!!e&&(e instanceof Map||e instanceof ObjectWrappingMap||"function"==typeof e.set&&"function"==typeof e.get&&"function"==typeof e.keys&&"function"==typeof e.has)}function assign(e){for(var t,r=arguments.length,n=new Array(1<r?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];for(t of n)if(t)if(isMap(t))for(var a of t.keys())e.set(a,t.get(a));else if(isObject(t))for(var o of Object.keys(t))e.set(o,t[o]);return e}var _createTyped2=function(){return _createTyped2=typedFunction.create,typedFunction},dependencies$4u=["?BigNumber","?Complex","?DenseMatrix","?Fraction"],createTyped=factory("typed",dependencies$4u,function(e){var{BigNumber:r,Complex:n,DenseMatrix:t,Fraction:i}=e,e=_createTyped2();return e.types=[{name:"number",test:isNumber},{name:"Complex",test:isComplex},{name:"BigNumber",test:isBigNumber},{name:"Fraction",test:isFraction},{name:"Unit",test:isUnit},{name:"string",test:isString},{name:"Chain",test:isChain},{name:"Array",test:isArray},{name:"Matrix",test:isMatrix},{name:"DenseMatrix",test:isDenseMatrix},{name:"SparseMatrix",test:isSparseMatrix},{name:"Range",test:isRange},{name:"Index",test:isIndex},{name:"boolean",test:isBoolean},{name:"ResultSet",test:isResultSet},{name:"Help",test:isHelp},{name:"function",test:isFunction},{name:"Date",test:isDate},{name:"RegExp",test:isRegExp},{name:"null",test:isNull},{name:"undefined",test:isUndefined},{name:"AccessorNode",test:isAccessorNode},{name:"ArrayNode",test:isArrayNode},{name:"AssignmentNode",test:isAssignmentNode},{name:"BlockNode",test:isBlockNode},{name:"ConditionalNode",test:isConditionalNode},{name:"ConstantNode",test:isConstantNode},{name:"FunctionNode",test:isFunctionNode},{name:"FunctionAssignmentNode",test:isFunctionAssignmentNode},{name:"IndexNode",test:isIndexNode},{name:"Node",test:isNode},{name:"ObjectNode",test:isObjectNode},{name:"OperatorNode",test:isOperatorNode},{name:"ParenthesisNode",test:isParenthesisNode},{name:"RangeNode",test:isRangeNode},{name:"SymbolNode",test:isSymbolNode},{name:"Map",test:isMap},{name:"Object",test:isObject}],e.conversions=[{from:"number",to:"BigNumber",convert:function(e){if(r||throwNoBignumber(e),15<digits(e))throw new TypeError("Cannot implicitly convert a number with >15 significant digits to BigNumber (value: "+e+"). Use function bignumber(x) to convert to BigNumber.");return new r(e)}},{from:"number",to:"Complex",convert:function(e){return n||throwNoComplex(e),new n(e,0)}},{from:"number",to:"string",convert:function(e){return e+""}},{from:"BigNumber",to:"Complex",convert:function(e){return n||throwNoComplex(e),new n(e.toNumber(),0)}},{from:"Fraction",to:"BigNumber",convert:function(e){throw new TypeError("Cannot implicitly convert a Fraction to BigNumber or vice versa. Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.")}},{from:"Fraction",to:"Complex",convert:function(e){return n||throwNoComplex(e),new n(e.valueOf(),0)}},{from:"number",to:"Fraction",convert:function(e){i||throwNoFraction(e);var t=new i(e);if(t.valueOf()!==e)throw new TypeError("Cannot implicitly convert a number to a Fraction when there will be a loss of precision (value: "+e+"). Use function fraction(x) to convert to Fraction.");return t}},{from:"string",to:"number",convert:function(e){var t=Number(e);if(isNaN(t))throw new Error('Cannot convert "'+e+'" to a number');return t}},{from:"string",to:"BigNumber",convert:function(t){r||throwNoBignumber(t);try{return new r(t)}catch(e){throw new Error('Cannot convert "'+t+'" to BigNumber')}}},{from:"string",to:"Fraction",convert:function(t){i||throwNoFraction(t);try{return new i(t)}catch(e){throw new Error('Cannot convert "'+t+'" to Fraction')}}},{from:"string",to:"Complex",convert:function(t){n||throwNoComplex(t);try{return new n(t)}catch(e){throw new Error('Cannot convert "'+t+'" to Complex')}}},{from:"boolean",to:"number",convert:function(e){return+e}},{from:"boolean",to:"BigNumber",convert:function(e){return r||throwNoBignumber(e),new r(+e)}},{from:"boolean",to:"Fraction",convert:function(e){return i||throwNoFraction(e),new i(+e)}},{from:"boolean",to:"string",convert:function(e){return String(e)}},{from:"Array",to:"Matrix",convert:function(e){return t||throwNoMatrix(),new t(e)}},{from:"Matrix",to:"Array",convert:function(e){return e.valueOf()}}],e});function throwNoBignumber(e){throw new Error("Cannot convert value ".concat(e," into a BigNumber: no class 'BigNumber' provided"))}function throwNoComplex(e){throw new Error("Cannot convert value ".concat(e," into a Complex number: no class 'Complex' provided"))}function throwNoMatrix(){throw new Error("Cannot convert array into a Matrix: no class 'DenseMatrix' provided")}function throwNoFraction(e){throw new Error("Cannot convert value ".concat(e," into a Fraction, no class 'Fraction' provided."))}var name$4t="ResultSet",dependencies$4t=[],createResultSet=factory(name$4t,dependencies$4t,()=>{function t(e){if(!(this instanceof t))throw new SyntaxError("Constructor must be called with the new operator");this.entries=e||[]}return t.prototype.type="ResultSet",t.prototype.isResultSet=!0,t.prototype.valueOf=function(){return this.entries},t.prototype.toString=function(){return"["+this.entries.join(", ")+"]"},t.prototype.toJSON=function(){return{mathjs:"ResultSet",entries:this.entries}},t.fromJSON=function(e){return new t(e.entries)},t},{isClass:!0}),decimal=createCommonjsModule(function(Ue){!function(e){var l,C,t,a,o=9e15,d=1e9,h="0123456789abcdef",n="2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058",i="3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789",s={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-o,maxE:o,crypto:!1},v=!0,u="[DecimalError] ",y=u+"Invalid argument: ",c=u+"Precision limit exceeded",p=u+"crypto unavailable",r="[object Decimal]",T=Math.floor,g=Math.pow,m=/^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,f=/^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,x=/^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,b=/^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,D=1e7,_=7,w=n.length-1,N=i.length-1,M={toStringTag:r};function S(e){var t,r,n,i=e.length-1,a="",o=e[0];if(0<i){for(a+=o,t=1;t<i;t++)n=e[t]+"",(r=_-n.length)&&(a+=L(r)),a+=n;o=e[t],(r=_-(n=o+"").length)&&(a+=L(r))}else if(0===o)return"0";for(;o%10==0;)o/=10;return a+o}function $(e,t,r){if(e!==~~e||e<t||r<e)throw Error(y+e)}function E(e,t,r,n){for(var i,a,o=e[0];10<=o;o/=10)--t;return--t<0?(t+=_,i=0):(i=Math.ceil((t+1)/_),t%=_),o=g(10,_-t),a=e[i]%o|0,null==n?t<3?(0==t?a=a/100|0:1==t&&(a=a/10|0),r<4&&99999==a||3<r&&49999==a||5e4==a||0==a):(r<4&&a+1==o||3<r&&a+1==o/2)&&(e[i+1]/o/100|0)==g(10,t-2)-1||(a==o/2||0==a)&&0==(e[i+1]/o/100|0):t<4?(0==t?a=a/1e3|0:1==t?a=a/100|0:2==t&&(a=a/10|0),(n||r<4)&&9999==a||!n&&3<r&&4999==a):((n||r<4)&&a+1==o||!n&&3<r&&a+1==o/2)&&(e[i+1]/o/1e3|0)==g(10,t-3)-1}function A(e,t,r){for(var n,i,a=[0],o=0,s=e.length;o<s;){for(i=a.length;i--;)a[i]*=t;for(a[0]+=h.indexOf(e.charAt(o++)),n=0;n<a.length;n++)a[n]>r-1&&(void 0===a[n+1]&&(a[n+1]=0),a[n+1]+=a[n]/r|0,a[n]%=r)}return a.reverse()}M.absoluteValue=M.abs=function(){var e=new this.constructor(this);return e.s<0&&(e.s=1),q(e)},M.ceil=function(){return q(new this.constructor(this),this.e+1,2)},M.clampedTo=M.clamp=function(e,t){var r=this.constructor;if(e=new r(e),t=new r(t),!e.s||!t.s)return new r(NaN);if(e.gt(t))throw Error(y+t);return this.cmp(e)<0?e:0<this.cmp(t)?t:new r(this)},M.comparedTo=M.cmp=function(e){var t,r,n=this,i=n.d,a=(e=new n.constructor(e)).d,o=n.s,s=e.s;if(!i||!a)return o&&s?o!==s?o:i===a?0:!i^o<0?1:-1:NaN;if(!i[0]||!a[0])return i[0]?o:a[0]?-s:0;if(o!==s)return o;if(n.e!==e.e)return n.e>e.e^o<0?1:-1;for(t=0,r=(n=i.length)<(e=a.length)?n:e;t<r;++t)if(i[t]!==a[t])return i[t]>a[t]^o<0?1:-1;return n===e?0:e<n^o<0?1:-1},M.cosine=M.cos=function(){var e,t,r=this,n=r.constructor;return r.d?r.d[0]?(e=n.precision,t=n.rounding,n.precision=e+Math.max(r.e,r.sd())+_,n.rounding=1,r=function(e,t){var r,n;if(t.isZero())return t;n=(n=t.d.length)<32?(r=Math.ceil(n/3),(1/X(4,r)).toString()):(r=16,"2.3283064365386962890625e-10");e.precision+=r,t=Y(e,1,t.times(n),new e(1));for(var i=r;i--;){var a=t.times(t);t=a.times(a).minus(a).times(8).plus(1)}return e.precision-=r,t}(n,Q(n,r)),n.precision=e,n.rounding=t,q(2==a||3==a?r.neg():r,e,t,!0)):new n(1):new n(NaN)},M.cubeRoot=M.cbrt=function(){var e,t,r,n,i,a,o,s,u,c,l=this,p=l.constructor;if(!l.isFinite()||l.isZero())return new p(l);for(v=!1,(a=l.s*g(l.s*l,1/3))&&Math.abs(a)!=1/0?n=new p(a.toString()):(r=S(l.d),(a=((e=l.e)-r.length+1)%3)&&(r+=1==a||-2==a?"0":"00"),a=g(r,1/3),e=T((e+1)/3)-(e%3==(e<0?-1:2)),(n=new p(r=a==1/0?"5e"+e:(r=a.toExponential()).slice(0,r.indexOf("e")+1)+e)).s=l.s),o=(e=p.precision)+3;;)if(c=(u=(s=n).times(s).times(s)).plus(l),n=O(c.plus(l).times(s),c.plus(u),o+2,1),S(s.d).slice(0,o)===(r=S(n.d)).slice(0,o)){if("9999"!=(r=r.slice(o-3,o+1))&&(i||"4999"!=r)){+r&&(+r.slice(1)||"5"!=r.charAt(0))||(q(n,e+1,1),t=!n.times(n).times(n).eq(l));break}if(!i&&(q(s,e+1,0),s.times(s).times(s).eq(l))){n=s;break}o+=4,i=1}return v=!0,q(n,e,p.rounding,t)},M.decimalPlaces=M.dp=function(){var e,t=this.d,r=NaN;if(t){if(r=((e=t.length-1)-T(this.e/_))*_,e=t[e])for(;e%10==0;e/=10)r--;r<0&&(r=0)}return r},M.dividedBy=M.div=function(e){return O(this,new this.constructor(e))},M.dividedToIntegerBy=M.divToInt=function(e){var t=this.constructor;return q(O(this,new t(e),0,1,1),t.precision,t.rounding)},M.equals=M.eq=function(e){return 0===this.cmp(e)},M.floor=function(){return q(new this.constructor(this),this.e+1,3)},M.greaterThan=M.gt=function(e){return 0<this.cmp(e)},M.greaterThanOrEqualTo=M.gte=function(e){e=this.cmp(e);return 1==e||0===e},M.hyperbolicCosine=M.cosh=function(){var e,t,r,n=(s=this).constructor,i=new n(1);if(!s.isFinite())return new n(s.s?1/0:NaN);if(s.isZero())return i;t=n.precision,r=n.rounding,n.precision=t+Math.max(s.e,s.sd())+4,n.rounding=1;for(var a,o=(o=s.d.length)<32?(1/X(4,e=Math.ceil(o/3))).toString():(e=16,"2.3283064365386962890625e-10"),s=Y(n,1,s.times(o),new n(1),!0),u=e,c=new n(8);u--;)a=s.times(s),s=i.minus(a.times(c.minus(a.times(c))));return q(s,n.precision=t,n.rounding=r,!0)},M.hyperbolicSine=M.sinh=function(){var e,t,r,n=(o=this).constructor;if(!o.isFinite()||o.isZero())return new n(o);if(e=n.precision,t=n.rounding,n.precision=e+Math.max(o.e,o.sd())+4,n.rounding=1,(r=o.d.length)<3)o=Y(n,2,o,o,!0);else for(var i,a=1.4*Math.sqrt(r),o=Y(n,2,o=o.times(1/X(5,a=16<a?16:0|a)),o,!0),s=new n(5),u=new n(16),c=new n(20);a--;)i=o.times(o),o=o.times(s.plus(i.times(u.times(i).plus(c))));return q(o,n.precision=e,n.rounding=t,!0)},M.hyperbolicTangent=M.tanh=function(){var e,t,r=this,n=r.constructor;return r.isFinite()?r.isZero()?new n(r):(e=n.precision,t=n.rounding,n.precision=e+7,n.rounding=1,O(r.sinh(),r.cosh(),n.precision=e,n.rounding=t)):new n(r.s)},M.inverseCosine=M.acos=function(){var e=this,t=e.constructor,r=e.abs().cmp(1),n=t.precision,i=t.rounding;return-1!==r?0===r?e.isNeg()?k(t,n,i):new t(0):new t(NaN):e.isZero()?k(t,n+4,i).times(.5):(t.precision=n+6,t.rounding=1,e=e.asin(),r=k(t,n+4,i).times(.5),t.precision=n,t.rounding=i,r.minus(e))},M.inverseHyperbolicCosine=M.acosh=function(){var e,t,r=this,n=r.constructor;return r.lte(1)?new n(r.eq(1)?0:NaN):r.isFinite()?(e=n.precision,t=n.rounding,n.precision=e+Math.max(Math.abs(r.e),r.sd())+4,n.rounding=1,v=!1,r=r.times(r).minus(1).sqrt().plus(r),v=!0,n.precision=e,n.rounding=t,r.ln()):new n(r)},M.inverseHyperbolicSine=M.asinh=function(){var e,t,r=this,n=r.constructor;return!r.isFinite()||r.isZero()?new n(r):(e=n.precision,t=n.rounding,n.precision=e+2*Math.max(Math.abs(r.e),r.sd())+6,n.rounding=1,v=!1,r=r.times(r).plus(1).sqrt().plus(r),v=!0,n.precision=e,n.rounding=t,r.ln())},M.inverseHyperbolicTangent=M.atanh=function(){var e,t,r,n=this,i=n.constructor;return n.isFinite()?0<=n.e?new i(n.abs().eq(1)?n.s/0:n.isZero()?n:NaN):(e=i.precision,t=i.rounding,r=n.sd(),Math.max(r,e)<2*-n.e-1?q(new i(n),e,t,!0):(i.precision=r=r-n.e,n=O(n.plus(1),new i(1).minus(n),r+e,1),i.precision=e+4,i.rounding=1,n=n.ln(),i.precision=e,i.rounding=t,n.times(.5))):new i(NaN)},M.inverseSine=M.asin=function(){var e,t,r,n=this,i=n.constructor;return n.isZero()?new i(n):(e=n.abs().cmp(1),t=i.precision,r=i.rounding,-1!==e?0===e?((e=k(i,t+4,r).times(.5)).s=n.s,e):new i(NaN):(i.precision=t+6,i.rounding=1,n=n.div(new i(1).minus(n.times(n)).sqrt().plus(1)).atan(),i.precision=t,i.rounding=r,n.times(2)))},M.inverseTangent=M.atan=function(){var e,t,r,n,i,a,o,s,u,c=this,l=c.constructor,p=l.precision,m=l.rounding;if(c.isFinite()){if(c.isZero())return new l(c);if(c.abs().eq(1)&&p+4<=N)return(o=k(l,p+4,m).times(.25)).s=c.s,o}else{if(!c.s)return new l(NaN);if(p+4<=N)return(o=k(l,p+4,m).times(.5)).s=c.s,o}for(l.precision=s=p+10,l.rounding=1,e=r=Math.min(28,s/_+2|0);e;--e)c=c.div(c.times(c).plus(1).sqrt().plus(1));for(v=!1,t=Math.ceil(s/_),n=1,u=c.times(c),o=new l(c),i=c;-1!==e;)if(i=i.times(u),a=o.minus(i.div(n+=2)),i=i.times(u),void 0!==(o=a.plus(i.div(n+=2))).d[t])for(e=t;o.d[e]===a.d[e]&&e--;);return r&&(o=o.times(2<<r-1)),v=!0,q(o,l.precision=p,l.rounding=m,!0)},M.isFinite=function(){return!!this.d},M.isInteger=M.isInt=function(){return!!this.d&&T(this.e/_)>this.d.length-2},M.isNaN=function(){return!this.s},M.isNegative=M.isNeg=function(){return this.s<0},M.isPositive=M.isPos=function(){return 0<this.s},M.isZero=function(){return!!this.d&&0===this.d[0]},M.lessThan=M.lt=function(e){return this.cmp(e)<0},M.lessThanOrEqualTo=M.lte=function(e){return this.cmp(e)<1},M.logarithm=M.log=function(e){var t,r,n,i,a,o,s,u,c=this,l=c.constructor,p=l.precision,m=l.rounding;if(null==e)e=new l(10),t=!0;else{if(r=(e=new l(e)).d,e.s<0||!r||!r[0]||e.eq(1))return new l(NaN);t=e.eq(10)}if(r=c.d,c.s<0||!r||!r[0]||c.eq(1))return new l(r&&!r[0]?-1/0:1!=c.s?NaN:r?0:1/0);if(t)if(1<r.length)a=!0;else{for(i=r[0];i%10==0;)i/=10;a=1!==i}if(v=!1,o=Z(c,s=p+5),n=t?P(l,s+10):Z(e,s),E((u=O(o,n,s,1)).d,i=p,m))do{if(o=Z(c,s+=10),n=t?P(l,s+10):Z(e,s),u=O(o,n,s,1),!a){+S(u.d).slice(i+1,i+15)+1==1e14&&(u=q(u,p+1,0));break}}while(E(u.d,i+=10,m));return v=!0,q(u,p,m)},M.minus=M.sub=function(e){var t,r,n,i,a,o,s,u,c,l,p,m=this,f=m.constructor;if(e=new f(e),!m.d||!e.d)return m.s&&e.s?m.d?e.s=-e.s:e=new f(e.d||m.s!==e.s?m:NaN):e=new f(NaN),e;if(m.s!=e.s)return e.s=-e.s,m.plus(e);if(c=m.d,p=e.d,s=f.precision,u=f.rounding,!c[0]||!p[0]){if(p[0])e.s=-e.s;else{if(!c[0])return new f(3===u?-0:0);e=new f(m)}return v?q(e,s,u):e}if(r=T(e.e/_),m=T(m.e/_),c=c.slice(),a=m-r){for(o=(l=a<0)?(t=c,a=-a,p.length):(t=p,r=m,c.length),(n=Math.max(Math.ceil(s/_),o)+2)<a&&(a=n,t.length=1),t.reverse(),n=a;n--;)t.push(0);t.reverse()}else{for((l=(n=c.length)<(o=p.length))&&(o=n),n=0;n<o;n++)if(c[n]!=p[n]){l=c[n]<p[n];break}a=0}for(l&&(t=c,c=p,p=t,e.s=-e.s),o=c.length,n=p.length-o;0<n;--n)c[o++]=0;for(n=p.length;a<n;){if(c[--n]<p[n]){for(i=n;i&&0===c[--i];)c[i]=D-1;--c[i],c[n]+=D}c[n]-=p[n]}for(;0===c[--o];)c.pop();for(;0===c[0];c.shift())--r;return c[0]?(e.d=c,e.e=z(c,r),v?q(e,s,u):e):new f(3===u?-0:0)},M.modulo=M.mod=function(e){var t,r=this,n=r.constructor;return e=new n(e),!r.d||!e.s||e.d&&!e.d[0]?new n(NaN):!e.d||r.d&&!r.d[0]?q(new n(r),n.precision,n.rounding):(v=!1,9==n.modulo?(t=O(r,e.abs(),0,3,1)).s*=e.s:t=O(r,e,0,n.modulo,1),t=t.times(e),v=!0,r.minus(t))},M.naturalExponential=M.exp=function(){return V(this)},M.naturalLogarithm=M.ln=function(){return Z(this)},M.negated=M.neg=function(){var e=new this.constructor(this);return e.s=-e.s,q(e)},M.plus=M.add=function(e){var t,r,n,i,a,o,s,u,c=this,l=c.constructor;if(e=new l(e),!c.d||!e.d)return c.s&&e.s?c.d||(e=new l(e.d||c.s===e.s?c:NaN)):e=new l(NaN),e;if(c.s!=e.s)return e.s=-e.s,c.minus(e);if(s=c.d,u=e.d,a=l.precision,o=l.rounding,!s[0]||!u[0])return u[0]||(e=new l(c)),v?q(e,a,o):e;if(l=T(c.e/_),c=T(e.e/_),s=s.slice(),n=l-c){for((i=(i=n<0?(r=s,n=-n,u.length):(r=u,c=l,s.length))<(l=Math.ceil(a/_))?l+1:i+1)<n&&(n=i,r.length=1),r.reverse();n--;)r.push(0);r.reverse()}for((i=s.length)-(n=u.length)<0&&(n=i,r=u,u=s,s=r),t=0;n;)t=(s[--n]=s[n]+u[n]+t)/D|0,s[n]%=D;for(t&&(s.unshift(t),++c),i=s.length;0==s[--i];)s.pop();return e.d=s,e.e=z(s,c),v?q(e,a,o):e},M.precision=M.sd=function(e){var t;if(void 0!==e&&e!==!!e&&1!==e&&0!==e)throw Error(y+e);return this.d?(t=U(this.d),e&&this.e+1>t&&(t=this.e+1)):t=NaN,t},M.round=function(){var e=this.constructor;return q(new e(this),this.e+1,e.rounding)},M.sine=M.sin=function(){var e,t,r=this,n=r.constructor;return r.isFinite()?r.isZero()?new n(r):(e=n.precision,t=n.rounding,n.precision=e+Math.max(r.e,r.sd())+_,n.rounding=1,r=function(e,t){var r,n=t.d.length;if(n<3)return t.isZero()?t:Y(e,2,t,t);r=16<(r=1.4*Math.sqrt(n))?16:0|r,t=t.times(1/X(5,r)),t=Y(e,2,t,t);for(var i,a=new e(5),o=new e(16),s=new e(20);r--;)i=t.times(t),t=t.times(a.plus(i.times(o.times(i).minus(s))));return t}(n,Q(n,r)),n.precision=e,n.rounding=t,q(2<a?r.neg():r,e,t,!0)):new n(NaN)},M.squareRoot=M.sqrt=function(){var e,t,r,n,i,a,o=this,s=o.d,u=o.e,c=o.s,l=o.constructor;if(1!==c||!s||!s[0])return new l(!c||c<0&&(!s||s[0])?NaN:s?o:1/0);for(v=!1,n=0==(c=Math.sqrt(+o))||c==1/0?(((t=S(s)).length+u)%2==0&&(t+="0"),c=Math.sqrt(t),u=T((u+1)/2)-(u<0||u%2),new l(t=c==1/0?"5e"+u:(t=c.toExponential()).slice(0,t.indexOf("e")+1)+u)):new l(c.toString()),r=(u=l.precision)+3;;)if(n=(a=n).plus(O(o,a,r+2,1)).times(.5),S(a.d).slice(0,r)===(t=S(n.d)).slice(0,r)){if("9999"!=(t=t.slice(r-3,r+1))&&(i||"4999"!=t)){+t&&(+t.slice(1)||"5"!=t.charAt(0))||(q(n,u+1,1),e=!n.times(n).eq(o));break}if(!i&&(q(a,u+1,0),a.times(a).eq(o))){n=a;break}r+=4,i=1}return v=!0,q(n,u,l.rounding,e)},M.tangent=M.tan=function(){var e,t,r=this,n=r.constructor;return r.isFinite()?r.isZero()?new n(r):(e=n.precision,t=n.rounding,n.precision=e+10,n.rounding=1,(r=r.sin()).s=1,r=O(r,new n(1).minus(r.times(r)).sqrt(),e+10,0),n.precision=e,n.rounding=t,q(2==a||4==a?r.neg():r,e,t,!0)):new n(NaN)},M.times=M.mul=function(e){var t,r,n,i,a,o,s,u,c,l=this.constructor,p=this.d,m=(e=new l(e)).d;if(e.s*=this.s,!(p&&p[0]&&m&&m[0]))return new l(!e.s||p&&!p[0]&&!m||m&&!m[0]&&!p?NaN:p&&m?0*e.s:e.s/0);for(r=T(this.e/_)+T(e.e/_),(u=p.length)<(c=m.length)&&(a=p,p=m,m=a,o=u,u=c,c=o),a=[],n=o=u+c;n--;)a.push(0);for(n=c;0<=--n;){for(t=0,i=u+n;n<i;)s=a[i]+m[n]*p[i-n-1]+t,a[i--]=s%D|0,t=s/D|0;a[i]=(a[i]+t)%D|0}for(;!a[--o];)a.pop();return t?++r:a.shift(),e.d=a,e.e=z(a,r),v?q(e,l.precision,l.rounding):e},M.toBinary=function(e,t){return K(this,2,e,t)},M.toDecimalPlaces=M.toDP=function(e,t){var r=this.constructor,n=new r(this);return void 0===e?n:($(e,0,d),void 0===t?t=r.rounding:$(t,0,8),q(n,e+n.e+1,t))},M.toExponential=function(e,t){var r=this,n=r.constructor,e=void 0===e?F(r,!0):($(e,0,d),void 0===t?t=n.rounding:$(t,0,8),F(r=q(new n(r),e+1,t),!0,e+1));return r.isNeg()&&!r.isZero()?"-"+e:e},M.toFixed=function(e,t){var r=this,n=r.constructor,i=void 0===e?F(r):($(e,0,d),void 0===t?t=n.rounding:$(t,0,8),F(i=q(new n(r),e+r.e+1,t),!1,e+i.e+1));return r.isNeg()&&!r.isZero()?"-"+i:i},M.toFraction=function(e){var t,r,n,i,a,o,s,u,c,l,p=this,m=p.d,f=p.constructor;if(!m)return new f(p);if(u=r=new f(1),n=s=new f(0),a=(t=new f(n)).e=U(m)-p.e-1,t.d[0]=g(10,(c=a%_)<0?_+c:c),null==e)e=0<a?t:u;else{if(!(o=new f(e)).isInt()||o.lt(u))throw Error(y+o);e=o.gt(t)?0<a?t:u:o}for(v=!1,o=new f(S(m)),c=f.precision,f.precision=a=m.length*_*2;l=O(o,t,0,1,1),1!=(i=r.plus(l.times(n))).cmp(e);)r=n,n=i,i=u,u=s.plus(l.times(i)),s=i,i=t,t=o.minus(l.times(i)),o=i;return i=O(e.minus(r),n,0,1,1),s=s.plus(i.times(u)),r=r.plus(i.times(n)),s.s=u.s=p.s,p=O(u,n,a,1).minus(p).abs().cmp(O(s,r,a,1).minus(p).abs())<1?[u,n]:[s,r],f.precision=c,v=!0,p},M.toHexadecimal=M.toHex=function(e,t){return K(this,16,e,t)},M.toNearest=function(e,t){var r=(n=this).constructor,n=new r(n);if(null==e){if(!n.d)return n;e=new r(1),t=r.rounding}else{if(e=new r(e),void 0===t?t=r.rounding:$(t,0,8),!n.d)return e.s?n:e;if(!e.d)return e.s&&(e.s=n.s),e}return e.d[0]?(v=!1,n=O(n,e,0,t,1).times(e),v=!0,q(n)):(e.s=n.s,n=e),n},M.toNumber=function(){return+this},M.toOctal=function(e,t){return K(this,8,e,t)},M.toPower=M.pow=function(e){var t,r,n,i,a,o,s=this,u=s.constructor,c=+(e=new u(e));if(!(s.d&&e.d&&s.d[0]&&e.d[0]))return new u(g(+s,c));if((s=new u(s)).eq(1))return s;if(n=u.precision,a=u.rounding,e.eq(1))return q(s,n,a);if((t=T(e.e/_))>=e.d.length-1&&(r=c<0?-c:c)<=9007199254740991)return i=j(u,s,r,n),e.s<0?new u(1).div(i):q(i,n,a);if((o=s.s)<0){if(t<e.d.length-1)return new u(NaN);if(0==(1&e.d[t])&&(o=1),0==s.e&&1==s.d[0]&&1==s.d.length)return s.s=o,s}return(t=0!=(r=g(+s,c))&&isFinite(r)?new u(r+"").e:T(c*(Math.log("0."+S(s.d))/Math.LN10+s.e+1)))>u.maxE+1||t<u.minE-1?new u(0<t?o/0:0):(v=!1,u.rounding=s.s=1,r=Math.min(12,(t+"").length),(i=(i=V(e.times(Z(s,n+r)),n)).d&&E((i=q(i,n+5,1)).d,n,a)&&+S((i=q(V(e.times(Z(s,(t=n+10)+r)),t),t+5,1)).d).slice(n+1,n+15)+1==1e14?q(i,n+1,0):i).s=o,v=!0,q(i,n,u.rounding=a))},M.toPrecision=function(e,t){var r=this,n=r.constructor,e=void 0===e?F(r,r.e<=n.toExpNeg||r.e>=n.toExpPos):($(e,1,d),void 0===t?t=n.rounding:$(t,0,8),F(r=q(new n(r),e,t),e<=r.e||r.e<=n.toExpNeg,e));return r.isNeg()&&!r.isZero()?"-"+e:e},M.toSignificantDigits=M.toSD=function(e,t){var r=this.constructor;return void 0===e?(e=r.precision,t=r.rounding):($(e,1,d),void 0===t?t=r.rounding:$(t,0,8)),q(new r(this),e,t)},M.toString=function(){var e=this,t=e.constructor,t=F(e,e.e<=t.toExpNeg||e.e>=t.toExpPos);return e.isNeg()&&!e.isZero()?"-"+t:t},M.truncated=M.trunc=function(){return q(new this.constructor(this),this.e+1,1)},M.valueOf=M.toJSON=function(){var e=this,t=e.constructor,t=F(e,e.e<=t.toExpNeg||e.e>=t.toExpPos);return e.isNeg()?"-"+t:t};var O=function(e,t,r,n,i,a){var o,s,u,c,l,p,m,f,d,h,y,g,x,v,b,w,N,M,S,$=e.constructor,E=e.s==t.s?1:-1,A=e.d,O=t.d;if(!(A&&A[0]&&O&&O[0]))return new $(e.s&&t.s&&(A?!O||A[0]!=O[0]:O)?A&&0==A[0]||!O?0*E:E/0:NaN);for(s=a?(l=1,e.e-t.e):(a=D,T(e.e/(l=_))-T(t.e/l)),M=O.length,w=A.length,d=(E=new $(E)).d=[],u=0;O[u]==(A[u]||0);u++);if(O[u]>(A[u]||0)&&s--,null==r?(x=r=$.precision,n=$.rounding):x=i?r+(e.e-t.e)+1:r,x<0)d.push(1),p=!0;else{if(x=x/l+2|0,u=0,1==M){for(O=O[c=0],x++;(u<w||c)&&x--;u++)v=c*a+(A[u]||0),d[u]=v/O|0,c=v%O|0;p=c||u<w}else{for(1<(c=a/(O[0]+1)|0)&&(O=I(O,c,a),A=I(A,c,a),M=O.length,w=A.length),b=M,y=(h=A.slice(0,M)).length;y<M;)h[y++]=0;for((S=O.slice()).unshift(0),N=O[0],O[1]>=a/2&&++N;c=0,(o=R(O,h,M,y))<0?(g=h[0],1<(c=(g=M!=y?g*a+(h[1]||0):g)/N|0)?1==(o=R(m=I(O,c=a<=c?a-1:c,a),h,f=m.length,y=h.length))&&(c--,B(m,M<f?S:O,f,a)):(0==c&&(o=c=1),m=O.slice()),(f=m.length)<y&&m.unshift(0),B(h,m,y,a),-1==o&&(o=R(O,h,M,y=h.length))<1&&(c++,B(h,M<y?S:O,y,a)),y=h.length):0===o&&(c++,h=[0]),d[u++]=c,o&&h[0]?h[y++]=A[b]||0:(h=[A[b]],y=1),(b++<w||void 0!==h[0])&&x--;);p=void 0!==h[0]}d[0]||d.shift()}if(1==l)E.e=s,C=p;else{for(u=1,c=d[0];10<=c;c/=10)u++;E.e=u+s*l-1,q(E,i?r+E.e+1:r,n,p)}return E};function I(e,t,r){var n,i=0,a=e.length;for(e=e.slice();a--;)n=e[a]*t+i,e[a]=n%r|0,i=n/r|0;return i&&e.unshift(i),e}function R(e,t,r,n){var i,a;if(r!=n)a=n<r?1:-1;else for(i=a=0;i<r;i++)if(e[i]!=t[i]){a=e[i]>t[i]?1:-1;break}return a}function B(e,t,r,n){for(var i=0;r--;)e[r]-=i,i=e[r]<t[r]?1:0,e[r]=i*n+e[r]-t[r];for(;!e[0]&&1<e.length;)e.shift()}function q(e,t,r,n){var i,a,o,s,u,c,l,p,m=e.constructor;e:if(null!=t){if(!(l=e.d))return e;for(i=1,s=l[0];10<=s;s/=10)i++;if((a=t-i)<0)a+=_,o=t,u=(c=l[p=0])/g(10,i-o-1)%10|0;else if(p=Math.ceil((a+1)/_),(s=l.length)<=p){if(!n)break e;for(;s++<=p;)l.push(0);c=u=0,o=(a%=_)-_+(i=1)}else{for(c=s=l[p],i=1;10<=s;s/=10)i++;u=(o=(a%=_)-_+i)<0?0:c/g(10,i-o-1)%10|0}if(n=n||t<0||void 0!==l[p+1]||(o<0?c:c%g(10,i-o-1)),u=r<4?(u||n)&&(0==r||r==(e.s<0?3:2)):5<u||5==u&&(4==r||n||6==r&&(0<a?0<o?c/g(10,i-o):0:l[p-1])%10&1||r==(e.s<0?8:7)),t<1||!l[0])return l.length=0,u?(t-=e.e+1,l[0]=g(10,(_-t%_)%_),e.e=-t||0):l[0]=e.e=0,e;if(0==a?(l.length=p,s=1,p--):(l.length=p+1,s=g(10,_-a),l[p]=0<o?(c/g(10,i-o)%g(10,o)|0)*s:0),u)for(;;){if(0==p){for(a=1,o=l[0];10<=o;o/=10)a++;for(o=l[0]+=s,s=1;10<=o;o/=10)s++;a!=s&&(e.e++,l[0]==D&&(l[0]=1));break}if(l[p]+=s,l[p]!=D)break;l[p--]=0,s=1}for(a=l.length;0===l[--a];)l.pop()}return v&&(e.e>m.maxE?(e.d=null,e.e=NaN):e.e<m.minE&&(e.e=0,e.d=[0])),e}function F(e,t,r){if(!e.isFinite())return W(e);var n,i=e.e,a=S(e.d),o=a.length;return t?(r&&0<(n=r-o)?a=a.charAt(0)+"."+a.slice(1)+L(n):1<o&&(a=a.charAt(0)+"."+a.slice(1)),a=a+(e.e<0?"e":"e+")+e.e):i<0?(a="0."+L(-i-1)+a,r&&0<(n=r-o)&&(a+=L(n))):o<=i?(a+=L(i+1-o),r&&0<(n=r-i-1)&&(a=a+"."+L(n))):((n=i+1)<o&&(a=a.slice(0,n)+"."+a.slice(n)),r&&0<(n=r-o)&&(i+1===o&&(a+="."),a+=L(n))),a}function z(e,t){var r=e[0];for(t*=_;10<=r;r/=10)t++;return t}function P(e,t,r){if(w<t)throw v=!0,r&&(e.precision=r),Error(c);return q(new e(n),t,1,!0)}function k(e,t,r){if(N<t)throw Error(c);return q(new e(i),t,r,!0)}function U(e){var t=e.length-1,r=t*_+1;if(t=e[t]){for(;t%10==0;t/=10)r--;for(t=e[0];10<=t;t/=10)r++}return r}function L(e){for(var t="";e--;)t+="0";return t}function j(e,t,r,n){var i,a=new e(1),o=Math.ceil(n/_+4);for(v=!1;;){if(r%2&&ee((a=a.times(t)).d,o)&&(i=!0),0===(r=T(r/2))){r=a.d.length-1,i&&0===a.d[r]&&++a.d[r];break}ee((t=t.times(t)).d,o)}return v=!0,a}function G(e){return 1&e.d[e.d.length-1]}function H(e,t,r){for(var n,i=new e(t[0]),a=0;++a<t.length;){if(!(n=new e(t[a])).s){i=n;break}i[r](n)&&(i=n)}return i}function V(e,t){var r,n,i,a,o,s,u,c=0,l=0,p=0,m=e.constructor,f=m.rounding,d=m.precision;if(!e.d||!e.d[0]||17<e.e)return new m(e.d?e.d[0]?e.s<0?0:1/0:1:e.s?e.s<0?0:e:NaN);for(u=null==t?(v=!1,d):t,s=new m(.03125);-2<e.e;)e=e.times(s),p+=5;for(u+=n=Math.log(g(2,p))/Math.LN10*2+5|0,r=a=o=new m(1),m.precision=u;;){if(a=q(a.times(e),u,1),r=r.times(++l),S((s=o.plus(O(a,r,u,1))).d).slice(0,u)===S(o.d).slice(0,u)){for(i=p;i--;)o=q(o.times(o),u,1);if(null!=t)return m.precision=d,o;if(!(c<3&&E(o.d,u-n,f,c)))return q(o,m.precision=d,f,v=!0);m.precision=u+=10,r=a=s=new m(1),l=0,c++}o=s}}function Z(e,t){var r,n,i,a,o,s,u,c,l,p,m,f=1,d=e,h=d.d,y=d.constructor,g=y.rounding,x=y.precision;if(d.s<0||!h||!h[0]||!d.e&&1==h[0]&&1==h.length)return new y(h&&!h[0]?-1/0:1!=d.s?NaN:h?0:d);if(l=null==t?(v=!1,x):t,y.precision=l+=10,n=(r=S(h)).charAt(0),!(Math.abs(a=d.e)<15e14))return c=P(y,l+2,x).times(a+""),d=Z(new y(n+"."+r.slice(1)),l-10).plus(c),y.precision=x,null==t?q(d,x,g,v=!0):d;for(;n<7&&1!=n||1==n&&3<r.charAt(1);)n=(r=S((d=d.times(e)).d)).charAt(0),f++;for(a=d.e,1<n?(d=new y("0."+r),a++):d=new y(n+"."+r.slice(1)),u=o=d=O((p=d).minus(1),d.plus(1),l,1),m=q(d.times(d),l,1),i=3;;){if(o=q(o.times(m),l,1),S((c=u.plus(O(o,new y(i),l,1))).d).slice(0,l)===S(u.d).slice(0,l)){if(u=u.times(2),0!==a&&(u=u.plus(P(y,l+2,x).times(a+""))),u=O(u,new y(f),l,1),null!=t)return y.precision=x,u;if(!E(u.d,l-10,g,s))return q(u,y.precision=x,g,v=!0);y.precision=l+=10,c=o=d=O(p.minus(1),p.plus(1),l,1),m=q(d.times(d),l,1),i=s=1}u=c,i+=2}}function W(e){return String(e.s*e.s/0)}function J(e,t){var r,n,i;for(0<(n=(t=-1<(r=t.indexOf("."))?t.replace(".",""):t).search(/e/i))?(r<0&&(r=n),r+=+t.slice(n+1),t=t.substring(0,n)):r<0&&(r=t.length),n=0;48===t.charCodeAt(n);n++);for(i=t.length;48===t.charCodeAt(i-1);--i);if(t=t.slice(n,i)){if(i-=n,e.e=r=r-n-1,e.d=[],n=(r+1)%_,r<0&&(n+=_),n<i){for(n&&e.d.push(+t.slice(0,n)),i-=_;n<i;)e.d.push(+t.slice(n,n+=_));t=t.slice(n),n=_-t.length}else n-=i;for(;n--;)t+="0";e.d.push(+t),v&&(e.e>e.constructor.maxE?(e.d=null,e.e=NaN):e.e<e.constructor.minE&&(e.e=0,e.d=[0]))}else e.e=0,e.d=[0];return e}function Y(e,t,r,n,i){var a,o,s,u,c=e.precision,l=Math.ceil(c/_);for(v=!1,u=r.times(r),s=new e(n);;){if(o=O(s.times(u),new e(t++*t++),c,1),s=i?n.plus(o):n.minus(o),n=O(o.times(u),new e(t++*t++),c,1),void 0!==(o=s.plus(n)).d[l]){for(a=l;o.d[a]===s.d[a]&&a--;);if(-1==a)break}a=s,s=n,n=o,o=a}return v=!0,o.d.length=l+1,o}function X(e,t){for(var r=e;--t;)r*=e;return r}function Q(e,t){var r=t.s<0,n=k(e,e.precision,1),i=n.times(.5);if((t=t.abs()).lte(i))return a=r?4:1,t;if((e=t.divToInt(n)).isZero())a=r?3:2;else{if((t=t.minus(e.times(n))).lte(i))return a=G(e)?r?2:3:r?4:1,t;a=G(e)?r?1:4:r?3:2}return t.minus(n).abs()}function K(e,t,r,n){var i,a,o,s,u,c,l,p,m=e.constructor,f=void 0!==r;if(f?($(r,1,d),void 0===n?n=m.rounding:$(n,0,8)):(r=m.precision,n=m.rounding),e.isFinite()){for(f?(i=2,16==t?r=4*r-3:8==t&&(r=3*r-2)):i=t,0<=(o=(c=F(e)).indexOf("."))&&(c=c.replace(".",""),(p=new m(1)).e=c.length-o,p.d=A(F(p),10,i),p.e=p.d.length),a=s=(l=A(c,10,i)).length;0==l[--s];)l.pop();if(l[0]){if(o<0?a--:((e=new m(e)).d=l,e.e=a,l=(e=O(e,p,r,n,0,i)).d,a=e.e,u=C),o=l[r],p=i/2,u=u||void 0!==l[r+1],u=n<4?(void 0!==o||u)&&(0===n||n===(e.s<0?3:2)):p<o||o===p&&(4===n||u||6===n&&1&l[r-1]||n===(e.s<0?8:7)),l.length=r,u)for(;++l[--r]>i-1;)l[r]=0,r||(++a,l.unshift(1));for(s=l.length;!l[s-1];--s);for(o=0,c="";o<s;o++)c+=h.charAt(l[o]);if(f){if(1<s)if(16==t||8==t){for(o=16==t?4:3,--s;s%o;s++)c+="0";for(s=(l=A(c,i,t)).length;!l[s-1];--s);for(o=1,c="1.";o<s;o++)c+=h.charAt(l[o])}else c=c.charAt(0)+"."+c.slice(1);c=c+(a<0?"p":"p+")+a}else if(a<0){for(;++a;)c="0"+c;c="0."+c}else if(++a>s)for(a-=s;a--;)c+="0";else a<s&&(c=c.slice(0,a)+"."+c.slice(a))}else c=f?"0p+0":"0";c=(16==t?"0x":2==t?"0b":8==t?"0o":"")+c}else c=W(e);return e.s<0?"-"+c:c}function ee(e,t){return e.length>t&&(e.length=t,1)}function te(e){return new this(e).abs()}function re(e){return new this(e).acos()}function ne(e){return new this(e).acosh()}function ie(e,t){return new this(e).plus(t)}function ae(e){return new this(e).asin()}function oe(e){return new this(e).asinh()}function se(e){return new this(e).atan()}function ue(e){return new this(e).atanh()}function ce(e,t){e=new this(e),t=new this(t);var r,n=this.precision,i=this.rounding,a=n+4;return e.s&&t.s?e.d||t.d?!t.d||e.isZero()?(r=t.s<0?k(this,n,i):new this(0)).s=e.s:!e.d||t.isZero()?(r=k(this,a,1).times(.5)).s=e.s:r=t.s<0?(this.precision=a,this.rounding=1,r=this.atan(O(e,t,a,1)),t=k(this,a,1),this.precision=n,this.rounding=i,e.s<0?r.minus(t):r.plus(t)):this.atan(O(e,t,a,1)):(r=k(this,a,1).times(0<t.s?.25:.75)).s=e.s:r=new this(NaN),r}function le(e){return new this(e).cbrt()}function pe(e){return q(e=new this(e),e.e+1,2)}function me(e,t,r){return new this(e).clamp(t,r)}function fe(e){if(!e||"object"!=typeof e)throw Error(u+"Object expected");for(var t,r,n=!0===e.defaults,i=["precision",1,d,"rounding",0,8,"toExpNeg",-o,0,"toExpPos",0,o,"maxE",0,o,"minE",-o,0,"modulo",0,9],a=0;a<i.length;a+=3)if(t=i[a],n&&(this[t]=s[t]),void 0!==(r=e[t])){if(!(T(r)===r&&i[a+1]<=r&&r<=i[a+2]))throw Error(y+t+": "+r);this[t]=r}if(t="crypto",n&&(this[t]=s[t]),void 0!==(r=e[t])){if(!0!==r&&!1!==r&&0!==r&&1!==r)throw Error(y+t+": "+r);if(r){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(p);this[t]=!0}else this[t]=!1}return this}function de(e){return new this(e).cos()}function he(e){return new this(e).cosh()}function ye(e,t){return new this(e).div(t)}function ge(e){return new this(e).exp()}function xe(e){return q(e=new this(e),e.e+1,3)}function ve(){var e,t,r=new this(0);for(v=!1,e=0;e<arguments.length;)if((t=new this(arguments[e++])).d)r.d&&(r=r.plus(t.times(t)));else{if(t.s)return v=!0,new this(1/0);r=t}return v=!0,r.sqrt()}function be(e){return e instanceof l||e&&e.toStringTag===r||!1}function we(e){return new this(e).ln()}function Ne(e,t){return new this(e).log(t)}function Me(e){return new this(e).log(2)}function Se(e){return new this(e).log(10)}function $e(){return H(this,arguments,"lt")}function Ee(){return H(this,arguments,"gt")}function Ae(e,t){return new this(e).mod(t)}function Oe(e,t){return new this(e).mul(t)}function Ce(e,t){return new this(e).pow(t)}function Te(e){var t,r,n,i,a=0,o=new this(1),s=[];if(void 0===e?e=this.precision:$(e,1,d),n=Math.ceil(e/_),this.crypto)if(crypto.getRandomValues)for(t=crypto.getRandomValues(new Uint32Array(n));a<n;)429e7<=(i=t[a])?t[a]=crypto.getRandomValues(new Uint32Array(1))[0]:s[a++]=i%1e7;else{if(!crypto.randomBytes)throw Error(p);for(t=crypto.randomBytes(n*=4);a<n;)214e7<=(i=t[a]+(t[a+1]<<8)+(t[a+2]<<16)+((127&t[a+3])<<24))?crypto.randomBytes(4).copy(t,a):(s.push(i%1e7),a+=4);a=n/4}else for(;a<n;)s[a++]=1e7*Math.random()|0;for(n=s[--a],e%=_,n&&e&&(i=g(10,_-e),s[a]=(n/i|0)*i);0===s[a];a--)s.pop();if(a<0)s=[r=0];else{for(r=-1;0===s[0];r-=_)s.shift();for(n=1,i=s[0];10<=i;i/=10)n++;n<_&&(r-=_-n)}return o.e=r,o.d=s,o}function De(e){return q(e=new this(e),e.e+1,this.rounding)}function _e(e){return(e=new this(e)).d?e.d[0]?e.s:0*e.s:e.s||NaN}function Ie(e){return new this(e).sin()}function Re(e){return new this(e).sinh()}function Be(e){return new this(e).sqrt()}function qe(e,t){return new this(e).sub(t)}function Fe(){var e=0,t=arguments,r=new this(t[e]);for(v=!1;r.s&&++e<t.length;)r=r.plus(t[e]);return v=!0,q(r,this.precision,this.rounding)}function ze(e){return new this(e).tan()}function Pe(e){return new this(e).tanh()}function ke(e){return q(e=new this(e),e.e+1,1)}((l=function e(t){var r,n,i;function a(e){var t,r,n,i=this;if(!(i instanceof a))return new a(e);if(i.constructor=a,be(e))return i.s=e.s,void(v?!e.d||e.e>a.maxE?(i.e=NaN,i.d=null):e.e<a.minE?(i.e=0,i.d=[0]):(i.e=e.e,i.d=e.d.slice()):(i.e=e.e,i.d=e.d&&e.d.slice()));if("number"==(n=typeof e)){if(0===e)return i.s=1/e<0?-1:1,i.e=0,void(i.d=[0]);if(e<0?(e=-e,i.s=-1):i.s=1,e===~~e&&e<1e7){for(t=0,r=e;10<=r;r/=10)t++;return void(v?a.maxE<t?(i.e=NaN,i.d=null):t<a.minE?(i.e=0,i.d=[0]):(i.e=t,i.d=[e]):(i.e=t,i.d=[e]))}return 0*e!=0?(e||(i.s=NaN),i.e=NaN,void(i.d=null)):J(i,e.toString())}if("string"!=n)throw Error(y+e);return 45===(r=e.charCodeAt(0))?(e=e.slice(1),i.s=-1):(43===r&&(e=e.slice(1)),i.s=1),(b.test(e)?J:function(e,t){var r,n,i,a,o,s,u,c;if(-1<t.indexOf("_")){if(t=t.replace(/(\d)_(?=\d)/g,"$1"),b.test(t))return J(e,t)}else if("Infinity"===t||"NaN"===t)return+t||(e.s=NaN),e.e=NaN,e.d=null,e;if(f.test(t))c=16,t=t.toLowerCase();else if(m.test(t))c=2;else{if(!x.test(t))throw Error(y+t);c=8}for(i=(t=0<(i=t.search(/p/i))?(s=+t.slice(i+1),t.substring(2,i)):t.slice(2)).indexOf("."),r=e.constructor,(a=0<=i)&&(i=(o=(t=t.replace(".","")).length)-i,n=j(r,new r(c),i,2*i)),i=c=(u=A(t,c,D)).length-1;0===u[i];--i)u.pop();return i<0?new r(0*e.s):(e.e=z(u,c),e.d=u,v=!1,a&&(e=O(e,n,4*o)),s&&(e=e.times(Math.abs(s)<54?g(2,s):l.pow(2,s))),v=!0,e)})(i,e)}if(a.prototype=M,a.ROUND_UP=0,a.ROUND_DOWN=1,a.ROUND_CEIL=2,a.ROUND_FLOOR=3,a.ROUND_HALF_UP=4,a.ROUND_HALF_DOWN=5,a.ROUND_HALF_EVEN=6,a.ROUND_HALF_CEIL=7,a.ROUND_HALF_FLOOR=8,a.EUCLID=9,a.config=a.set=fe,a.clone=e,a.isDecimal=be,a.abs=te,a.acos=re,a.acosh=ne,a.add=ie,a.asin=ae,a.asinh=oe,a.atan=se,a.atanh=ue,a.atan2=ce,a.cbrt=le,a.ceil=pe,a.clamp=me,a.cos=de,a.cosh=he,a.div=ye,a.exp=ge,a.floor=xe,a.hypot=ve,a.ln=we,a.log=Ne,a.log10=Se,a.log2=Me,a.max=$e,a.min=Ee,a.mod=Ae,a.mul=Oe,a.pow=Ce,a.random=Te,a.round=De,a.sign=_e,a.sin=Ie,a.sinh=Re,a.sqrt=Be,a.sub=qe,a.sum=Fe,a.tan=ze,a.tanh=Pe,a.trunc=ke,(t=void 0===t?{}:t)&&!0!==t.defaults)for(i=["precision","rounding","toExpNeg","toExpPos","maxE","minE","modulo","crypto"],r=0;r<i.length;)t.hasOwnProperty(n=i[r++])||(t[n]=this[n]);return a.config(t),a}(s)).prototype.constructor=l).default=l.Decimal=l,n=new l(n),i=new l(i),Ue.exports?("function"==typeof Symbol&&"symbol"==typeof Symbol.iterator&&(M[Symbol.for("nodejs.util.inspect.custom")]=M.toString,M[Symbol.toStringTag]="Decimal"),Ue.exports=l):(e=e||("undefined"!=typeof self&&self&&self.self==self?self:window),t=e.Decimal,l.noConflict=function(){return e.Decimal=t,l},e.Decimal=l)}(commonjsGlobal)}),name$4s="BigNumber",dependencies$4s=["?on","config"],createBigNumberClass=factory(name$4s,dependencies$4s,e=>{var{on:t,config:e}=e,r=decimal.clone({precision:e.precision,modulo:decimal.EUCLID});return r.prototype=Object.create(r.prototype),r.prototype.type="BigNumber",r.prototype.isBigNumber=!0,r.prototype.toJSON=function(){return{mathjs:"BigNumber",value:this.toString()}},r.fromJSON=function(e){return new r(e.value)},t&&t("config",function(e,t){e.precision!==t.precision&&r.config({precision:e.precision})}),r},{isClass:!0}),complex$1=createCommonjsModule(function(e,t){function n(e){return.5*(Math.exp(e)+Math.exp(-e))}function i(e){return.5*(Math.exp(e)-Math.exp(-e))}function o(e,t){var r=Math.abs(e),n=Math.abs(t);return 0===e?Math.log(n):0===t?Math.log(r):r<3e3&&n<3e3?.5*Math.log(e*e+t*t):Math.log(e/Math.cos(Math.atan2(t,e)))}function r(e,t){var r={re:0,im:0};if(null==e)r.re=r.im=0;else if(void 0!==t)r.re=e,r.im=t;else switch(typeof e){case"object":if("im"in e&&"re"in e)r.re=e.re,r.im=e.im;else if("abs"in e&&"arg"in e){if(!Number.isFinite(e.abs)&&Number.isFinite(e.arg))return u.INFINITY;r.re=e.abs*Math.cos(e.arg),r.im=e.abs*Math.sin(e.arg)}else if("r"in e&&"phi"in e){if(!Number.isFinite(e.r)&&Number.isFinite(e.phi))return u.INFINITY;r.re=e.r*Math.cos(e.phi),r.im=e.r*Math.sin(e.phi)}else 2===e.length?(r.re=e[0],r.im=e[1]):c();break;case"string":r.im=r.re=0;var n=e.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g),i=1,a=0;null===n&&c();for(var o=0;o<n.length;o++){var s=n[o];" "===s||"\t"===s||"\n"===s||("+"===s?i++:"-"===s?a++:i=a=("i"===s||"I"===s?(i+a===0&&c()," "===n[o+1]||isNaN(n[o+1])?r.im+=parseFloat((a%2?"-":"")+"1"):(r.im+=parseFloat((a%2?"-":"")+n[o+1]),o++)):(i+a!==0&&!isNaN(s)||c(),"i"===n[o+1]||"I"===n[o+1]?(r.im+=parseFloat((a%2?"-":"")+s),o++):r.re+=parseFloat((a%2?"-":"")+s)),0))}0<i+a&&c();break;case"number":r.im=0,r.re=e;break;default:c()}return isNaN(r.re)||isNaN(r.im),r}function u(e,t){if(!(this instanceof u))return new u(e,t);t=r(e,t);this.re=t.re,this.im=t.im}var c;c=function(){throw SyntaxError("Invalid Param")},u.prototype={re:0,im:0,sign:function(){var e=this.abs();return new u(this.re/e,this.im/e)},add:function(e,t){t=new u(e,t);return this.isInfinite()&&t.isInfinite()?u.NAN:this.isInfinite()||t.isInfinite()?u.INFINITY:new u(this.re+t.re,this.im+t.im)},sub:function(e,t){t=new u(e,t);return this.isInfinite()&&t.isInfinite()?u.NAN:this.isInfinite()||t.isInfinite()?u.INFINITY:new u(this.re-t.re,this.im-t.im)},mul:function(e,t){t=new u(e,t);return this.isInfinite()&&t.isZero()||this.isZero()&&t.isInfinite()?u.NAN:this.isInfinite()||t.isInfinite()?u.INFINITY:0===t.im&&0===this.im?new u(this.re*t.re,0):new u(this.re*t.re-this.im*t.im,this.re*t.im+this.im*t.re)},div:function(e,t){var r=new u(e,t);if(this.isZero()&&r.isZero()||this.isInfinite()&&r.isInfinite())return u.NAN;if(this.isInfinite()||r.isZero())return u.INFINITY;if(this.isZero()||r.isInfinite())return u.ZERO;e=this.re,t=this.im;var n,i,a=r.re,r=r.im;return 0===r?new u(e/a,t/a):Math.abs(a)<Math.abs(r)?new u((e*(i=a/r)+t)/(n=a*i+r),(t*i-e)/n):new u((e+t*(i=r/a))/(n=r*i+a),(t-e*i)/n)},pow:function(e,t){var r=new u(e,t);if(e=this.re,t=this.im,r.isZero())return u.ONE;if(0===r.im){if(0===t&&0<e)return new u(Math.pow(e,r.re),0);if(0===e)switch((r.re%4+4)%4){case 0:return new u(Math.pow(t,r.re),0);case 1:return new u(0,Math.pow(t,r.re));case 2:return new u(-Math.pow(t,r.re),0);case 3:return new u(0,-Math.pow(t,r.re))}}if(0===e&&0===t&&0<r.re&&0<=r.im)return u.ZERO;var n=Math.atan2(t,e),i=o(e,t);return e=Math.exp(r.re*i-r.im*n),t=r.im*i+r.re*n,new u(e*Math.cos(t),e*Math.sin(t))},sqrt:function(){var e,t=this.re,r=this.im,n=this.abs();if(0<=t){if(0===r)return new u(Math.sqrt(t),0);e=.5*Math.sqrt(2*(n+t))}else e=Math.abs(r)/Math.sqrt(2*(n-t));return t=t<=0?.5*Math.sqrt(2*(n-t)):Math.abs(r)/Math.sqrt(2*(n+t)),new u(e,r<0?-t:t)},exp:function(){var e=Math.exp(this.re);return this.im,new u(e*Math.cos(this.im),e*Math.sin(this.im))},expm1:function(){var e=this.re,t=this.im;return new u(Math.expm1(e)*Math.cos(t)+function(e){var t=Math.PI/4;if(e<-t||t<e)return Math.cos(e)-1;e*=e;return e*(e*(e*(e*(e*(e*(e*(e/20922789888e3-1/87178291200)+1/479001600)-1/3628800)+1/40320)-1/720)+1/24)-.5)}(t),Math.exp(e)*Math.sin(t))},log:function(){var e=this.re,t=this.im;return new u(o(e,t),Math.atan2(t,e))},abs:function(){return e=this.re,t=this.im,r=Math.abs(e),n=Math.abs(t),r<3e3&&n<3e3?Math.sqrt(r*r+n*n):(n=r<n?(r=n,e/t):t/e,r*Math.sqrt(1+n*n));var e,t,r,n},arg:function(){return Math.atan2(this.im,this.re)},sin:function(){var e=this.re,t=this.im;return new u(Math.sin(e)*n(t),Math.cos(e)*i(t))},cos:function(){var e=this.re,t=this.im;return new u(Math.cos(e)*n(t),-Math.sin(e)*i(t))},tan:function(){var e=2*this.re,t=2*this.im,r=Math.cos(e)+n(t);return new u(Math.sin(e)/r,i(t)/r)},cot:function(){var e=2*this.re,t=2*this.im,r=Math.cos(e)-n(t);return new u(-Math.sin(e)/r,i(t)/r)},sec:function(){var e=this.re,t=this.im,r=.5*n(2*t)+.5*Math.cos(2*e);return new u(Math.cos(e)*n(t)/r,Math.sin(e)*i(t)/r)},csc:function(){var e=this.re,t=this.im,r=.5*n(2*t)-.5*Math.cos(2*e);return new u(Math.sin(e)*n(t)/r,-Math.cos(e)*i(t)/r)},asin:function(){var e=this.re,t=this.im,r=new u(t*t-e*e+1,-2*e*t).sqrt(),e=new u(r.re-t,r.im+e).log();return new u(e.im,-e.re)},acos:function(){var e=this.re,t=this.im,r=new u(t*t-e*e+1,-2*e*t).sqrt(),e=new u(r.re-t,r.im+e).log();return new u(Math.PI/2-e.im,e.re)},atan:function(){var e=this.re,t=this.im;if(0===e){if(1===t)return new u(0,1/0);if(-1===t)return new u(0,-1/0)}var r=e*e+(1-t)*(1-t),r=new u((1-t*t-e*e)/r,-2*e/r).log();return new u(-.5*r.im,.5*r.re)},acot:function(){var e=this.re,t=this.im;if(0===t)return new u(Math.atan2(1,e),0);var r=e*e+t*t;return(0!=r?new u(e/r,-t/r):new u(0!==e?e/0:0,0!==t?-t/0:0)).atan()},asec:function(){var e=this.re,t=this.im;if(0===e&&0===t)return new u(0,1/0);var r=e*e+t*t;return(0!=r?new u(e/r,-t/r):new u(0!==e?e/0:0,0!==t?-t/0:0)).acos()},acsc:function(){var e=this.re,t=this.im;if(0===e&&0===t)return new u(Math.PI/2,1/0);var r=e*e+t*t;return(0!=r?new u(e/r,-t/r):new u(0!==e?e/0:0,0!==t?-t/0:0)).asin()},sinh:function(){var e=this.re,t=this.im;return new u(i(e)*Math.cos(t),n(e)*Math.sin(t))},cosh:function(){var e=this.re,t=this.im;return new u(n(e)*Math.cos(t),i(e)*Math.sin(t))},tanh:function(){var e=2*this.re,t=2*this.im,r=n(e)+Math.cos(t);return new u(i(e)/r,Math.sin(t)/r)},coth:function(){var e=2*this.re,t=2*this.im,r=n(e)-Math.cos(t);return new u(i(e)/r,-Math.sin(t)/r)},csch:function(){var e=this.re,t=this.im,r=Math.cos(2*t)-n(2*e);return new u(-2*i(e)*Math.cos(t)/r,2*n(e)*Math.sin(t)/r)},sech:function(){var e=this.re,t=this.im,r=Math.cos(2*t)+n(2*e);return new u(2*n(e)*Math.cos(t)/r,-2*i(e)*Math.sin(t)/r)},asinh:function(){var e=this.im;this.im=-this.re,this.re=e;var t=this.asin();return this.re=-this.im,this.im=e,e=t.re,t.re=-t.im,t.im=e,t},acosh:function(){var e,t=this.acos();return t.im<=0?(e=t.re,t.re=-t.im,t.im=e):(e=t.im,t.im=-t.re,t.re=e),t},atanh:function(){var e=this.re,t=this.im,r=1<e&&0===t,n=1-e,i=1+e,a=n*n+t*t,e=0!=a?new u((i*n-t*t)/a,(t*n+i*t)/a):new u(-1!==e?e/0:0,0!==t?t/0:0),t=e.re;return e.re=o(e.re,e.im)/2,e.im=Math.atan2(e.im,t)/2,r&&(e.im=-e.im),e},acoth:function(){var e=this.re,t=this.im;if(0===e&&0===t)return new u(0,Math.PI/2);var r=e*e+t*t;return(0!=r?new u(e/r,-t/r):new u(0!==e?e/0:0,0!==t?-t/0:0)).atanh()},acsch:function(){var e=this.re,t=this.im;if(0===t)return new u(0!==e?Math.log(e+Math.sqrt(e*e+1)):1/0,0);var r=e*e+t*t;return(0!=r?new u(e/r,-t/r):new u(0!==e?e/0:0,0!==t?-t/0:0)).asinh()},asech:function(){var e=this.re,t=this.im;if(this.isZero())return u.INFINITY;var r=e*e+t*t;return(0!=r?new u(e/r,-t/r):new u(0!==e?e/0:0,0!==t?-t/0:0)).acosh()},inverse:function(){if(this.isZero())return u.INFINITY;if(this.isInfinite())return u.ZERO;var e=this.re,t=this.im,r=e*e+t*t;return new u(e/r,-t/r)},conjugate:function(){return new u(this.re,-this.im)},neg:function(){return new u(-this.re,-this.im)},ceil:function(e){return e=Math.pow(10,e||0),new u(Math.ceil(this.re*e)/e,Math.ceil(this.im*e)/e)},floor:function(e){return e=Math.pow(10,e||0),new u(Math.floor(this.re*e)/e,Math.floor(this.im*e)/e)},round:function(e){return e=Math.pow(10,e||0),new u(Math.round(this.re*e)/e,Math.round(this.im*e)/e)},equals:function(e,t){t=new u(e,t);return Math.abs(t.re-this.re)<=u.EPSILON&&Math.abs(t.im-this.im)<=u.EPSILON},clone:function(){return new u(this.re,this.im)},toString:function(){var e=this.re,t=this.im,r="";return this.isNaN()?"NaN":this.isInfinite()?"Infinity":(Math.abs(e)<u.EPSILON&&(e=0),0===(t=Math.abs(t)<u.EPSILON?0:t)?r+e:(0!==e?(r+=e,r+=" ",t<0?(t=-t,r+="-"):r+="+",r+=" "):t<0&&(t=-t,r+="-"),1!==t&&(r+=t),r+"i"))},toVector:function(){return[this.re,this.im]},valueOf:function(){return 0===this.im?this.re:null},isNaN:function(){return isNaN(this.re)||isNaN(this.im)},isZero:function(){return 0===this.im&&0===this.re},isFinite:function(){return isFinite(this.re)&&isFinite(this.im)},isInfinite:function(){return!(this.isNaN()||this.isFinite())}},u.ZERO=new u(0,0),u.ONE=new u(1,0),u.I=new u(0,1),u.PI=new u(Math.PI,0),u.E=new u(Math.E,0),u.INFINITY=new u(1/0,1/0),u.NAN=new u(NaN,NaN),u.EPSILON=1e-15,Object.defineProperty(u,"__esModule",{value:!0}),e.exports=(u.default=u).Complex=u}),Complex$1=getDefaultExportFromCjs(complex$1),name$4r="Complex",dependencies$4r=[],createComplexClass=factory(name$4r,dependencies$4r,()=>(Complex$1.prototype.type="Complex",Complex$1.prototype.isComplex=!0,Complex$1.prototype.toJSON=function(){return{mathjs:"Complex",re:this.re,im:this.im}},Complex$1.prototype.toPolar=function(){return{r:this.abs(),phi:this.arg()}},Complex$1.prototype.format=function(e){var t=this.im,r=this.re,n=format$3(this.re,e),i=format$3(this.im,e),e=isNumber(e)?e:e?e.precision:null;return null!==e&&(e=Math.pow(10,-e),Math.abs(r/t)<e&&(r=0),Math.abs(t/r)<e&&(t=0)),0===t?n:0===r?1===t?"i":-1===t?"-i":i+"i":t<0?-1===t?n+" - i":n+" - "+i.substring(1)+"i":1===t?n+" + i":n+" + "+i+"i"},Complex$1.fromPolar=function(e){switch(arguments.length){case 1:if("object"==typeof e)return Complex$1(e);throw new TypeError("Input has to be an object with r and phi keys.");case 2:var t=e,r=arguments[1];if(isNumber(t)){if(isNumber(r=isUnit(r)&&r.hasBase("ANGLE")?r.toNumber("rad"):r))return new Complex$1({r:t,phi:r});throw new TypeError("Phi is not a number nor an angle unit.")}throw new TypeError("Radius r is not a number.");default:throw new SyntaxError("Wrong number of arguments in function fromPolar")}},Complex$1.prototype.valueOf=Complex$1.prototype.toString,Complex$1.fromJSON=function(e){return new Complex$1(e)},Complex$1.compare=function(e,t){return e.re>t.re?1:e.re<t.re?-1:e.im>t.im?1:e.im<t.im?-1:0},Complex$1),{isClass:!0}),fraction$1=createCommonjsModule(function(e,t){function r(t){function e(){var e=Error.apply(this,arguments);e.name=this.name=t,this.stack=e.stack,this.message=e.message}function r(){}return r.prototype=Error.prototype,e.prototype=new r,e}function h(e,t){return isNaN(e=parseInt(e,10))&&y(),e*t}function y(){throw new n}function s(e){for(var t={},r=e,n=2,i=4;i<=r;){for(;r%n==0;)r/=n,t[n]=(t[n]||0)+1;i+=1+2*n++}return r!==e?1<r&&(t[r]=(t[r]||0)+1):t[e]=(t[e]||0)+1,t}function u(e,t,r){for(var n=1,i=function(e,t,r){for(var n=1;0<t;e=e*e%r,t>>=1)1&t&&(n=n*e%r);return n}(10,r,t),a=0;a<300;a++){if(n===i)return a;n=10*n%t,i=10*i%t}return 0}function c(e,t){if(!e)return t;if(!t)return e;for(;;){if(!(e%=t))return t;if(!(t%=e))return e}}function l(e,t){if(!(this instanceof l))return new l(e,t);p(e,t),e=l.REDUCE?c(g.d,g.n):1,this.s=g.s,this.n=g.n/e,this.d=g.d/e}var g,x,n,p;g={s:1,n:0,d:1},x=l.DivisionByZero=r("DivisionByZero"),n=l.InvalidParameter=r("InvalidParameter"),p=function(e,t){var r,n=0,i=1,a=1,o=0,s=0,u=0,c=1,l=1,p=0,m=1,f=1,d=1;if(null!=e)if(void 0!==t)a=(n=e)*(i=t);else switch(typeof e){case"object":"d"in e&&"n"in e?(n=e.n,i=e.d,"s"in e&&(n*=e.s)):0 in e?(n=e[0],1 in e&&(i=e[1])):y(),a=n*i;break;case"number":if((e=e<0?-(a=e):e)%1==0)n=e;else if(0<e){for(1<=e&&(e/=l=Math.pow(10,Math.floor(1+Math.log(e)/Math.LN10)));m<=1e7&&d<=1e7;){if(e===(r=(p+f)/(m+d))){i=m+d<=1e7?(n=p+f,m+d):m<d?(n=f,d):(n=p,m);break}r<e?(p+=f,m+=d):(f+=p,d+=m),i=1e7<m?(n=f,d):(n=p,m)}n*=l}else(isNaN(e)||isNaN(t))&&(i=n=NaN);break;case"string":if(null===(m=e.match(/\d+|./g))&&y(),"-"===m[p]?(a=-1,p++):"+"===m[p]&&p++,m.length===p+1?s=h(m[p++],a):"."===m[p+1]||"."===m[p]?("."!==m[p]&&(o=h(m[p++],a)),(++p+1===m.length||"("===m[p+1]&&")"===m[p+3]||"'"===m[p+1]&&"'"===m[p+3])&&(s=h(m[p],a),c=Math.pow(10,m[p].length),p++),("("===m[p]&&")"===m[p+2]||"'"===m[p]&&"'"===m[p+2])&&(u=h(m[p+1],a),l=Math.pow(10,m[p+1].length)-1,p+=3)):"/"===m[p+1]||":"===m[p+1]?(s=h(m[p],a),c=h(m[p+2],1),p+=3):"/"===m[p+3]&&" "===m[p+1]&&(o=h(m[p],a),s=h(m[p+2],a),c=h(m[p+4],1),p+=5),m.length<=p){a=n=u+(i=c*l)*o+l*s;break}default:y()}if(0===i)throw new x;g.s=a<0?-1:1,g.n=Math.abs(n),g.d=Math.abs(i)},l.REDUCE=1,l.prototype={s:1,n:0,d:1,abs:function(){return new l(this.n,this.d)},neg:function(){return new l(-this.s*this.n,this.d)},add:function(e,t){return p(e,t),new l(this.s*this.n*g.d+g.s*this.d*g.n,this.d*g.d)},sub:function(e,t){return p(e,t),new l(this.s*this.n*g.d-g.s*this.d*g.n,this.d*g.d)},mul:function(e,t){return p(e,t),new l(this.s*g.s*this.n*g.n,this.d*g.d)},div:function(e,t){return p(e,t),new l(this.s*g.s*this.n*g.d,this.d*g.n)},clone:function(){return new l(this)},mod:function(e,t){return isNaN(this.n)||isNaN(this.d)?new l(NaN):void 0===e?new l(this.s*this.n%this.d,1):(p(e,t),0===g.n&&0===this.d&&l(0,0),new l(this.s*(g.d*this.n)%(g.n*this.d),g.d*this.d))},gcd:function(e,t){return p(e,t),new l(c(g.n,this.n)*c(g.d,this.d),g.d*this.d)},lcm:function(e,t){return p(e,t),0===g.n&&0===this.n?new l:new l(g.n*this.n,c(g.n,this.n)*c(g.d,this.d))},ceil:function(e){return e=Math.pow(10,e||0),isNaN(this.n)||isNaN(this.d)?new l(NaN):new l(Math.ceil(e*this.s*this.n/this.d),e)},floor:function(e){return e=Math.pow(10,e||0),isNaN(this.n)||isNaN(this.d)?new l(NaN):new l(Math.floor(e*this.s*this.n/this.d),e)},round:function(e){return e=Math.pow(10,e||0),isNaN(this.n)||isNaN(this.d)?new l(NaN):new l(Math.round(e*this.s*this.n/this.d),e)},inverse:function(){return new l(this.s*this.d,this.n)},pow:function(e,t){if(p(e,t),1===g.d)return g.s<0?new l(Math.pow(this.s*this.d,g.n),Math.pow(this.n,g.n)):new l(Math.pow(this.s*this.n,g.n),Math.pow(this.d,g.n));if(this.s<0)return null;var r,n=s(this.n),i=s(this.d),a=1,o=1;for(r in n)if("1"!==r){if("0"===r){a=0;break}if(n[r]*=g.n,n[r]%g.d!=0)return null;n[r]/=g.d,a*=Math.pow(r,n[r])}for(r in i)if("1"!==r){if(i[r]*=g.n,i[r]%g.d!=0)return null;i[r]/=g.d,o*=Math.pow(r,i[r])}return g.s<0?new l(o,a):new l(a,o)},equals:function(e,t){return p(e,t),this.s*this.n*g.d==g.s*g.n*this.d},compare:function(e,t){p(e,t);t=this.s*this.n*g.d-g.s*g.n*this.d;return(0<t)-(t<0)},simplify:function(e){if(isNaN(this.n)||isNaN(this.d))return this;var t=this.abs().toContinued();e=e||.001;for(var r=0;r<t.length;r++){var n=function e(t){return 1===t.length?new l(t[0]):e(t.slice(1)).inverse().add(t[0])}(t.slice(0,r+1));if(n.sub(this.abs()).abs().valueOf()<e)return n.mul(this.s)}return this},divisible:function(e,t){return p(e,t),!(!(g.n*this.d)||this.n*g.d%(g.n*this.d))},valueOf:function(){return this.s*this.n/this.d},toFraction:function(e){var t,r="",n=this.n,i=this.d;return this.s<0&&(r+="-"),1===i?r+=n:(e&&0<(t=Math.floor(n/i))&&(r+=t,r+=" ",n%=i),r+=n,r+="/",r+=i),r},toLatex:function(e){var t,r="",n=this.n,i=this.d;return this.s<0&&(r+="-"),1===i?r+=n:(e&&0<(t=Math.floor(n/i))&&(r+=t,n%=i),r+="\\frac{",r+=n,r+="}{",r+=i,r+="}"),r},toContinued:function(){var e,t=this.n,r=this.d,n=[];if(isNaN(t)||isNaN(r))return n;for(;n.push(Math.floor(t/r)),e=t%r,t=r,r=e,1!==t;);return n},toString:function(e){var t=this.n,r=this.d;if(isNaN(t)||isNaN(r))return"NaN";l.REDUCE||(t/=i=c(t,r),r/=i),e=e||15;var n=function(e){for(;e%2==0;e/=2);for(;e%5==0;e/=5);if(1===e)return 0;for(var t=10%e,r=1;1!==t;r++)if(t=10*t%e,2e3<r)return 0;return r}(r),i=u(0,r,n),a=-1===this.s?"-":"";if(a+=t/r|0,t%=r,(t*=10)&&(a+="."),n){for(var o=i;o--;)a+=t/r|0,t%=r,t*=10;a+="(";for(o=n;o--;)a+=t/r|0,t%=r,t*=10;a+=")"}else for(o=e;t&&o--;)a+=t/r|0,t%=r,t*=10;return a}},Object.defineProperty(l,"__esModule",{value:!0}),e.exports=(l.default=l).Fraction=l}),Fraction$1=getDefaultExportFromCjs(fraction$1),name$4q="Fraction",dependencies$4q=[],createFractionClass=factory(name$4q,dependencies$4q,()=>(Fraction$1.prototype.type="Fraction",Fraction$1.prototype.isFraction=!0,Fraction$1.prototype.toJSON=function(){return{mathjs:"Fraction",n:this.s*this.n,d:this.d}},Fraction$1.fromJSON=function(e){return new Fraction$1(e)},Fraction$1),{isClass:!0}),name$4p="Range",dependencies$4p=[],createRangeClass=factory(name$4p,dependencies$4p,()=>{function o(e,t,r){if(!(this instanceof o))throw new SyntaxError("Constructor must be called with the new operator");var n=null!=e,i=null!=t,a=null!=r;if(n)if(isBigNumber(e))e=e.toNumber();else if("number"!=typeof e)throw new TypeError("Parameter start must be a number");if(i)if(isBigNumber(t))t=t.toNumber();else if("number"!=typeof t)throw new TypeError("Parameter end must be a number");if(a)if(isBigNumber(r))r=r.toNumber();else if("number"!=typeof r)throw new TypeError("Parameter step must be a number");this.start=n?parseFloat(e):0,this.end=i?parseFloat(t):0,this.step=a?parseFloat(r):1}return o.prototype.type="Range",o.prototype.isRange=!0,o.parse=function(e){if("string"!=typeof e)return null;var t=e.split(":").map(function(e){return parseFloat(e)});if(t.some(function(e){return isNaN(e)}))return null;switch(t.length){case 2:return new o(t[0],t[1]);case 3:return new o(t[0],t[2],t[1]);default:return null}},o.prototype.clone=function(){return new o(this.start,this.end,this.step)},o.prototype.size=function(){var e=0,t=this.start,r=this.step,t=this.end-t;return sign$1(r)===sign$1(t)?e=Math.ceil(t/r):0==t&&(e=0),[e=isNaN(e)?0:e]},o.prototype.min=function(){var e=this.size()[0];if(0<e)return 0<this.step?this.start:this.start+(e-1)*this.step},o.prototype.max=function(){var e=this.size()[0];if(0<e)return 0<this.step?this.start+(e-1)*this.step:this.start},o.prototype.forEach=function(e){var t=this.start,r=this.step,n=this.end,i=0;if(0<r)for(;t<n;)e(t,[i],this),t+=r,i++;else if(r<0)for(;n<t;)e(t,[i],this),t+=r,i++},o.prototype.map=function(n){var i=[];return this.forEach(function(e,t,r){i[t[0]]=n(e,t,r)}),i},o.prototype.toArray=function(){var r=[];return this.forEach(function(e,t){r[t[0]]=e}),r},o.prototype.valueOf=function(){return this.toArray()},o.prototype.format=function(e){var t=format$3(this.start,e);return 1!==this.step&&(t+=":"+format$3(this.step,e)),t+=":"+format$3(this.end,e)},o.prototype.toString=function(){return this.format()},o.prototype.toJSON=function(){return{mathjs:"Range",start:this.start,end:this.end,step:this.step}},o.fromJSON=function(e){return new o(e.start,e.end,e.step)},o},{isClass:!0}),name$4o="Matrix",dependencies$4o=[],createMatrixClass=factory(name$4o,dependencies$4o,()=>{function e(){if(!(this instanceof e))throw new SyntaxError("Constructor must be called with the new operator")}return e.prototype.type="Matrix",e.prototype.isMatrix=!0,e.prototype.storage=function(){throw new Error("Cannot invoke storage on a Matrix interface")},e.prototype.datatype=function(){throw new Error("Cannot invoke datatype on a Matrix interface")},e.prototype.create=function(e,t){throw new Error("Cannot invoke create on a Matrix interface")},e.prototype.subset=function(e,t,r){throw new Error("Cannot invoke subset on a Matrix interface")},e.prototype.get=function(e){throw new Error("Cannot invoke get on a Matrix interface")},e.prototype.set=function(e,t,r){throw new Error("Cannot invoke set on a Matrix interface")},e.prototype.resize=function(e,t){throw new Error("Cannot invoke resize on a Matrix interface")},e.prototype.reshape=function(e,t){throw new Error("Cannot invoke reshape on a Matrix interface")},e.prototype.clone=function(){throw new Error("Cannot invoke clone on a Matrix interface")},e.prototype.size=function(){throw new Error("Cannot invoke size on a Matrix interface")},e.prototype.map=function(e,t){throw new Error("Cannot invoke map on a Matrix interface")},e.prototype.forEach=function(e){throw new Error("Cannot invoke forEach on a Matrix interface")},e.prototype[Symbol.iterator]=function(){throw new Error("Cannot iterate a Matrix interface")},e.prototype.toArray=function(){throw new Error("Cannot invoke toArray on a Matrix interface")},e.prototype.valueOf=function(){throw new Error("Cannot invoke valueOf on a Matrix interface")},e.prototype.format=function(e){throw new Error("Cannot invoke format on a Matrix interface")},e.prototype.toString=function(){throw new Error("Cannot invoke toString on a Matrix interface")},e},{isClass:!0}),name$4n="DenseMatrix",dependencies$4n=["Matrix"],createDenseMatrixClass=factory(name$4n,dependencies$4n,e=>{var e=e["Matrix"];function m(e,t){if(!(this instanceof m))throw new SyntaxError("Constructor must be called with the new operator");if(t&&!isString(t))throw new Error("Invalid datatype: "+t);if(isMatrix(e))"DenseMatrix"===e.type?(this._data=clone$1(e._data),this._size=clone$1(e._size)):(this._data=e.toArray(),this._size=e.size()),this._datatype=t||e._datatype;else if(e&&isArray(e.data)&&isArray(e.size))this._data=e.data,this._size=e.size,validate(this._data,this._size),this._datatype=t||e.datatype;else if(isArray(e))this._data=function e(t){for(var r=0,n=t.length;r<n;r++){var i=t[r];isArray(i)?t[r]=e(i):i&&!0===i.isMatrix&&(t[r]=e(i.valueOf()))}return t}(e),this._size=arraySize(this._data),validate(this._data,this._size),this._datatype=t;else{if(e)throw new TypeError("Unsupported type of data ("+typeOf$1(e)+")");this._data=[],this._size=[0],this._datatype=t}}function s(e,t,r){if(0!==t.length)return e._size=t.slice(0),e._data=resize$1(e._data,e._size,r),e;for(var n=e._data;isArray(n);)n=n[0];return n}function c(e,t,r){for(var n=e._size.slice(0),i=!1;n.length<t.length;)n.push(0),i=!0;for(var a=0,o=t.length;a<o;a++)t[a]>n[a]&&(n[a]=t[a],i=!0);i&&s(e,n,r)}return(m.prototype=new e).createDenseMatrix=function(e,t){return new m(e,t)},m.prototype.type="DenseMatrix",m.prototype.isDenseMatrix=!0,m.prototype.getDataType=function(){return getArrayDataType(this._data,typeOf$1)},m.prototype.storage=function(){return"dense"},m.prototype.datatype=function(){return this._datatype},m.prototype.create=function(e,t){return new m(e,t)},m.prototype.subset=function(e,t,r){switch(arguments.length){case 1:return function(e,t){if(!isIndex(t))throw new TypeError("Invalid index");{if(t.isScalar())return e.get(t.min());var r=t.size();if(r.length!==e._size.length)throw new DimensionError(r.length,e._size.length);for(var n=t.min(),i=t.max(),a=0,o=e._size.length;a<o;a++)validateIndex(n[a],e._size[a]),validateIndex(i[a],e._size[a]);return new m(function t(r,n,i,a){var e=a===i-1;var o=n.dimension(a);return(e?o.map(function(e){return validateIndex(e,r.length),r[e]}):o.map(function(e){validateIndex(e,r.length);e=r[e];return t(e,n,i,a+1)})).valueOf()}(e._data,t,r.length,0),e._datatype)}}(this,e);case 2:case 3:return function(e,t,r,n){if(!t||!0!==t.isIndex)throw new TypeError("Invalid index");var i,a=t.size(),o=t.isScalar();isMatrix(r)?(i=r.size(),r=r.valueOf()):i=arraySize(r);if(o){if(0!==i.length)throw new TypeError("Scalar expected");e.set(t.min(),r,n)}else{if(a.length<e._size.length)throw new DimensionError(a.length,e._size.length,"<");if(i.length<a.length){for(var s=0,u=0;1===a[s]&&1===i[s];)s++;for(;1===a[s];)u++,s++;r=unsqueeze(r,a.length,u,i)}if(!deepStrictEqual(a,i))throw new DimensionError(a,i,">");o=t.max().map(function(e){return e+1});c(e,o,n);n=a.length;!function r(n,i,a,o,s){var e=s===o-1;var t=i.dimension(s);e?t.forEach(function(e,t){validateIndex(e),n[e]=a[t[0]]}):t.forEach(function(e,t){validateIndex(e),r(n[e],i,a[t[0]],o,s+1)})}(e._data,t,r,n,0)}return e}(this,e,t,r);default:throw new SyntaxError("Wrong number of arguments")}},m.prototype.get=function(e){if(!isArray(e))throw new TypeError("Array expected");if(e.length!==this._size.length)throw new DimensionError(e.length,this._size.length);for(var t=0;t<e.length;t++)validateIndex(e[t],this._size[t]);for(var r=this._data,n=0,i=e.length;n<i;n++){var a=e[n];validateIndex(a,r.length),r=r[a]}return r},m.prototype.set=function(e,t,r){if(!isArray(e))throw new TypeError("Array expected");if(e.length<this._size.length)throw new DimensionError(e.length,this._size.length,"<");var n;c(this,e.map(function(e){return e+1}),r);for(var i=this._data,a=0,o=e.length-1;a<o;a++)validateIndex(n=e[a],i.length),i=i[n];return validateIndex(n=e[e.length-1],i.length),i[n]=t,this},m.prototype.resize=function(e,t,r){if(!isCollection(e))throw new TypeError("Array or Matrix expected");e=e.valueOf().map(e=>Array.isArray(e)&&1===e.length?e[0]:e);return s(r?this.clone():this,e,t)},m.prototype.reshape=function(e,t){var r=t?this.clone():this;r._data=reshape$1(r._data,e);t=r._size.reduce((e,t)=>e*t);return r._size=processSizesWildcard(e,t),r},m.prototype.clone=function(){return new m({data:clone$1(this._data),size:clone$1(this._size),datatype:this._datatype})},m.prototype.size=function(){return this._size.slice(0)},m.prototype.map=function(t){var i=this,e=function r(e,n){return isArray(e)?e.map(function(e,t){return r(e,n.concat(t))}):t(e,n,i)}(this._data,[]);return new m(e,void 0!==this._datatype?getArrayDataType(e,typeOf$1):void 0)},m.prototype.forEach=function(t){var i=this;(function r(e,n){isArray(e)?e.forEach(function(e,t){r(e,n.concat(t))}):t(e,n,i)})(this._data,[])},m.prototype[Symbol.iterator]=function*(){yield*function*e(t,r){if(isArray(t))for(var n=0;n<t.length;n++)yield*e(t[n],r.concat(n));else yield{value:t,index:r}}(this._data,[])},m.prototype.rows=function(){var e,t=[];if(2!==this.size().length)throw new TypeError("Rows can only be returned for a 2D matrix.");for(e of this._data)t.push(new m([e],this._datatype));return t},m.prototype.columns=function(){var r=this,n=[],e=this.size();if(2!==e.length)throw new TypeError("Rows can only be returned for a 2D matrix.");for(var i=this._data,t=0;t<e[1];t++)!function(t){var e=i.map(e=>[e[t]]);n.push(new m(e,r._datatype))}(t);return n},m.prototype.toArray=function(){return clone$1(this._data)},m.prototype.valueOf=function(){return this._data},m.prototype.format=function(e){return format$1(this._data,e)},m.prototype.toString=function(){return format$1(this._data)},m.prototype.toJSON=function(){return{mathjs:"DenseMatrix",data:this._data,size:this._size,datatype:this._datatype}},m.prototype.diagonal=function(e){if(e){if(!isNumber(e=isBigNumber(e)?e.toNumber():e)||!isInteger$1(e))throw new TypeError("The parameter k must be an integer number")}else e=0;for(var t=0<e?e:0,r=e<0?-e:0,n=this._size[0],e=this._size[1],i=Math.min(n-r,e-t),a=[],o=0;o<i;o++)a[o]=this._data[o+r][o+t];return new m({data:a,size:[i],datatype:this._datatype})},m.diagonal=function(e,t,r,n){if(!isArray(e))throw new TypeError("Array expected, size parameter");if(2!==e.length)throw new Error("Only two dimensions matrix are supported");if(e=e.map(function(e){if(!isNumber(e=isBigNumber(e)?e.toNumber():e)||!isInteger$1(e)||e<1)throw new Error("Size values must be positive integers");return e}),r){if(!isNumber(r=isBigNumber(r)?r.toNumber():r)||!isInteger$1(r))throw new TypeError("The parameter k must be an integer number")}else r=0;var i,a=0<r?r:0,o=r<0?-r:0,s=e[0],u=e[1],c=Math.min(s-o,u-a);if(isArray(t)){if(t.length!==c)throw new Error("Invalid value array length");i=function(e){return t[e]}}else if(isMatrix(t)){r=t.size();if(1!==r.length||r[0]!==c)throw new Error("Invalid matrix length");i=function(e){return t.get([e])}}else i=function(){return t};n=n||(isBigNumber(i(0))?i(0).mul(0):0);var l=[];if(0<e.length)for(var l=resize$1(l,e,n),p=0;p<c;p++)l[p+o][p+a]=i(p);return new m({data:l,size:[s,u]})},m.fromJSON=function(e){return new m(e)},m.prototype.swapRows=function(e,t){if(!(isNumber(e)&&isInteger$1(e)&&isNumber(t)&&isInteger$1(t)))throw new Error("Row index must be positive integers");if(2!==this._size.length)throw new Error("Only two dimensional matrix is supported");return validateIndex(e,this._size[0]),validateIndex(t,this._size[0]),m._swapRows(e,t,this._data),this},m._swapRows=function(e,t,r){var n=r[e];r[e]=r[t],r[t]=n},m},{isClass:!0}),name$4m="clone",dependencies$4m=["typed"],createClone=factory(name$4m,dependencies$4m,e=>{var e=e["typed"];return e(name$4m,{any:clone$1})});function containsCollections(e){for(var t=0;t<e.length;t++)if(isCollection(e[t]))return!0;return!1}function deepForEach(e,t){for(var r=0,n=(e=isMatrix(e)?e.valueOf():e).length;r<n;r++){var i=e[r];Array.isArray(i)?deepForEach(i,t):t(i)}}function deepMap(e,t,r){return e&&"function"==typeof e.map?e.map(function(e){return deepMap(e,t)}):t(e)}function reduce(e,t,r){var n=Array.isArray(e)?arraySize(e):e.size();if(t<0||t>=n.length)throw new IndexError(t,n.length);return isMatrix(e)?e.create(_reduce(e.valueOf(),t,r)):_reduce(e,t,r)}function _reduce(e,t,r){var n,i,a,o;if(t<=0){if(Array.isArray(e[0])){for(o=_switch$1(e),i=[],n=0;n<o.length;n++)i[n]=_reduce(o[n],t-1,r);return i}for(a=e[0],n=1;n<e.length;n++)a=r(a,e[n]);return a}for(i=[],n=0;n<e.length;n++)i[n]=_reduce(e[n],t-1,r);return i}function _switch$1(e){for(var t=e.length,r=e[0].length,n=[],i=0;i<r;i++){for(var a=[],o=0;o<t;o++)a.push(e[o][i]);n.push(a)}return n}function scatter(e,t,r,n,i,a,o,s,u,c,l){var p,m,f,d,h=e._values,y=e._index,e=e._ptr;if(n)for(m=e[t],f=e[t+1],p=m;p<f;p++)r[d=y[p]]!==a?(r[d]=a,o.push(d),c?(n[d]=u?s(h[p],l):s(l,h[p]),i[d]=a):n[d]=h[p]):(n[d]=u?s(h[p],n[d]):s(n[d],h[p]),i[d]=a);else for(m=e[t],f=e[t+1],p=m;p<f;p++)r[d=y[p]]!==a?(r[d]=a,o.push(d)):i[d]=a}var name$4l="isInteger",dependencies$4l=["typed"],createIsInteger=factory(name$4l,dependencies$4l,e=>{var e=e["typed"];return e(name$4l,{number:isInteger$1,BigNumber:function(e){return e.isInt()},Fraction:function(e){return 1===e.d&&isFinite(e.n)},"Array | Matrix":function(e){return deepMap(e,this)}})}),n1$4="number",n2$2="number, number";function absNumber(e){return Math.abs(e)}function addNumber(e,t){return e+t}function multiplyNumber(e,t){return e*t}function unaryMinusNumber(e){return-e}function unaryPlusNumber(e){return e}function cbrtNumber(e){return cbrt$1(e)}function ceilNumber(e){return Math.ceil(e)}function cubeNumber(e){return e*e*e}function expNumber(e){return Math.exp(e)}function expm1Number(e){return expm1$1(e)}function gcdNumber(e,t){if(!isInteger$1(e)||!isInteger$1(t))throw new Error("Parameters in function gcd must be integer numbers");for(var r;0!==t;)r=e%t,e=t,t=r;return e<0?-e:e}function lcmNumber(e,t){if(!isInteger$1(e)||!isInteger$1(t))throw new Error("Parameters in function lcm must be integer numbers");if(0===e||0===t)return 0;for(var r,n=e*t;0!==t;)t=e%(r=t),e=r;return Math.abs(n/e)}function logNumber(e){return Math.log(e)}function log10Number(e){return log10$1(e)}function log2Number(e){return log2$1(e)}function modNumber(e,t){if(0<t)return e-t*Math.floor(e/t);if(0===t)return e;throw new Error("Cannot calculate mod for a negative divisor")}function nthRootNumber(e,t){var r=t<0;if(0===(t=r?-t:t))throw new Error("Root must be non-zero");if(e<0&&Math.abs(t)%2!=1)throw new Error("Root must be odd when a is negative.");if(0===e)return r?1/0:0;if(!isFinite(e))return r?0:e;t=Math.pow(Math.abs(e),1/t),t=e<0?-t:t;return r?1/t:t}function signNumber(e){return sign$1(e)}function squareNumber(e){return e*e}function xgcdNumber(e,t){var r,n,i,a=0,o=1,s=1,u=0;if(!isInteger$1(e)||!isInteger$1(t))throw new Error("Parameters in function xgcd must be integer numbers");for(;t;)i=e-(n=Math.floor(e/t))*t,a=o-n*(r=a),o=r,s=u-n*(r=s),u=r,e=t,t=i;return e<0?[-e,-o,-u]:[e,e?o:0,u]}function powNumber(e,t){return e*e<1&&t===1/0||1<e*e&&t===-1/0?0:Math.pow(e,t)}function roundNumber(e){return parseFloat(toFixed$2(e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:0))}absNumber.signature=n1$4,addNumber.signature=n2$2,multiplyNumber.signature=n2$2,unaryMinusNumber.signature=n1$4,unaryPlusNumber.signature=n1$4,cbrtNumber.signature=n1$4,ceilNumber.signature=n1$4,cubeNumber.signature=n1$4,expNumber.signature=n1$4,expm1Number.signature=n1$4,gcdNumber.signature=n2$2,lcmNumber.signature=n2$2,logNumber.signature=n1$4,log10Number.signature=n1$4,log2Number.signature=n1$4,modNumber.signature=n2$2,nthRootNumber.signature=n2$2,signNumber.signature=n1$4,squareNumber.signature=n1$4,xgcdNumber.signature=n2$2,powNumber.signature=n2$2,roundNumber.signature=n2$2;var n1$3="number",n2$1="number, number";function bitAndNumber(e,t){if(!isInteger$1(e)||!isInteger$1(t))throw new Error("Integers expected in function bitAnd");return e&t}function bitNotNumber(e){if(!isInteger$1(e))throw new Error("Integer expected in function bitNot");return~e}function bitOrNumber(e,t){if(!isInteger$1(e)||!isInteger$1(t))throw new Error("Integers expected in function bitOr");return e|t}function bitXorNumber(e,t){if(!isInteger$1(e)||!isInteger$1(t))throw new Error("Integers expected in function bitXor");return e^t}function leftShiftNumber(e,t){if(!isInteger$1(e)||!isInteger$1(t))throw new Error("Integers expected in function leftShift");return e<<t}function rightArithShiftNumber(e,t){if(!isInteger$1(e)||!isInteger$1(t))throw new Error("Integers expected in function rightArithShift");return e>>t}function rightLogShiftNumber(e,t){if(!isInteger$1(e)||!isInteger$1(t))throw new Error("Integers expected in function rightLogShift");return e>>>t}function product(e,t){if(t<e)return 1;if(t===e)return t;var r=t+e>>1;return product(e,r)*product(1+r,t)}function combinationsNumber(e,t){if(!isInteger$1(e)||e<0)throw new TypeError("Positive integer value expected in function combinations");if(!isInteger$1(t)||t<0)throw new TypeError("Positive integer value expected in function combinations");if(e<t)throw new TypeError("k must be less than or equal to n");var r=e-t;return t<r?product(1+r,e)/product(1,t):product(t+1,e)/product(1,r)}bitAndNumber.signature=n2$1,bitNotNumber.signature=n1$3,bitOrNumber.signature=n2$1,bitXorNumber.signature=n2$1,leftShiftNumber.signature=n2$1,rightArithShiftNumber.signature=n2$1,rightLogShiftNumber.signature=n2$1,combinationsNumber.signature="number, number";var pi$1=Math.PI,tau$1=2*Math.PI,e$1=Math.E,phi$1=1.618033988749895,n1$2="number",n2="number, number";function notNumber(e){return!e}function orNumber(e,t){return!(!e&&!t)}function xorNumber(e,t){return!!e!=!!t}function andNumber(e,t){return!(!e||!t)}function gammaNumber(e){if(isInteger$1(e))return e<=0?isFinite(e)?1/0:NaN:171<e?1/0:product(1,e-1);if(e<.5)return Math.PI/(Math.sin(Math.PI*e)*gammaNumber(1-e));if(171.35<=e)return 1/0;if(85<e){var t=e*e,r=t*e,n=r*e,i=n*e;return Math.sqrt(2*Math.PI/e)*Math.pow(e/Math.E,e)*(1+1/(12*e)+1/(288*t)-139/(51840*r)-571/(2488320*n)+163879/(209018880*i)+5246819/(75246796800*i*e))}--e;for(var a=gammaP[0],o=1;o<gammaP.length;++o)a+=gammaP[o]/(e+o);i=e+gammaG+.5;return Math.sqrt(2*Math.PI)*Math.pow(i,e+.5)*Math.exp(-i)*a}notNumber.signature=n1$2,orNumber.signature=n2,xorNumber.signature=n2,andNumber.signature=n2,gammaNumber.signature="number";var gammaG=4.7421875,gammaP=[.9999999999999971,57.15623566586292,-59.59796035547549,14.136097974741746,-.4919138160976202,3399464998481189e-20,4652362892704858e-20,-9837447530487956e-20,.0001580887032249125,-.00021026444172410488,.00021743961811521265,-.0001643181065367639,8441822398385275e-20,-26190838401581408e-21,36899182659531625e-22],n1$1="number";function acoshNumber(e){return acosh$1(e)}function acotNumber(e){return Math.atan(1/e)}function acothNumber(e){return isFinite(e)?(Math.log((e+1)/e)+Math.log(e/(e-1)))/2:0}function acscNumber(e){return Math.asin(1/e)}function acschNumber(e){e=1/e;return Math.log(e+Math.sqrt(e*e+1))}function asecNumber(e){return Math.acos(1/e)}function asechNumber(e){var t=1/e,e=Math.sqrt(t*t-1);return Math.log(e+t)}function asinhNumber(e){return asinh$1(e)}function atanhNumber(e){return atanh$1(e)}function cotNumber(e){return 1/Math.tan(e)}function cothNumber(e){e=Math.exp(2*e);return(e+1)/(e-1)}function cscNumber(e){return 1/Math.sin(e)}function cschNumber(e){return 0===e?Number.POSITIVE_INFINITY:Math.abs(2/(Math.exp(e)-Math.exp(-e)))*sign$1(e)}function secNumber(e){return 1/Math.cos(e)}function sechNumber(e){return 2/(Math.exp(e)+Math.exp(-e))}function sinhNumber(e){return sinh$1(e)}acoshNumber.signature=n1$1,acotNumber.signature=n1$1,acothNumber.signature=n1$1,acscNumber.signature=n1$1,acschNumber.signature=n1$1,asecNumber.signature=n1$1,asechNumber.signature=n1$1,asinhNumber.signature=n1$1,atanhNumber.signature=n1$1,cotNumber.signature=n1$1,cothNumber.signature=n1$1,cscNumber.signature=n1$1,cschNumber.signature=n1$1,secNumber.signature=n1$1,sechNumber.signature=n1$1,sinhNumber.signature=n1$1;var n1="number";function isNegativeNumber(e){return e<0}function isPositiveNumber(e){return 0<e}function isZeroNumber(e){return 0===e}function isNaNNumber(e){return Number.isNaN(e)}isNegativeNumber.signature=n1,isPositiveNumber.signature=n1,isZeroNumber.signature=n1,isNaNNumber.signature=n1;var name$4k="isNegative",dependencies$4k=["typed"],createIsNegative=factory(name$4k,dependencies$4k,e=>{var e=e["typed"];return e(name$4k,{number:isNegativeNumber,BigNumber:function(e){return e.isNeg()&&!e.isZero()&&!e.isNaN()},Fraction:function(e){return e.s<0},Unit:function(e){return this(e.value)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$4j="isNumeric",dependencies$4j=["typed"],createIsNumeric=factory(name$4j,dependencies$4j,e=>{var e=e["typed"];return e(name$4j,{"number | BigNumber | Fraction | boolean":function(){return!0},"Complex | Unit | string | null | undefined | Node":function(){return!1},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$4i="hasNumericValue",dependencies$4i=["typed","isNumeric"],createHasNumericValue=factory(name$4i,dependencies$4i,e=>{var{typed:e,isNumeric:t}=e;return e(name$4i,{string:function(e){return 0<e.trim().length&&!isNaN(Number(e))},any:function(e){return t(e)}})}),name$4h="isPositive",dependencies$4h=["typed"],createIsPositive=factory(name$4h,dependencies$4h,e=>{var e=e["typed"];return e(name$4h,{number:isPositiveNumber,BigNumber:function(e){return!e.isNeg()&&!e.isZero()&&!e.isNaN()},Fraction:function(e){return 0<e.s&&0<e.n},Unit:function(e){return this(e.value)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$4g="isZero",dependencies$4g=["typed"],createIsZero=factory(name$4g,dependencies$4g,e=>{var e=e["typed"];return e(name$4g,{number:isZeroNumber,BigNumber:function(e){return e.isZero()},Complex:function(e){return 0===e.re&&0===e.im},Fraction:function(e){return 1===e.d&&0===e.n},Unit:function(e){return this(e.value)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$4f="isNaN",dependencies$4f=["typed"],createIsNaN=factory(name$4f,dependencies$4f,e=>{var e=e["typed"];return e(name$4f,{number:isNaNNumber,BigNumber:function(e){return e.isNaN()},Fraction:function(e){return!1},Complex:function(e){return e.isNaN()},Unit:function(e){return Number.isNaN(e.value)},"Array | Matrix":function(e){return deepMap(e,Number.isNaN)}})}),name$4e="typeOf",dependencies$4e=["typed"],createTypeOf=factory(name$4e,dependencies$4e,e=>{var e=e["typed"];return e(name$4e,{any:typeOf$1})});function nearlyEqual(e,t,r){if(null==r)return e.eq(t);if(e.eq(t))return!0;if(e.isNaN()||t.isNaN())return!1;if(e.isFinite()&&t.isFinite()){var n=e.minus(t).abs();if(n.isZero())return!0;t=e.constructor.max(e.abs(),t.abs());return n.lte(t.times(r))}return!1}function complexEquals(e,t,r){return nearlyEqual$1(e.re,t.re,r)&&nearlyEqual$1(e.im,t.im,r)}var name$4d="equalScalar",dependencies$4d=["typed","config"],createEqualScalar=factory(name$4d,dependencies$4d,e=>{var{typed:e,config:r}=e;return e(name$4d,{"boolean, boolean":function(e,t){return e===t},"number, number":function(e,t){return nearlyEqual$1(e,t,r.epsilon)},"BigNumber, BigNumber":function(e,t){return e.eq(t)||nearlyEqual(e,t,r.epsilon)},"Fraction, Fraction":function(e,t){return e.equals(t)},"Complex, Complex":function(e,t){return complexEquals(e,t,r.epsilon)},"Unit, Unit":function(e,t){if(!e.equalBase(t))throw new Error("Cannot compare units with different base");return this(e.value,t.value)}})});factory(name$4d,["typed","config"],e=>{var{typed:e,config:r}=e;return e(name$4d,{"number, number":function(e,t){return nearlyEqual$1(e,t,r.epsilon)}})});var name$4c="SparseMatrix",dependencies$4c=["typed","equalScalar","Matrix"],createSparseMatrixClass=factory(name$4c,dependencies$4c,e=>{var{typed:M,equalScalar:S,Matrix:e}=e;function $(e,t){if(!(this instanceof $))throw new SyntaxError("Constructor must be called with the new operator");if(t&&!isString(t))throw new Error("Invalid datatype: "+t);if(isMatrix(e))r=this,i=t,"SparseMatrix"===(n=e).type?(r._values=n._values?clone$1(n._values):void 0,r._index=clone$1(n._index),r._ptr=clone$1(n._ptr),r._size=clone$1(n._size),r._datatype=i||n._datatype):a(r,n.valueOf(),i||n._datatype);else if(e&&isArray(e.index)&&isArray(e.ptr)&&isArray(e.size))this._values=e.values,this._index=e.index,this._ptr=e.ptr,this._size=e.size,this._datatype=t||e.datatype;else if(isArray(e))a(this,e,t);else{if(e)throw new TypeError("Unsupported type of data ("+typeOf$1(e)+")");this._values=[],this._index=[],this._ptr=[0],this._size=[0,0],this._datatype=t}var r,n,i}function a(e,t,r){e._values=[],e._index=[],e._ptr=[],e._datatype=r;var n=t.length,i=0,a=S,o=0;if(isString(r)&&(a=M.find(S,[r,r])||S,o=M.convert(0,r)),0<n){var s=0;do{e._ptr.push(e._index.length);for(var u=0;u<n;u++){var c,l=t[u];isArray(l)?(0===s&&i<l.length&&(i=l.length),s<l.length&&(a(c=l[s],o)||(e._values.push(c),e._index.push(u)))):(0===s&&i<1&&(i=1),a(l,o)||(e._values.push(l),e._index.push(u)))}}while(++s<i)}e._ptr.push(e._index.length),e._size=[n,i]}function g(e,t,r,n){if(r-t==0)return r;for(var i=t;i<r;i++)if(n[i]===e)return i;return t}function x(e,t,r,n,i,a,o){i.splice(e,0,n),a.splice(e,0,t);for(var s=r+1;s<o.length;s++)o[s]++}function u(e,t,r,n){var i=n||0,a=S,n=0;isString(e._datatype)&&(a=M.find(S,[e._datatype,e._datatype])||S,n=M.convert(0,e._datatype),i=M.convert(i,e._datatype));var o=!a(i,n),s=e._size[0],u=e._size[1];if(u<r){for(l=u;l<r;l++)if(e._ptr[l]=e._values.length,o)for(f=0;f<s;f++)e._values.push(i),e._index.push(f);e._ptr[r]=e._values.length}else r<u&&(e._ptr.splice(r+1,u-r),e._values.splice(e._ptr[r],e._values.length),e._index.splice(e._ptr[r],e._index.length));if(u=r,s<t){if(o){for(var c=0,l=0;l<u;l++){e._ptr[l]=e._ptr[l]+c;for(var p=e._ptr[l+1]+c,m=0,f=s;f<t;f++,m++)e._values.splice(p+m,0,i),e._index.splice(p+m,0,f),c++}e._ptr[u]=e._values.length}}else if(t<s){var d=0;for(l=0;l<u;l++){e._ptr[l]=e._ptr[l]-d;var h=e._ptr[l],y=e._ptr[l+1]-d;for(p=h;p<y;p++)t-1<(f=e._index[p])&&(e._values.splice(p,1),e._index.splice(p,1),d++)}e._ptr[l]=e._values.length}return e._size[0]=t,e._size[1]=r,e}function t(e,t,r,n,i){for(var a,o=n[0],s=n[1],u=[],c=0;c<o;c++)for(u[c]=[],a=0;a<s;a++)u[c][a]=0;for(a=0;a<s;a++)for(var l=r[a],p=r[a+1],m=l;m<p;m++)u[c=t[m]][a]=e?i?clone$1(e[m]):e[m]:1;return u}return($.prototype=new e).createSparseMatrix=function(e,t){return new $(e,t)},$.prototype.type="SparseMatrix",$.prototype.isSparseMatrix=!0,$.prototype.getDataType=function(){return getArrayDataType(this._values,typeOf$1)},$.prototype.storage=function(){return"sparse"},$.prototype.datatype=function(){return this._datatype},$.prototype.create=function(e,t){return new $(e,t)},$.prototype.density=function(){var e=this._size[0],t=this._size[1];return 0!==e&&0!==t?this._index.length/(e*t):0},$.prototype.subset=function(e,t,r){if(!this._values)throw new Error("Cannot invoke subset on a Pattern only matrix");switch(arguments.length){case 1:return function(e,t){if(!isIndex(t))throw new TypeError("Invalid index");if(t.isScalar())return e.get(t.min());var r,n,i,a,o=t.size();if(o.length!==e._size.length)throw new DimensionError(o.length,e._size.length);var s=t.min(),u=t.max();for(r=0,n=e._size.length;r<n;r++)validateIndex(s[r],e._size[r]),validateIndex(u[r],e._size[r]);var c=e._values,l=e._index,p=e._ptr,m=t.dimension(0),t=t.dimension(1),f=[],d=[];m.forEach(function(e,t){d[e]=t[0],f[e]=!0});var h=c?[]:void 0,y=[],g=[];return t.forEach(function(e){for(g.push(y.length),i=p[e],a=p[e+1];i<a;i++)r=l[i],!0===f[r]&&(y.push(d[r]),h&&h.push(c[i]))}),g.push(y.length),new $({values:h,index:y,ptr:g,size:o,datatype:e._datatype})}(this,e);case 2:case 3:return function(e,t,r,n){if(!t||!0!==t.isIndex)throw new TypeError("Invalid index");var i,a=t.size(),o=t.isScalar();isMatrix(r)?(i=r.size(),r=r.toArray()):i=arraySize(r);if(o){if(0!==i.length)throw new TypeError("Scalar expected");e.set(t.min(),r,n)}else{if(1!==a.length&&2!==a.length)throw new DimensionError(a.length,e._size.length,"<");if(i.length<a.length){for(var s=0,u=0;1===a[s]&&1===i[s];)s++;for(;1===a[s];)u++,s++;r=unsqueeze(r,a.length,u,i)}if(!deepStrictEqual(a,i))throw new DimensionError(a,i,">");for(var c=t.min()[0],l=t.min()[1],p=i[0],m=i[1],f=0;f<p;f++)for(var d=0;d<m;d++){var h=r[f][d];e.set([f+c,d+l],h,n)}}return e}(this,e,t,r);default:throw new SyntaxError("Wrong number of arguments")}},$.prototype.get=function(e){if(!isArray(e))throw new TypeError("Array expected");if(e.length!==this._size.length)throw new DimensionError(e.length,this._size.length);if(!this._values)throw new Error("Cannot invoke get on a Pattern only matrix");var t=e[0],r=e[1];validateIndex(t,this._size[0]),validateIndex(r,this._size[1]);e=g(t,this._ptr[r],this._ptr[r+1],this._index);return e<this._ptr[r+1]&&this._index[e]===t?this._values[e]:0},$.prototype.set=function(e,t,r){if(!isArray(e))throw new TypeError("Array expected");if(e.length!==this._size.length)throw new DimensionError(e.length,this._size.length);if(!this._values)throw new Error("Cannot invoke set on a Pattern only matrix");var n=e[0],i=e[1],a=this._size[0],o=this._size[1],s=S,e=0;isString(this._datatype)&&(s=M.find(S,[this._datatype,this._datatype])||S,e=M.convert(0,this._datatype)),(a-1<n||o-1<i)&&(u(this,Math.max(n+1,a),Math.max(i+1,o),r),a=this._size[0],o=this._size[1]),validateIndex(n,a),validateIndex(i,o);o=g(n,this._ptr[i],this._ptr[i+1],this._index);return o<this._ptr[i+1]&&this._index[o]===n?s(t,e)?function(e,t,r,n,i){r.splice(e,1),n.splice(e,1);for(var a=t+1;a<i.length;a++)i[a]--}(o,i,this._values,this._index,this._ptr):this._values[o]=t:x(o,n,i,t,this._values,this._index,this._ptr),this},$.prototype.resize=function(e,t,r){if(!isCollection(e))throw new TypeError("Array or Matrix expected");var n=e.valueOf().map(e=>Array.isArray(e)&&1===e.length?e[0]:e);if(2!==n.length)throw new Error("Only two dimensions matrix are supported");return n.forEach(function(e){if(!isNumber(e)||!isInteger$1(e)||e<0)throw new TypeError("Invalid size, must contain positive integers (size: "+format$1(n)+")")}),u(r?this.clone():this,n[0],n[1],t)},$.prototype.reshape=function(t,e){if(!isArray(t))throw new TypeError("Array expected");if(2!==t.length)throw new Error("Sparse matrices can only be reshaped in two dimensions");t.forEach(function(e){if(!isNumber(e)||!isInteger$1(e)||e<=-2||0===e)throw new TypeError("Invalid size, must contain positive integers or -1 (size: "+format$1(t)+")")});var r=this._size[0]*this._size[1];if(r!=(t=processSizesWildcard(t,r))[0]*t[1])throw new Error("Reshaping sparse matrix will result in the wrong number of elements");var n=e?this.clone():this;if(this._size[0]===t[0]&&this._size[1]===t[1])return n;for(var i=[],a=0;a<n._ptr.length;a++)for(var o=0;o<n._ptr[a+1]-n._ptr[a];o++)i.push(a);for(var s=n._values.slice(),u=n._index.slice(),c=0;c<n._index.length;c++){var l=u[c],p=i[c],p=l*n._size[1]+p;i[c]=p%t[1],u[c]=Math.floor(p/t[1])}n._values.length=0,n._index.length=0,n._ptr.length=t[1]+1,n._size=t.slice();for(var m=0;m<n._ptr.length;m++)n._ptr[m]=0;for(var f=0;f<s.length;f++){var d=u[f],h=i[f],y=s[f];x(g(d,n._ptr[h],n._ptr[h+1],n._index),d,h,y,n._values,n._index,n._ptr)}return n},$.prototype.clone=function(){return new $({values:this._values?clone$1(this._values):void 0,index:clone$1(this._index),ptr:clone$1(this._ptr),size:clone$1(this._size),datatype:this._datatype})},$.prototype.size=function(){return this._size.slice(0)},$.prototype.map=function(n,e){if(!this._values)throw new Error("Cannot invoke map on a Pattern only matrix");var i=this;return function(e,t,r,n,i,a,o){var s=[],u=[],c=[],l=S,p=0;isString(e._datatype)&&(l=M.find(S,[e._datatype,e._datatype])||S,p=M.convert(0,e._datatype));for(var m=function(e,t,r){e=a(e,t,r),l(e,p)||(s.push(e),u.push(t))},f=n;f<=i;f++){c.push(s.length);var d=e._ptr[f],h=e._ptr[f+1];if(o)for(var y=d;y<h;y++){var g=e._index[y];t<=g&&g<=r&&m(e._values[y],g-t,f-n)}else{for(var x={},v=d;v<h;v++){var b=e._index[v];x[b]=e._values[v]}for(var w=t;w<=r;w++){var N=w in x?x[w]:0;m(N,w-t,f-n)}}}return c.push(s.length),new $({values:s,index:u,ptr:c,size:[r-t+1,i-n+1]})}(this,0,this._size[0]-1,0,this._size[1]-1,function(e,t,r){return n(e,[t,r],i)},e)},$.prototype.forEach=function(e,t){if(!this._values)throw new Error("Cannot invoke forEach on a Pattern only matrix");for(var r=this._size[0],n=this._size[1],i=0;i<n;i++){var a=this._ptr[i],o=this._ptr[i+1];if(t)for(var s=a;s<o;s++){var u=this._index[s];e(this._values[s],[u,i],this)}else{for(var c={},l=a;l<o;l++)c[this._index[l]]=this._values[l];for(var p=0;p<r;p++)e(p in c?c[p]:0,[p,i],this)}}},$.prototype[Symbol.iterator]=function*(){if(!this._values)throw new Error("Cannot iterate a Pattern only matrix");for(var e=this._size[1],t=0;t<e;t++)for(var r=this._ptr[t],n=this._ptr[t+1],i=r;i<n;i++){var a=this._index[i];yield{value:this._values[i],index:[a,t]}}},$.prototype.toArray=function(){return t(this._values,this._index,this._ptr,this._size,!0)},$.prototype.valueOf=function(){return t(this._values,this._index,this._ptr,this._size,!1)},$.prototype.format=function(e){for(var t=this._size[0],r=this._size[1],n=this.density(),i="Sparse Matrix ["+format$1(t,e)+" x "+format$1(r,e)+"] density: "+format$1(n,e)+"\n",a=0;a<r;a++)for(var o=this._ptr[a],s=this._ptr[a+1],u=o;u<s;u++)i+="\n    ("+format$1(this._index[u],e)+", "+format$1(a,e)+") ==> "+(this._values?format$1(this._values[u],e):"X");return i},$.prototype.toString=function(){return format$1(this.toArray())},$.prototype.toJSON=function(){return{mathjs:"SparseMatrix",values:this._values,index:this._index,ptr:this._ptr,size:this._size,datatype:this._datatype}},$.prototype.diagonal=function(e){if(e){if(!isNumber(e=isBigNumber(e)?e.toNumber():e)||!isInteger$1(e))throw new TypeError("The parameter k must be an integer number")}else e=0;var t=0<e?e:0,r=e<0?-e:0,e=this._size[0],n=this._size[1],i=Math.min(e-r,n-t),a=[],o=[],e=[];e[0]=0;for(var s=t;s<n&&a.length<i;s++)for(var u=this._ptr[s],c=this._ptr[s+1],l=u;l<c;l++){var p=this._index[l];if(p===s-t+r){a.push(this._values[l]),o[a.length-1]=p-r;break}}return e.push(a.length),new $({values:a,index:o,ptr:e,size:[i,1]})},$.fromJSON=function(e){return new $(e)},$.diagonal=function(e,t,r,n,i){if(!isArray(e))throw new TypeError("Array expected, size parameter");if(2!==e.length)throw new Error("Only two dimensions matrix are supported");if(e=e.map(function(e){if(!isNumber(e=isBigNumber(e)?e.toNumber():e)||!isInteger$1(e)||e<1)throw new Error("Size values must be positive integers");return e}),r){if(!isNumber(r=isBigNumber(r)?r.toNumber():r)||!isInteger$1(r))throw new TypeError("The parameter k must be an integer number")}else r=0;var a=S,o=0;isString(i)&&(a=M.find(S,[i,i])||S,o=M.convert(0,i));var s,u=0<r?r:0,c=r<0?-r:0,r=e[0],l=e[1],p=Math.min(r-c,l-u);if(isArray(t)){if(t.length!==p)throw new Error("Invalid value array length");s=function(e){return t[e]}}else if(isMatrix(t)){e=t.size();if(1!==e.length||e[0]!==p)throw new Error("Invalid matrix length");s=function(e){return t.get([e])}}else s=function(){return t};for(var m=[],f=[],d=[],h=0;h<l;h++){d.push(m.length);var y,g=h-u;0<=g&&g<p&&(a(y=s(g),o)||(f.push(g+c),m.push(y)))}return d.push(m.length),new $({values:m,index:f,ptr:d,size:[r,l]})},$.prototype.swapRows=function(e,t){if(!(isNumber(e)&&isInteger$1(e)&&isNumber(t)&&isInteger$1(t)))throw new Error("Row index must be positive integers");if(2!==this._size.length)throw new Error("Only two dimensional matrix is supported");return validateIndex(e,this._size[0]),validateIndex(t,this._size[0]),$._swapRows(e,t,this._size[1],this._values,this._index,this._ptr),this},$._forEachRow=function(e,t,r,n,i){for(var a=n[e],o=n[e+1],s=a;s<o;s++)i(r[s],t[s])},$._swapRows=function(e,t,r,n,i,a){for(var o=0;o<r;o++){var s,u=a[o],c=a[o+1],l=g(e,u,c,i),u=g(t,u,c,i);l<c&&u<c&&i[l]===e&&i[u]===t?n&&(s=n[l],n[l]=n[u],n[u]=s):l<c&&i[l]===e&&(c<=u||i[u]!==t)?(s=n?n[l]:void 0,i.splice(u,0,t),n&&n.splice(u,0,s),i.splice(u<=l?l+1:l,1),n&&n.splice(u<=l?l+1:l,1)):u<c&&i[u]===t&&(c<=l||i[l]!==e)&&(c=n?n[u]:void 0,i.splice(l,0,e),n&&n.splice(l,0,c),i.splice(l<=u?u+1:u,1),n&&n.splice(l<=u?u+1:u,1))}},$},{isClass:!0}),name$4b="number",dependencies$4b=["typed"];function getNonDecimalNumberParts(e){var t=e.match(/(0[box])([0-9a-fA-F]*)\.([0-9a-fA-F]*)/);return t?{input:e,radix:{"0b":2,"0o":8,"0x":16}[t[1]],integerPart:t[2],fractionalPart:t[3]}:null}function makeNumberFromNonDecimalParts(e){for(var t=parseInt(e.integerPart,e.radix),r=0,n=0;n<e.fractionalPart.length;n++)r+=parseInt(e.fractionalPart[n],e.radix)/Math.pow(e.radix,n+1);t+=r;if(isNaN(t))throw new SyntaxError('String "'+e.input+'" is no valid number');return t}var createNumber=factory(name$4b,dependencies$4b,e=>{var e=e["typed"],e=e("number",{"":function(){return 0},number:function(e){return e},string:function(e){if("NaN"===e)return NaN;var t=getNonDecimalNumberParts(e);if(t)return makeNumberFromNonDecimalParts(t);var r=0,n=e.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);n&&(r=Number(n[2]),e=n[1]);t=Number(e);if(isNaN(t))throw new SyntaxError('String "'+e+'" is no valid number');if(n){if(2**r-1<t)throw new SyntaxError('String "'.concat(e,'" is out of range'));2**(r-1)<=t&&(t-=2**r)}return t},BigNumber:function(e){return e.toNumber()},Fraction:function(e){return e.valueOf()},Unit:function(e){throw new Error("Second argument with valueless unit expected")},null:function(e){return 0},"Unit, string | Unit":function(e,t){return e.toNumber(t)},"Array | Matrix":function(e){return deepMap(e,this)}});return e.fromJSON=function(e){return parseFloat(e.value)},e}),name$4a="string",dependencies$4a=["typed"],createString=factory(name$4a,dependencies$4a,e=>{var e=e["typed"];return e(name$4a,{"":function(){return""},number:format$3,null:function(e){return"null"},boolean:function(e){return e+""},string:function(e){return e},"Array | Matrix":function(e){return deepMap(e,this)},any:function(e){return String(e)}})}),name$49="boolean",dependencies$49=["typed"],createBoolean=factory(name$49,dependencies$49,e=>{var e=e["typed"];return e(name$49,{"":function(){return!1},boolean:function(e){return e},number:function(e){return!!e},null:function(e){return!1},BigNumber:function(e){return!e.isZero()},string:function(e){var t=e.toLowerCase();if("true"===t)return!0;if("false"===t)return!1;t=Number(e);if(""!==e&&!isNaN(t))return!!t;throw new Error('Cannot convert "'+e+'" to a boolean')},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$48="bignumber",dependencies$48=["typed","BigNumber"],createBignumber=factory(name$48,dependencies$48,e=>{var{typed:e,BigNumber:i}=e;return e("bignumber",{"":function(){return new i(0)},number:function(e){return new i(e+"")},string:function(e){var t=e.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);if(t){var r=t[2],n=i(t[1]),t=new i(2).pow(Number(r));if(n.gt(t.sub(1)))throw new SyntaxError('String "'.concat(e,'" is out of range'));r=new i(2).pow(Number(r)-1);return n.gte(r)?n.sub(t):n}return new i(e)},BigNumber:function(e){return e},Fraction:function(e){return new i(e.n).div(e.d).times(e.s)},null:function(e){return new i(0)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$47="complex",dependencies$47=["typed","Complex"],createComplex=factory(name$47,dependencies$47,e=>{var{typed:e,Complex:r}=e;return e("complex",{"":function(){return r.ZERO},number:function(e){return new r(e,0)},"number, number":function(e,t){return new r(e,t)},"BigNumber, BigNumber":function(e,t){return new r(e.toNumber(),t.toNumber())},Fraction:function(e){return new r(e.valueOf(),0)},Complex:function(e){return e.clone()},string:function(e){return r(e)},null:function(e){return r(0)},Object:function(e){if("re"in e&&"im"in e)return new r(e.re,e.im);if("r"in e&&"phi"in e||"abs"in e&&"arg"in e)return new r(e);throw new Error("Expected object with properties (re and im) or (r and phi) or (abs and arg)")},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$46="fraction",dependencies$46=["typed","Fraction"],createFraction=factory(name$46,dependencies$46,e=>{var{typed:e,Fraction:r}=e;return e("fraction",{number:function(e){if(!isFinite(e)||isNaN(e))throw new Error(e+" cannot be represented as a fraction");return new r(e)},string:function(e){return new r(e)},"number, number":function(e,t){return new r(e,t)},null:function(e){return new r(0)},BigNumber:function(e){return new r(e.toString())},Fraction:function(e){return e},Object:function(e){return new r(e)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$45="matrix",dependencies$45=["typed","Matrix","DenseMatrix","SparseMatrix"],createMatrix=factory(name$45,dependencies$45,e=>{var{typed:e,DenseMatrix:n,SparseMatrix:i}=e;return e(name$45,{"":function(){return r([])},string:function(e){return r([],e)},"string, string":function(e,t){return r([],e,t)},Array:function(e){return r(e)},Matrix:function(e){return r(e,e.storage())},"Array | Matrix, string":r,"Array | Matrix, string, string":r});function r(e,t,r){if("dense"===t||"default"===t||void 0===t)return new n(e,r);if("sparse"===t)return new i(e,r);throw new TypeError("Unknown matrix type "+JSON.stringify(t)+".")}}),name$44="matrixFromFunction",dependencies$44=["typed","matrix","isZero"],createMatrixFromFunction=factory(name$44,dependencies$44,e=>{var{typed:e,matrix:a,isZero:o}=e;return e(name$44,{"Array | Matrix, function, string, string":i,"Array | Matrix, function, string":function(e,t,r){return i(e,t,r)},"Matrix, function":function(e,t){return i(e,t,"dense")},"Array, function":function(e,t){return i(e,t,"dense").toArray()},"Array | Matrix, string, function":function(e,t,r){return i(e,r,t)},"Array | Matrix, string, string, function":function(e,t,r,n){return i(e,n,t,r)}});function i(e,n,t,r){var i=void 0!==r?a(t,r):a(t);return i.resize(e),i.forEach(function(e,t){var r=n(t);o(r)||i.set(t,r)}),i}}),name$43="matrixFromRows",dependencies$43=["typed","matrix","flatten","size"],createMatrixFromRows=factory(name$43,dependencies$43,e=>{var{typed:e,matrix:t,flatten:a,size:r}=e;return e(name$43,{"...Array":n,"...Matrix":function(e){return t(n(e.map(e=>e.toArray())))}});function n(e){if(0===e.length)throw new TypeError("At least one row is needed to construct a matrix.");var t,r=o(e[0]),n=[];for(t of e){var i=o(t);if(i!==r)throw new TypeError("The vectors had different length: "+(0|r)+" ≠ "+(0|i));n.push(a(t))}return n}function o(e){e=r(e);if(1===e.length)return e[0];if(2!==e.length)throw new TypeError("Only one- or two-dimensional vectors are supported.");if(1===e[0])return e[1];if(1===e[1])return e[0];throw new TypeError("At least one of the arguments is not a vector.")}}),name$42="matrixFromColumns",dependencies$42=["typed","matrix","flatten","size"],createMatrixFromColumns=factory(name$42,dependencies$42,e=>{var{typed:e,matrix:t,flatten:u,size:r}=e;return e(name$42,{"...Array":n,"...Matrix":function(e){return t(n(e.map(e=>e.toArray())))}});function n(e){if(0===e.length)throw new TypeError("At least one column is needed to construct a matrix.");for(var t,r=c(e[0]),n=[],i=0;i<r;i++)n[i]=[];for(t of e){var a=c(t);if(a!==r)throw new TypeError("The vectors had different length: "+(0|r)+" ≠ "+(0|a));for(var o=u(t),s=0;s<r;s++)n[s].push(o[s])}return n}function c(e){e=r(e);if(1===e.length)return e[0];if(2!==e.length)throw new TypeError("Only one- or two-dimensional vectors are supported.");if(1===e[0])return e[1];if(1===e[1])return e[0];throw new TypeError("At least one of the arguments is not a vector.")}}),name$41="splitUnit",dependencies$41=["typed"],createSplitUnit=factory(name$41,dependencies$41,e=>{var e=e["typed"];return e(name$41,{"Unit, Array":function(e,t){return e.splitUnit(t)}})}),name$40="unaryMinus",dependencies$40=["typed"],createUnaryMinus=factory(name$40,dependencies$40,e=>{var e=e["typed"];return e(name$40,{number:unaryMinusNumber,Complex:function(e){return e.neg()},BigNumber:function(e){return e.neg()},Fraction:function(e){return e.neg()},Unit:function(e){var t=e.clone();return t.value=this(e.value),t},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$3$="unaryPlus",dependencies$3$=["typed","config","BigNumber"],createUnaryPlus=factory(name$3$,dependencies$3$,e=>{var{typed:e,config:t,BigNumber:r}=e;return e(name$3$,{number:unaryPlusNumber,Complex:function(e){return e},BigNumber:function(e){return e},Fraction:function(e){return e},Unit:function(e){return e.clone()},"Array | Matrix":function(e){return deepMap(e,this)},"boolean | string":function(e){return"BigNumber"===t.number?new r(+e):+e}})}),name$3_="abs",dependencies$3_=["typed"],createAbs=factory(name$3_,dependencies$3_,e=>{var e=e["typed"];return e(name$3_,{number:absNumber,Complex:function(e){return e.abs()},BigNumber:function(e){return e.abs()},Fraction:function(e){return e.abs()},"Array | Matrix":function(e){return deepMap(e,this)},Unit:function(e){return e.abs()}})}),name$3Z="apply",dependencies$3Z=["typed","isInteger"],createApply=factory(name$3Z,dependencies$3Z,e=>{var{typed:e,isInteger:i}=e;return e(name$3Z,{"Array | Matrix, number | BigNumber, function":function(e,t,r){if(!i(t))throw new TypeError("Integer number expected for dimension");var n=Array.isArray(e)?arraySize(e):e.size();if(t<0||t>=n.length)throw new IndexError(t,n.length);return isMatrix(e)?e.create(_apply(e.valueOf(),t,r)):_apply(e,t,r)}})});function _apply(e,t,r){var n,i,a;if(t<=0){if(Array.isArray(e[0])){for(a=_switch(e),i=[],n=0;n<a.length;n++)i[n]=_apply(a[n],t-1,r);return i}return r(e)}for(i=[],n=0;n<e.length;n++)i[n]=_apply(e[n],t-1,r);return i}function _switch(e){for(var t=e.length,r=e[0].length,n=[],i=0;i<r;i++){for(var a=[],o=0;o<t;o++)a.push(e[o][i]);n.push(a)}return n}var name$3Y="addScalar",dependencies$3Y=["typed"],createAddScalar=factory(name$3Y,dependencies$3Y,e=>{var e=e["typed"];return e(name$3Y,{"number, number":addNumber,"Complex, Complex":function(e,t){return e.add(t)},"BigNumber, BigNumber":function(e,t){return e.plus(t)},"Fraction, Fraction":function(e,t){return e.add(t)},"Unit, Unit":function(e,t){if(null===e.value||void 0===e.value)throw new Error("Parameter x contains a unit with undefined value");if(null===t.value||void 0===t.value)throw new Error("Parameter y contains a unit with undefined value");if(!e.equalBase(t))throw new Error("Units do not match");e=e.clone();return e.value=this(e.value,t.value),e.fixPrefix=!1,e}})}),name$3X="cbrt",dependencies$3X=["config","typed","isNegative","unaryMinus","matrix","Complex","BigNumber","Fraction"],createCbrt=factory(name$3X,dependencies$3X,e=>{var{config:i,typed:e,isNegative:n,unaryMinus:a,matrix:o,Complex:s,BigNumber:u,Fraction:c}=e;return e(name$3X,{number:cbrtNumber,Complex:l,"Complex, boolean":l,BigNumber:function(e){return e.cbrt()},Unit:function(e){{if(e.value&&isComplex(e.value)){var t=e.clone();return t.value=1,(t=t.pow(1/3)).value=l(e.value),t}var r=n(e.value);r&&(e.value=a(e.value)),t=isBigNumber(e.value)?new u(1).div(3):isFraction(e.value)?new c(1,3):1/3;t=e.pow(t);return r&&(t.value=a(t.value)),t}},"Array | Matrix":function(e){return deepMap(e,this)}});function l(e,t){var r=e.arg()/3,n=e.abs(),e=new s(cbrtNumber(n),0).mul(new s(0,r).exp());if(t){r=[e,new s(cbrtNumber(n),0).mul(new s(0,r+2*Math.PI/3).exp()),new s(cbrtNumber(n),0).mul(new s(0,r-2*Math.PI/3).exp())];return"Array"===i.matrix?r:o(r)}return e}}),name$3W="algorithm11",dependencies$3W=["typed","equalScalar"],createAlgorithm11=factory(name$3W,dependencies$3W,e=>{var{typed:S,equalScalar:$}=e;return function(e,t,r,n){var i=e._values,a=e._index,o=e._ptr,s=e._size,u=e._datatype;if(!i)throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");var c,l=s[0],p=s[1],m=$,f=0,d=r;"string"==typeof u&&(m=S.find($,[c=u,c]),f=S.convert(0,c),t=S.convert(t,c),d=S.find(r,[c,c]));for(var h=[],y=[],g=[],x=0;x<p;x++){g[x]=y.length;for(var v=o[x],b=o[x+1],w=v;w<b;w++){var N=a[w],M=n?d(t,i[w]):d(i[w],t);m(M,f)||(y.push(N),h.push(M))}}return g[p]=y.length,e.createSparseMatrix({values:h,index:y,ptr:g,size:[l,p],datatype:c})}}),name$3V="algorithm14",dependencies$3V=["typed"],createAlgorithm14=factory(name$3V,dependencies$3V,e=>{var c=e["typed"];return function(e,t,r,n){var i,a=e._data,o=e._size,s=e._datatype,u=r;"string"==typeof s&&(t=c.convert(t,i=s),u=c.find(r,[i,i]));n=0<o.length?function e(t,r,n,i,a,o,s){var u=[];if(r===n.length-1)for(var c=0;c<i;c++)u[c]=s?t(o,a[c]):t(a[c],o);else for(var l=0;l<i;l++)u[l]=e(t,r+1,n,n[r+1],a[l],o,s);return u}(u,0,o,o[0],a,t,n):[];return e.createDenseMatrix({data:n,size:clone$1(o),datatype:i})}}),name$3U="ceil",dependencies$3U=["typed","config","round","matrix","equalScalar"],createCeil=factory(name$3U,dependencies$3U,e=>{var{typed:t,config:i,round:a,matrix:r,equalScalar:e}=e,n=createAlgorithm11({typed:t,equalScalar:e}),o=createAlgorithm14({typed:t});return t("ceil",{number:function(e){return(nearlyEqual$1(e,a(e),i.epsilon)?a:ceilNumber)(e)},"number, number":function(e,t){if(nearlyEqual$1(e,a(e,t),i.epsilon))return a(e,t);var[r,n]="".concat(e,"e").split("e"),e=Math.ceil(Number("".concat(r,"e").concat(Number(n)+t)));return[r,n]="".concat(e,"e").split("e"),Number("".concat(r,"e").concat(Number(n)-t))},Complex:function(e){return e.ceil()},"Complex, number":function(e,t){return e.ceil(t)},BigNumber:function(e){return nearlyEqual(e,a(e),i.epsilon)?a(e):e.ceil()},"BigNumber, BigNumber":function(e,t){return nearlyEqual(e,a(e,t),i.epsilon)?a(e,t):e.toDecimalPlaces(t.toNumber(),decimal.ROUND_CEIL)},Fraction:function(e){return e.ceil()},"Fraction, number":function(e,t){return e.ceil(t)},"Array | Matrix":function(e){return deepMap(e,this)},"Array | Matrix, number":function(e,t){return deepMap(e,e=>this(e,t))},"SparseMatrix, number | BigNumber":function(e,t){return n(e,t,this,!1)},"DenseMatrix, number | BigNumber":function(e,t){return o(e,t,this,!1)},"number | Complex | BigNumber, Array":function(e,t){return o(r(t),e,this,!0).valueOf()}})}),name$3T="cube",dependencies$3T=["typed"],createCube=factory(name$3T,dependencies$3T,e=>{var e=e["typed"];return e(name$3T,{number:cubeNumber,Complex:function(e){return e.mul(e).mul(e)},BigNumber:function(e){return e.times(e).times(e)},Fraction:function(e){return e.pow(3)},"Array | Matrix":function(e){return deepMap(e,this)},Unit:function(e){return e.pow(3)}})}),name$3S="exp",dependencies$3S=["typed"],createExp=factory(name$3S,dependencies$3S,e=>{var e=e["typed"];return e(name$3S,{number:expNumber,Complex:function(e){return e.exp()},BigNumber:function(e){return e.exp()},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$3R="expm1",dependencies$3R=["typed","Complex"],createExpm1=factory(name$3R,dependencies$3R,e=>{var{typed:e,Complex:r}=e;return e(name$3R,{number:expm1Number,Complex:function(e){var t=Math.exp(e.re);return new r(t*Math.cos(e.im)-1,t*Math.sin(e.im))},BigNumber:function(e){return e.exp().minus(1)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$3Q="fix",dependencies$3Q=["typed","Complex","matrix","ceil","floor"],createFix=factory(name$3Q,dependencies$3Q,e=>{var{typed:e,Complex:r,matrix:n,ceil:i,floor:a}=e,o=createAlgorithm14({typed:e});return e("fix",{number:function(e){return(0<e?a:i)(e)},"number, number | BigNumber":function(e,t){return(0<e?a:i)(e,t)},Complex:function(e){return new r(0<e.re?Math.floor(e.re):Math.ceil(e.re),0<e.im?Math.floor(e.im):Math.ceil(e.im))},"Complex, number | BigNumber":function(e,t){return new r((0<e.re?a:i)(e.re,t),(0<e.im?a:i)(e.im,t))},BigNumber:function(e){return(e.isNegative()?i:a)(e)},"BigNumber, number | BigNumber":function(e,t){return(e.isNegative()?i:a)(e,t)},Fraction:function(e){return e.s<0?e.ceil():e.floor()},"Fraction, number | BigNumber":function(e,t){return e.s<0?e.ceil(t):e.floor(t)},"Array | Matrix":function(e){return deepMap(e,this)},"Array | Matrix, number | BigNumber":function(e,t){return deepMap(e,e=>this(e,t))},"number | Complex | BigNumber, Array":function(e,t){return o(n(t),e,this,!0).valueOf()}})}),name$3P="floor",dependencies$3P=["typed","config","round","matrix","equalScalar"],createFloor=factory(name$3P,dependencies$3P,e=>{var{typed:t,config:i,round:a,matrix:r,equalScalar:e}=e,n=createAlgorithm11({typed:t,equalScalar:e}),o=createAlgorithm14({typed:t});return t("floor",{number:function(e){return nearlyEqual$1(e,a(e),i.epsilon)?a(e):Math.floor(e)},"number, number":function(e,t){if(nearlyEqual$1(e,a(e,t),i.epsilon))return a(e,t);var[r,n]="".concat(e,"e").split("e"),e=Math.floor(Number("".concat(r,"e").concat(Number(n)+t)));return[r,n]="".concat(e,"e").split("e"),Number("".concat(r,"e").concat(Number(n)-t))},Complex:function(e){return e.floor()},"Complex, number":function(e,t){return e.floor(t)},BigNumber:function(e){return nearlyEqual(e,a(e),i.epsilon)?a(e):e.floor()},"BigNumber, BigNumber":function(e,t){return nearlyEqual(e,a(e,t),i.epsilon)?a(e,t):e.toDecimalPlaces(t.toNumber(),decimal.ROUND_FLOOR)},Fraction:function(e){return e.floor()},"Fraction, number":function(e,t){return e.floor(t)},"Array | Matrix":function(e){return deepMap(e,this)},"Array | Matrix, number":function(e,t){return deepMap(e,e=>this(e,t))},"SparseMatrix, number | BigNumber":function(e,t){return n(e,t,this,!1)},"DenseMatrix, number | BigNumber":function(e,t){return o(e,t,this,!1)},"number | Complex | BigNumber, Array":function(e,t){return o(r(t),e,this,!0).valueOf()}})}),name$3O="algorithm01",dependencies$3O=["typed"],createAlgorithm01=factory(name$3O,dependencies$3O,e=>{var M=e["typed"];return function(e,t,r,n){var i=e._data,a=e._size,o=e._datatype,s=t._values,u=t._index,c=t._ptr,l=t._size,t=t._datatype;if(a.length!==l.length)throw new DimensionError(a.length,l.length);if(a[0]!==l[0]||a[1]!==l[1])throw new RangeError("Dimension mismatch. Matrix A ("+a+") must match Matrix B ("+l+")");if(!s)throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");for(var p=a[0],m=a[1],o="string"==typeof o&&o===t?o:void 0,f=o?M.find(r,[o,o]):r,d=[],h=0;h<p;h++)d[h]=[];for(var y=[],g=[],x=0;x<m;x++){for(var v=x+1,b=c[x],w=c[x+1],N=b;N<w;N++)y[h=u[N]]=n?f(s[N],i[h][x]):f(i[h][x],s[N]),g[h]=v;for(h=0;h<p;h++)g[h]===v?d[h][x]=y[h]:d[h][x]=i[h][x]}return e.createDenseMatrix({data:d,size:[p,m],datatype:o})}}),name$3N="algorithm04",dependencies$3N=["typed","equalScalar"],createAlgorithm04=factory(name$3N,dependencies$3N,e=>{var{typed:D,equalScalar:_}=e;return function(e,t,r){var n=e._values,i=e._index,a=e._ptr,o=e._size,s=e._datatype,u=t._values,c=t._index,l=t._ptr,p=t._size,t=t._datatype;if(o.length!==p.length)throw new DimensionError(o.length,p.length);if(o[0]!==p[0]||o[1]!==p[1])throw new RangeError("Dimension mismatch. Matrix A ("+o+") must match Matrix B ("+p+")");var m,p=o[0],f=o[1],d=_,h=0,y=r;"string"==typeof s&&s===t&&(d=D.find(_,[m=s,m]),h=D.convert(0,m),y=D.find(r,[m,m]));for(var g=n&&u?[]:void 0,x=[],v=[],b=n&&u?[]:void 0,w=n&&u?[]:void 0,N=[],M=[],S=0;S<f;S++){v[S]=x.length;for(var $,E,A=S+1,O=a[S],C=a[S+1],T=O;T<C;T++)E=i[T],x.push(E),N[E]=A,b&&(b[E]=n[T]);for(O=l[S],C=l[S+1],T=O;T<C;T++)N[E=c[T]]===A?b&&(d($=y(b[E],u[T]),h)?N[E]=null:b[E]=$):(x.push(E),M[E]=A,w&&(w[E]=u[T]));if(b&&w)for(T=v[S];T<x.length;)N[E=x[T]]===A?(g[T]=b[E],T++):M[E]===A?(g[T]=w[E],T++):x.splice(T,1)}return v[f]=x.length,e.createSparseMatrix({values:g,index:x,ptr:v,size:[p,f],datatype:m})}}),name$3M="algorithm10",dependencies$3M=["typed","DenseMatrix"],createAlgorithm10=factory(name$3M,dependencies$3M,e=>{var{typed:N,DenseMatrix:M}=e;return function(e,t,r,n){var i=e._values,a=e._index,o=e._ptr,s=e._size,e=e._datatype;if(!i)throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");var u,c=s[0],l=s[1],p=r;"string"==typeof e&&(t=N.convert(t,u=e),p=N.find(r,[u,u]));for(var m=[],f=[],d=[],h=0;h<l;h++){for(var y=h+1,g=o[h],x=o[h+1],v=g;v<x;v++){var b=a[v];f[b]=i[v],d[b]=y}for(var w=0;w<c;w++)0===h&&(m[w]=[]),d[w]===y?m[w][h]=n?p(t,f[w]):p(f[w],t):m[w][h]=t}return new M({data:m,size:[c,l],datatype:u})}}),name$3L="algorithm13",dependencies$3L=["typed"],createAlgorithm13=factory(name$3L,dependencies$3L,e=>{var m=e["typed"];return function(e,t,r){var n=e._data,i=e._size,a=e._datatype,o=t._data,s=t._size,u=t._datatype,c=[];if(i.length!==s.length)throw new DimensionError(i.length,s.length);for(var l,p=0;p<i.length;p++){if(i[p]!==s[p])throw new RangeError("Dimension mismatch. Matrix A ("+i+") must match Matrix B ("+s+")");c[p]=i[p]}t=r;"string"==typeof a&&a===u&&(t=m.find(r,[l=a,l]));o=0<c.length?function e(t,r,n,i,a,o){var s=[];if(r===n.length-1)for(var u=0;u<i;u++)s[u]=t(a[u],o[u]);else for(var c=0;c<i;c++)s[c]=e(t,r+1,n,n[r+1],a[c],o[c]);return s}(t,0,c,c[0],n,o):[];return e.createDenseMatrix({data:o,size:c,datatype:l})}}),name$3K="gcd",dependencies$3K=["typed","matrix","equalScalar","BigNumber","DenseMatrix"],createGcd=factory(name$3K,dependencies$3K,e=>{var{typed:t,matrix:r,equalScalar:n,BigNumber:i,DenseMatrix:e}=e,a=createAlgorithm01({typed:t}),o=createAlgorithm04({typed:t,equalScalar:n}),s=createAlgorithm10({typed:t,DenseMatrix:e}),u=createAlgorithm13({typed:t}),c=createAlgorithm14({typed:t});return t(name$3K,{"number, number":gcdNumber,"BigNumber, BigNumber":function(e,t){if(!e.isInt()||!t.isInt())throw new Error("Parameters in function gcd must be integer numbers");var r=new i(0);for(;!t.isZero();){var n=e.mod(t);e=t,t=n}return e.lt(r)?e.neg():e},"Fraction, Fraction":function(e,t){return e.gcd(t)},"SparseMatrix, SparseMatrix":function(e,t){return o(e,t,this)},"SparseMatrix, DenseMatrix":function(e,t){return a(t,e,this,!0)},"DenseMatrix, SparseMatrix":function(e,t){return a(e,t,this,!1)},"DenseMatrix, DenseMatrix":function(e,t){return u(e,t,this)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"SparseMatrix, number | BigNumber":function(e,t){return s(e,t,this,!1)},"DenseMatrix, number | BigNumber":function(e,t){return c(e,t,this,!1)},"number | BigNumber, SparseMatrix":function(e,t){return s(t,e,this,!0)},"number | BigNumber, DenseMatrix":function(e,t){return c(t,e,this,!0)},"Array, number | BigNumber":function(e,t){return c(r(e),t,this,!1).valueOf()},"number | BigNumber, Array":function(e,t){return c(r(t),e,this,!0).valueOf()},"Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber":function(e,t,r){for(var n=this(e,t),i=0;i<r.length;i++)n=this(n,r[i]);return n}})}),name$3J="algorithm02",dependencies$3J=["typed","equalScalar"],createAlgorithm02=factory(name$3J,dependencies$3J,e=>{var{typed:$,equalScalar:E}=e;return function(e,t,r,n){var i=e._data,a=e._size,o=e._datatype,s=t._values,u=t._index,c=t._ptr,l=t._size,e=t._datatype;if(a.length!==l.length)throw new DimensionError(a.length,l.length);if(a[0]!==l[0]||a[1]!==l[1])throw new RangeError("Dimension mismatch. Matrix A ("+a+") must match Matrix B ("+l+")");if(!s)throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");var p,l=a[0],m=a[1],f=E,d=0,h=r;"string"==typeof o&&o===e&&(f=$.find(E,[p=o,p]),d=$.convert(0,p),h=$.find(r,[p,p]));for(var y=[],g=[],x=[],v=0;v<m;v++){x[v]=g.length;for(var b=c[v],w=c[v+1],N=b;N<w;N++){var M=u[N],S=n?h(s[N],i[M][v]):h(i[M][v],s[N]);f(S,d)||(g.push(M),y.push(S))}}return x[m]=g.length,t.createSparseMatrix({values:y,index:g,ptr:x,size:[l,m],datatype:p})}}),name$3I="algorithm06",dependencies$3I=["typed","equalScalar"],createAlgorithm06=factory(name$3I,dependencies$3I,e=>{var{typed:E,equalScalar:A}=e;return function(e,t,r){var n=e._values,i=e._size,a=e._datatype,o=t._values,s=t._size,u=t._datatype;if(i.length!==s.length)throw new DimensionError(i.length,s.length);if(i[0]!==s[0]||i[1]!==s[1])throw new RangeError("Dimension mismatch. Matrix A ("+i+") must match Matrix B ("+s+")");var c,s=i[0],l=i[1],p=A,m=0,f=r;"string"==typeof a&&a===u&&(p=E.find(A,[c=a,c]),m=E.convert(0,c),f=E.find(r,[c,c]));for(var d=n&&o?[]:void 0,h=[],y=[],g=d?[]:void 0,x=[],v=[],b=0;b<l;b++){y[b]=h.length;var w=b+1;if(scatter(e,b,x,g,v,w,h,f),scatter(t,b,x,g,v,w,h,f),g)for(var N=y[b];N<h.length;){var M,S=h[N];v[S]!==w||p(M=g[S],m)?h.splice(N,1):(d.push(M),N++)}else for(var $=y[b];$<h.length;)v[h[$]]!==w?h.splice($,1):$++}return y[l]=h.length,e.createSparseMatrix({values:d,index:h,ptr:y,size:[s,l],datatype:c})}}),name$3H="lcm",dependencies$3H=["typed","matrix","equalScalar"],createLcm=factory(name$3H,dependencies$3H,e=>{var{typed:t,matrix:r,equalScalar:e}=e,n=createAlgorithm02({typed:t,equalScalar:e}),i=createAlgorithm06({typed:t,equalScalar:e}),a=createAlgorithm11({typed:t,equalScalar:e}),o=createAlgorithm13({typed:t}),s=createAlgorithm14({typed:t});return t(name$3H,{"number, number":lcmNumber,"BigNumber, BigNumber":function(e,t){if(!e.isInt()||!t.isInt())throw new Error("Parameters in function lcm must be integer numbers");if(e.isZero())return e;if(t.isZero())return t;var r=e.times(t);for(;!t.isZero();){var n=t;t=e.mod(n),e=n}return r.div(e).abs()},"Fraction, Fraction":function(e,t){return e.lcm(t)},"SparseMatrix, SparseMatrix":function(e,t){return i(e,t,this)},"SparseMatrix, DenseMatrix":function(e,t){return n(t,e,this,!0)},"DenseMatrix, SparseMatrix":function(e,t){return n(e,t,this,!1)},"DenseMatrix, DenseMatrix":function(e,t){return o(e,t,this)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"SparseMatrix, number | BigNumber":function(e,t){return a(e,t,this,!1)},"DenseMatrix, number | BigNumber":function(e,t){return s(e,t,this,!1)},"number | BigNumber, SparseMatrix":function(e,t){return a(t,e,this,!0)},"number | BigNumber, DenseMatrix":function(e,t){return s(t,e,this,!0)},"Array, number | BigNumber":function(e,t){return s(r(e),t,this,!1).valueOf()},"number | BigNumber, Array":function(e,t){return s(r(t),e,this,!0).valueOf()},"Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber":function(e,t,r){for(var n=this(e,t),i=0;i<r.length;i++)n=this(n,r[i]);return n}})}),name$3G="log10",dependencies$3G=["typed","config","Complex"],createLog10=factory(name$3G,dependencies$3G,e=>{var{typed:e,config:t,Complex:r}=e;return e(name$3G,{number:function(e){return 0<=e||t.predictable?log10Number(e):new r(e,0).log().div(Math.LN10)},Complex:function(e){return new r(e).log().div(Math.LN10)},BigNumber:function(e){return!e.isNegative()||t.predictable?e.log():new r(e.toNumber(),0).log().div(Math.LN10)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$3F="log2",dependencies$3F=["typed","config","Complex"],createLog2=factory(name$3F,dependencies$3F,e=>{var{typed:e,config:t,Complex:r}=e;return e(name$3F,{number:function(e){return 0<=e||t.predictable?log2Number(e):n(new r(e,0))},Complex:n,BigNumber:function(e){return!e.isNegative()||t.predictable?e.log(2):n(new r(e.toNumber(),0))},"Array | Matrix":function(e){return deepMap(e,this)}});function n(e){var t=Math.sqrt(e.re*e.re+e.im*e.im);return new r(Math.log2?Math.log2(t):Math.log(t)/Math.LN2,Math.atan2(e.im,e.re)/Math.LN2)}}),name$3E="algorithm03",dependencies$3E=["typed"],createAlgorithm03=factory(name$3E,dependencies$3E,e=>{var A=e["typed"];return function(e,t,r,n){var i=e._data,a=e._size,o=e._datatype,s=t._values,u=t._index,c=t._ptr,l=t._size,t=t._datatype;if(a.length!==l.length)throw new DimensionError(a.length,l.length);if(a[0]!==l[0]||a[1]!==l[1])throw new RangeError("Dimension mismatch. Matrix A ("+a+") must match Matrix B ("+l+")");if(!s)throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");var p,m=a[0],f=a[1],d=0,h=r;"string"==typeof o&&o===t&&(d=A.convert(0,p=o),h=A.find(r,[p,p]));for(var y=[],g=0;g<m;g++)y[g]=[];for(var x=[],v=[],b=0;b<f;b++){for(var w=b+1,N=c[b],M=c[b+1],S=N;S<M;S++){var $=u[S];x[$]=n?h(s[S],i[$][b]):h(i[$][b],s[S]),v[$]=w}for(var E=0;E<m;E++)v[E]===w?y[E][b]=x[E]:y[E][b]=n?h(d,i[E][b]):h(i[E][b],d)}return e.createDenseMatrix({data:y,size:[m,f],datatype:p})}}),name$3D="algorithm05",dependencies$3D=["typed","equalScalar"],createAlgorithm05=factory(name$3D,dependencies$3D,e=>{var{typed:D,equalScalar:_}=e;return function(e,t,r){var n=e._values,i=e._index,a=e._ptr,o=e._size,s=e._datatype,u=t._values,c=t._index,l=t._ptr,p=t._size,t=t._datatype;if(o.length!==p.length)throw new DimensionError(o.length,p.length);if(o[0]!==p[0]||o[1]!==p[1])throw new RangeError("Dimension mismatch. Matrix A ("+o+") must match Matrix B ("+p+")");var m,p=o[0],f=o[1],d=_,h=0,y=r;"string"==typeof s&&s===t&&(d=D.find(_,[m=s,m]),h=D.convert(0,m),y=D.find(r,[m,m]));for(var g=n&&u?[]:void 0,x=[],v=[],b=g?[]:void 0,w=g?[]:void 0,N=[],M=[],S=0;S<f;S++){v[S]=x.length;for(var $=S+1,E=a[S],A=a[S+1];E<A;E++)O=i[E],x.push(O),N[O]=$,b&&(b[O]=n[E]);for(E=l[S],A=l[S+1];E<A;E++)N[O=c[E]]!==$&&x.push(O),M[O]=$,w&&(w[O]=u[E]);if(g)for(E=v[S];E<x.length;){var O,C=N[O=x[E]],T=M[O];C!==$&&T!==$||(d(T=y(C===$?b[O]:h,T===$?w[O]:h),h)?x.splice(E,1):(g.push(T),E++))}}return v[f]=x.length,e.createSparseMatrix({values:g,index:x,ptr:v,size:[p,f],datatype:m})}}),name$3C="algorithm12",dependencies$3C=["typed","DenseMatrix"],createAlgorithm12=factory(name$3C,dependencies$3C,e=>{var{typed:N,DenseMatrix:M}=e;return function(e,t,r,n){var i=e._values,a=e._index,o=e._ptr,s=e._size,e=e._datatype;if(!i)throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");var u,c=s[0],l=s[1],p=r;"string"==typeof e&&(t=N.convert(t,u=e),p=N.find(r,[u,u]));for(var m=[],f=[],d=[],h=0;h<l;h++){for(var y=h+1,g=o[h],x=o[h+1],v=g;v<x;v++){var b=a[v];f[b]=i[v],d[b]=y}for(var w=0;w<c;w++)0===h&&(m[w]=[]),d[w]===y?m[w][h]=n?p(t,f[w]):p(f[w],t):m[w][h]=n?p(t,0):p(0,t)}return new M({data:m,size:[c,l],datatype:u})}}),name$3B="mod",dependencies$3B=["typed","matrix","equalScalar","DenseMatrix"],createMod=factory(name$3B,dependencies$3B,e=>{var{typed:t,matrix:r,equalScalar:n,DenseMatrix:e}=e,i=createAlgorithm02({typed:t,equalScalar:n}),a=createAlgorithm03({typed:t}),o=createAlgorithm05({typed:t,equalScalar:n}),s=createAlgorithm11({typed:t,equalScalar:n}),u=createAlgorithm12({typed:t,DenseMatrix:e}),c=createAlgorithm13({typed:t}),l=createAlgorithm14({typed:t});return t(name$3B,{"number, number":modNumber,"BigNumber, BigNumber":function(e,t){if(t.isNeg())throw new Error("Cannot calculate mod for a negative divisor");return t.isZero()?e:e.mod(t)},"Fraction, Fraction":function(e,t){if(t.compare(0)<0)throw new Error("Cannot calculate mod for a negative divisor");return(0<=e.compare(0)?e:e.mod(t).add(t)).mod(t)},"SparseMatrix, SparseMatrix":function(e,t){return o(e,t,this,!1)},"SparseMatrix, DenseMatrix":function(e,t){return i(t,e,this,!0)},"DenseMatrix, SparseMatrix":function(e,t){return a(e,t,this,!1)},"DenseMatrix, DenseMatrix":function(e,t){return c(e,t,this)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"SparseMatrix, any":function(e,t){return s(e,t,this,!1)},"DenseMatrix, any":function(e,t){return l(e,t,this,!1)},"any, SparseMatrix":function(e,t){return u(t,e,this,!0)},"any, DenseMatrix":function(e,t){return l(t,e,this,!0)},"Array, any":function(e,t){return l(r(e),t,this,!1).valueOf()},"any, Array":function(e,t){return l(r(t),e,this,!0).valueOf()}})}),name$3A="multiplyScalar",dependencies$3A=["typed"],createMultiplyScalar=factory(name$3A,dependencies$3A,e=>{var e=e["typed"];return e("multiplyScalar",{"number, number":multiplyNumber,"Complex, Complex":function(e,t){return e.mul(t)},"BigNumber, BigNumber":function(e,t){return e.times(t)},"Fraction, Fraction":function(e,t){return e.mul(t)},"number | Fraction | BigNumber | Complex, Unit":function(e,t){t=t.clone();return t.value=null===t.value?t._normalize(e):this(t.value,e),t},"Unit, number | Fraction | BigNumber | Complex":function(e,t){e=e.clone();return e.value=null===e.value?e._normalize(t):this(e.value,t),e},"Unit, Unit":function(e,t){return e.multiply(t)}})}),name$3z="multiply",dependencies$3z=["typed","matrix","addScalar","multiplyScalar","equalScalar","dot"],createMultiply=factory(name$3z,dependencies$3z,e=>{var{typed:R,matrix:r,addScalar:B,multiplyScalar:q,equalScalar:I,dot:i}=e,n=createAlgorithm11({typed:R,equalScalar:I}),a=createAlgorithm14({typed:R});function o(e,t){switch(e.length){case 1:switch(t.length){case 1:if(e[0]!==t[0])throw new RangeError("Dimension mismatch in multiplication. Vectors must have the same length");break;case 2:if(e[0]!==t[0])throw new RangeError("Dimension mismatch in multiplication. Vector length ("+e[0]+") must match Matrix rows ("+t[0]+")");break;default:throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix B has "+t.length+" dimensions)")}break;case 2:switch(t.length){case 1:if(e[1]!==t[0])throw new RangeError("Dimension mismatch in multiplication. Matrix columns ("+e[1]+") must match Vector length ("+t[0]+")");break;case 2:if(e[1]!==t[0])throw new RangeError("Dimension mismatch in multiplication. Matrix A columns ("+e[1]+") must match Matrix B rows ("+t[0]+")");break;default:throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix B has "+t.length+" dimensions)")}break;default:throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix A has "+e.length+" dimensions)")}}function s(e,t){if("dense"!==t.storage())throw new Error("Support for SparseMatrix not implemented");return function(e,t){var r,n=e._data,i=e._size,a=e._datatype,o=t._data,s=t._size,t=t._datatype,u=i[0],c=s[1],l=B,p=q;a&&t&&a===t&&"string"==typeof a&&(r=a,l=R.find(B,[r,r]),p=R.find(q,[r,r]));for(var m=[],f=0;f<c;f++){for(var d=p(n[0],o[0][f]),h=1;h<u;h++)d=l(d,p(n[h],o[h][f]));m[f]=d}return e.createDenseMatrix({data:m,size:[c],datatype:r})}(e,t)}var u=R("_multiplyMatrixVector",{"DenseMatrix, any":function(e,t){var r,n=e._data,i=e._size,a=e._datatype,o=t._data,t=t._datatype,s=i[0],u=i[1],c=B,l=q;a&&t&&a===t&&"string"==typeof a&&(r=a,c=R.find(B,[r,r]),l=R.find(q,[r,r]));for(var p=[],m=0;m<s;m++){for(var f=n[m],d=l(f[0],o[0]),h=1;h<u;h++)d=c(d,l(f[h],o[h]));p[m]=d}return e.createDenseMatrix({data:p,size:[s],datatype:r})},"SparseMatrix, any":function(e,t){var r=e._values,n=e._index,i=e._ptr,a=e._datatype;if(!r)throw new Error("Cannot multiply Pattern only Matrix times Dense Matrix");var o,s=t._data,u=t._datatype,c=e._size[0],l=t._size[0],p=[],m=[],t=[],f=B,d=q,h=I,y=0;a&&u&&a===u&&"string"==typeof a&&(o=a,f=R.find(B,[o,o]),d=R.find(q,[o,o]),h=R.find(I,[o,o]),y=R.convert(0,o));for(var g=[],x=[],v=t[0]=0;v<l;v++){var b=s[v];if(!h(b,y))for(var w=i[v],N=i[v+1],M=w;M<N;M++){var S=n[M];x[S]?g[S]=f(g[S],d(b,r[M])):(x[S]=!0,m.push(S),g[S]=d(b,r[M]))}}for(var $=m.length,E=0;E<$;E++){var A=m[E];p[E]=g[A]}return t[1]=m.length,e.createSparseMatrix({values:p,index:m,ptr:t,size:[c,1],datatype:o})}}),c=R("_multiplyMatrixMatrix",{"DenseMatrix, DenseMatrix":function(e,t){var r,n=e._data,i=e._size,a=e._datatype,o=t._data,s=t._size,t=t._datatype,u=i[0],c=i[1],l=s[1],p=B,m=q;a&&t&&a===t&&"string"==typeof a&&(r=a,p=R.find(B,[r,r]),m=R.find(q,[r,r]));for(var f=[],d=0;d<u;d++){var h=n[d];f[d]=[];for(var y=0;y<l;y++){for(var g=m(h[0],o[0][y]),x=1;x<c;x++)g=p(g,m(h[x],o[x][y]));f[d][y]=g}}return e.createDenseMatrix({data:f,size:[u,l],datatype:r})},"DenseMatrix, SparseMatrix":function(e,t){var r=e._data,n=e._size,i=e._datatype,a=t._values,o=t._index,s=t._ptr,u=t._size,e=t._datatype;if(!a)throw new Error("Cannot multiply Dense Matrix times Pattern only Matrix");var c=n[0],l=u[1],p=B,m=q,f=I,d=0;i&&e&&i===e&&"string"==typeof i&&(x=i,p=R.find(B,[x,x]),m=R.find(q,[x,x]),f=R.find(I,[x,x]),d=R.convert(0,x));for(var h=[],y=[],g=[],x=t.createSparseMatrix({values:h,index:y,ptr:g,size:[c,l],datatype:x}),v=0;v<l;v++){g[v]=y.length;var b=s[v],w=s[v+1];if(b<w)for(var N=0,M=0;M<c;M++){for(var S=M+1,$=void 0,E=b;E<w;E++){var A=o[E];N!==S?($=m(r[M][A],a[E]),N=S):$=p($,m(r[M][A],a[E]))}N!==S||f($,d)||(y.push(M),h.push($))}}return g[l]=y.length,x},"SparseMatrix, DenseMatrix":function(e,t){var r=e._values,n=e._index,i=e._ptr,a=e._datatype;if(!r)throw new Error("Cannot multiply Pattern only Matrix times Dense Matrix");var o=t._data,s=t._datatype,u=e._size[0],c=t._size[0],l=t._size[1],p=B,m=q,f=I,d=0;a&&s&&a===s&&"string"==typeof a&&(x=a,p=R.find(B,[x,x]),m=R.find(q,[x,x]),f=R.find(I,[x,x]),d=R.convert(0,x));for(var h=[],y=[],g=[],x=e.createSparseMatrix({values:h,index:y,ptr:g,size:[u,l],datatype:x}),v=[],b=[],w=0;w<l;w++){g[w]=y.length;for(var N=w+1,M=0;M<c;M++){var S=o[M][w];if(!f(S,d))for(var $=i[M],E=i[M+1],A=$;A<E;A++){var O=n[A];b[O]!==N?(b[O]=N,y.push(O),v[O]=m(S,r[A])):v[O]=p(v[O],m(S,r[A]))}}for(var C=g[w],T=y.length,D=C;D<T;D++){var _=y[D];h[D]=v[_]}}return g[l]=y.length,x},"SparseMatrix, SparseMatrix":function(e,t){var r=e._values,n=e._index,i=e._ptr,a=e._datatype,o=t._values,s=t._index,u=t._ptr,c=t._datatype,l=e._size[0],p=t._size[1],m=r&&o,f=B,d=q;a&&c&&a===c&&"string"==typeof a&&($=a,f=R.find(B,[$,$]),d=R.find(q,[$,$]));for(var h,y,g,x,v,b,w,N=m?[]:void 0,M=[],S=[],$=e.createSparseMatrix({values:N,index:M,ptr:S,size:[l,p],datatype:$}),E=m?[]:void 0,A=[],O=0;O<p;O++){S[O]=M.length;var C=O+1;for(T=u[O],v=u[O+1],x=T;x<v;x++)if(w=s[x],m)for(y=i[w],g=i[w+1],h=y;h<g;h++)b=n[h],A[b]!==C?(A[b]=C,M.push(b),E[b]=d(o[x],r[h])):E[b]=f(E[b],d(o[x],r[h]));else for(y=i[w],g=i[w+1],h=y;h<g;h++)b=n[h],A[b]!==C&&(A[b]=C,M.push(b));if(m)for(var T=S[O],D=M.length,_=T;_<D;_++){var I=M[_];N[_]=E[I]}}return S[p]=M.length,$}});return R(name$3z,extend({"Array, Array":function(e,t){o(arraySize(e),arraySize(t));t=this(r(e),r(t));return isMatrix(t)?t.valueOf():t},"Matrix, Matrix":function(e,t){var r=e.size(),n=t.size();return o(r,n),1===r.length?1===n.length?function(e,t,r){if(0===r)throw new Error("Cannot multiply two empty vectors");return i(e,t)}(e,t,r[0]):s(e,t):(1===n.length?u:c)(e,t)},"Matrix, Array":function(e,t){return this(e,r(t))},"Array, Matrix":function(e,t){return this(r(e,t.storage()),t)},"SparseMatrix, any":function(e,t){return n(e,t,q,!1)},"DenseMatrix, any":function(e,t){return a(e,t,q,!1)},"any, SparseMatrix":function(e,t){return n(t,e,q,!0)},"any, DenseMatrix":function(e,t){return a(t,e,q,!0)},"Array, any":function(e,t){return a(r(e),t,q,!1).valueOf()},"any, Array":function(e,t){return a(r(t),e,q,!0).valueOf()},"any, any":q,"any, any, ...any":function(e,t,r){for(var n=this(e,t),i=0;i<r.length;i++)n=this(n,r[i]);return n}},q.signatures))}),name$3y="nthRoot",dependencies$3y=["typed","matrix","equalScalar","BigNumber"],createNthRoot=factory(name$3y,dependencies$3y,e=>{var{typed:t,matrix:r,equalScalar:e,BigNumber:s}=e,n=createAlgorithm01({typed:t}),i=createAlgorithm02({typed:t,equalScalar:e}),a=createAlgorithm06({typed:t,equalScalar:e}),o=createAlgorithm11({typed:t,equalScalar:e}),u=createAlgorithm13({typed:t}),c=createAlgorithm14({typed:t}),l="Complex number not supported in function nthRoot. Use nthRoots instead.";return t(name$3y,{number:function(e){return nthRootNumber(e,2)},"number, number":nthRootNumber,BigNumber:function(e){return p(e,new s(2))},Complex:function(e){throw new Error(l)},"Complex, number":function(e,t){throw new Error(l)},"BigNumber, BigNumber":p,"Array | Matrix":function(e){return this(e,2)},"SparseMatrix, SparseMatrix":function(e,t){if(1===t.density())return a(e,t,this);throw new Error("Root must be non-zero")},"SparseMatrix, DenseMatrix":function(e,t){return i(t,e,this,!0)},"DenseMatrix, SparseMatrix":function(e,t){if(1===t.density())return n(e,t,this,!1);throw new Error("Root must be non-zero")},"DenseMatrix, DenseMatrix":function(e,t){return u(e,t,this)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"SparseMatrix, number | BigNumber":function(e,t){return o(e,t,this,!1)},"DenseMatrix, number | BigNumber":function(e,t){return c(e,t,this,!1)},"number | BigNumber, SparseMatrix":function(e,t){if(1===t.density())return o(t,e,this,!0);throw new Error("Root must be non-zero")},"number | BigNumber, DenseMatrix":function(e,t){return c(t,e,this,!0)},"Array, number | BigNumber":function(e,t){return this(r(e),t).valueOf()},"number | BigNumber, Array":function(e,t){return this(e,r(t)).valueOf()}});function p(e,t){var r=s.precision,n=s.clone({precision:r+2}),i=new s(0),a=new n(1),o=t.isNegative();if((t=o?t.neg():t).isZero())throw new Error("Root must be non-zero");if(e.isNegative()&&!t.abs().mod(2).equals(1))throw new Error("Root must be odd when a is negative.");if(e.isZero())return o?new n(1/0):0;if(!e.isFinite())return o?i:e;t=e.abs().pow(a.div(t)),t=e.isNeg()?t.neg():t;return new s((o?a.div(t):t).toPrecision(r))}}),name$3x="sign",dependencies$3x=["typed","BigNumber","Fraction","complex"],createSign=factory(name$3x,dependencies$3x,e=>{var{typed:e,BigNumber:t,complex:r,Fraction:n}=e;return e(name$3x,{number:signNumber,Complex:function(e){return 0===e.im?r(signNumber(e.re)):e.sign()},BigNumber:function(e){return new t(e.cmp(0))},Fraction:function(e){return new n(e.s,1)},"Array | Matrix":function(e){return deepMap(e,this)},Unit:function(e){return this(e.value)}})}),name$3w="sqrt",dependencies$3w=["config","typed","Complex"],createSqrt=factory(name$3w,dependencies$3w,e=>{var{config:t,typed:e,Complex:r}=e;return e("sqrt",{number:n,Complex:function(e){return e.sqrt()},BigNumber:function(e){return!e.isNegative()||t.predictable?e.sqrt():n(e.toNumber())},"Array | Matrix":function(e){return deepMap(e,this)},Unit:function(e){return e.pow(.5)}});function n(e){return isNaN(e)?NaN:0<=e||t.predictable?Math.sqrt(e):new r(e,0).sqrt()}}),name$3v="square",dependencies$3v=["typed"],createSquare=factory(name$3v,dependencies$3v,e=>{var e=e["typed"];return e(name$3v,{number:squareNumber,Complex:function(e){return e.mul(e)},BigNumber:function(e){return e.times(e)},Fraction:function(e){return e.mul(e)},"Array | Matrix":function(e){return deepMap(e,this)},Unit:function(e){return e.pow(2)}})}),name$3u="subtract",dependencies$3u=["typed","matrix","equalScalar","addScalar","unaryMinus","DenseMatrix"],createSubtract=factory(name$3u,dependencies$3u,e=>{var{typed:t,matrix:r,equalScalar:n,addScalar:i,unaryMinus:a,DenseMatrix:e}=e,o=createAlgorithm01({typed:t}),s=createAlgorithm03({typed:t}),u=createAlgorithm05({typed:t,equalScalar:n}),c=createAlgorithm10({typed:t,DenseMatrix:e}),l=createAlgorithm13({typed:t}),p=createAlgorithm14({typed:t});return t(name$3u,{"number, number":function(e,t){return e-t},"Complex, Complex":function(e,t){return e.sub(t)},"BigNumber, BigNumber":function(e,t){return e.minus(t)},"Fraction, Fraction":function(e,t){return e.sub(t)},"Unit, Unit":function(e,t){if(null===e.value)throw new Error("Parameter x contains a unit with undefined value");if(null===t.value)throw new Error("Parameter y contains a unit with undefined value");if(!e.equalBase(t))throw new Error("Units do not match");e=e.clone();return e.value=this(e.value,t.value),e.fixPrefix=!1,e},"SparseMatrix, SparseMatrix":function(e,t){return checkEqualDimensions(e,t),u(e,t,this)},"SparseMatrix, DenseMatrix":function(e,t){return checkEqualDimensions(e,t),s(t,e,this,!0)},"DenseMatrix, SparseMatrix":function(e,t){return checkEqualDimensions(e,t),o(e,t,this,!1)},"DenseMatrix, DenseMatrix":function(e,t){return checkEqualDimensions(e,t),l(e,t,this)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"SparseMatrix, any":function(e,t){return c(e,a(t),i)},"DenseMatrix, any":function(e,t){return p(e,t,this)},"any, SparseMatrix":function(e,t){return c(t,e,this,!0)},"any, DenseMatrix":function(e,t){return p(t,e,this,!0)},"Array, any":function(e,t){return p(r(e),t,this,!1).valueOf()},"any, Array":function(e,t){return p(r(t),e,this,!0).valueOf()}})});function checkEqualDimensions(e,t){e=e.size(),t=t.size();if(e.length!==t.length)throw new DimensionError(e.length,t.length)}var name$3t="xgcd",dependencies$3t=["typed","config","matrix","BigNumber"],createXgcd=factory(name$3t,dependencies$3t,e=>{var{typed:e,config:p,matrix:m,BigNumber:f}=e;return e(name$3t,{"number, number":function(e,t){t=xgcdNumber(e,t);return"Array"===p.matrix?t:m(t)},"BigNumber, BigNumber":function(e,t){var r,n,i,a=new f(0),o=new f(1),s=a,u=o,c=o,l=a;if(!e.isInt()||!t.isInt())throw new Error("Parameters in function xgcd must be integer numbers");for(;!t.isZero();)n=e.div(t).floor(),i=e.mod(t),r=s,s=u.minus(n.times(s)),u=r,r=c,c=l.minus(n.times(c)),l=r,e=t,t=i;a=e.lt(a)?[e.neg(),u.neg(),l.neg()]:[e,e.isZero()?0:u,l];return"Array"===p.matrix?a:m(a)}})}),name$3s="algorithm09",dependencies$3s=["typed","equalScalar"],createAlgorithm09=factory(name$3s,dependencies$3s,e=>{var{typed:C,equalScalar:T}=e;return function(e,t,r){var n=e._values,i=e._index,a=e._ptr,o=e._size,s=e._datatype,u=t._values,c=t._index,l=t._ptr,p=t._size,t=t._datatype;if(o.length!==p.length)throw new DimensionError(o.length,p.length);if(o[0]!==p[0]||o[1]!==p[1])throw new RangeError("Dimension mismatch. Matrix A ("+o+") must match Matrix B ("+p+")");var m,p=o[0],f=o[1],d=T,h=0,y=r;"string"==typeof s&&s===t&&(d=C.find(T,[m=s,m]),h=C.convert(0,m),y=C.find(r,[m,m]));for(var g,x,v,b=n&&u?[]:void 0,w=[],N=[],M=b?[]:void 0,S=[],$=0;$<f;$++){N[$]=w.length;var E=$+1;if(M)for(x=l[$],v=l[$+1],g=x;g<v;g++)S[O=c[g]]=E,M[O]=u[g];for(x=a[$],v=a[$+1],g=x;g<v;g++){var A,O=i[g];M?(A=S[O]===E?M[O]:h,d(A=y(n[g],A),h)||(w.push(O),b.push(A))):w.push(O)}}return N[f]=w.length,e.createSparseMatrix({values:b,index:w,ptr:N,size:[p,f],datatype:m})}}),name$3r="dotMultiply",dependencies$3r=["typed","matrix","equalScalar","multiplyScalar"],createDotMultiply=factory(name$3r,dependencies$3r,e=>{var{typed:t,matrix:r,equalScalar:e,multiplyScalar:n}=e,i=createAlgorithm02({typed:t,equalScalar:e}),a=createAlgorithm09({typed:t,equalScalar:e}),o=createAlgorithm11({typed:t,equalScalar:e}),s=createAlgorithm13({typed:t}),u=createAlgorithm14({typed:t});return t(name$3r,{"any, any":n,"SparseMatrix, SparseMatrix":function(e,t){return a(e,t,n,!1)},"SparseMatrix, DenseMatrix":function(e,t){return i(t,e,n,!0)},"DenseMatrix, SparseMatrix":function(e,t){return i(e,t,n,!1)},"DenseMatrix, DenseMatrix":function(e,t){return s(e,t,n)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"SparseMatrix, any":function(e,t){return o(e,t,n,!1)},"DenseMatrix, any":function(e,t){return u(e,t,n,!1)},"any, SparseMatrix":function(e,t){return o(t,e,n,!0)},"any, DenseMatrix":function(e,t){return u(t,e,n,!0)},"Array, any":function(e,t){return u(r(e),t,n,!1).valueOf()},"any, Array":function(e,t){return u(r(t),e,n,!0).valueOf()}})});function bitAndBigNumber(e,t){if(e.isFinite()&&!e.isInteger()||t.isFinite()&&!t.isInteger())throw new Error("Integers expected in function bitAnd");var r=e.constructor;if(e.isNaN()||t.isNaN())return new r(NaN);if(e.isZero()||t.eq(-1)||e.eq(t))return e;if(t.isZero()||e.eq(-1))return t;if(!e.isFinite()||!t.isFinite()){if(!e.isFinite()&&!t.isFinite())return e.isNegative()===t.isNegative()?e:new r(0);if(!e.isFinite())return t.isNegative()?e:e.isNegative()?new r(0):t;if(!t.isFinite())return e.isNegative()?t:t.isNegative()?new r(0):e}return bitwise(e,t,function(e,t){return e&t})}function bitNotBigNumber(e){if(e.isFinite()&&!e.isInteger())throw new Error("Integer expected in function bitNot");var t=e.constructor,r=t.precision;t.config({precision:1e9});e=e.plus(new t(1));return e.s=-e.s||null,t.config({precision:r}),e}function bitOrBigNumber(e,t){if(e.isFinite()&&!e.isInteger()||t.isFinite()&&!t.isInteger())throw new Error("Integers expected in function bitOr");var r=e.constructor;if(e.isNaN()||t.isNaN())return new r(NaN);r=new r(-1);return e.isZero()||t.eq(r)||e.eq(t)?t:t.isZero()||e.eq(r)?e:e.isFinite()&&t.isFinite()?bitwise(e,t,function(e,t){return e|t}):!e.isFinite()&&!e.isNegative()&&t.isNegative()||e.isNegative()&&!t.isNegative()&&!t.isFinite()?r:e.isNegative()&&t.isNegative()?e.isFinite()?e:t:e.isFinite()?t:e}function bitwise(e,t,r){var n,i,a=e.constructor,o=+(e.s<0),s=+(t.s<0);if(o)for(var u=decCoefficientToBinaryString(bitNotBigNumber(e)),c=0;c<u.length;++c)u[c]^=1;else u=decCoefficientToBinaryString(e);if(s)for(var l=decCoefficientToBinaryString(bitNotBigNumber(t)),p=0;p<l.length;++p)l[p]^=1;else l=decCoefficientToBinaryString(t);var m=u.length<=l.length?(n=u,i=l,o):(n=l,i=u,s),f=n.length,d=i.length,h=1^r(o,s),y=new a(1^h),g=new a(1),x=new a(2),s=a.precision;for(a.config({precision:1e9});0<f;)r(n[--f],i[--d])===h&&(y=y.plus(g)),g=g.times(x);for(;0<d;)r(m,i[--d])===h&&(y=y.plus(g)),g=g.times(x);return a.config({precision:s}),0==h&&(y.s=-y.s),y}function decCoefficientToBinaryString(e){for(var t=e.d,r=t[0]+"",n=1;n<t.length;++n){for(var i=t[n]+"",a=7-i.length;a--;)i="0"+i;r+=i}for(var o=r.length;"0"===r.charAt(o);)o--;var s=e.e,u=r.slice(0,o+1||1),e=u.length;if(0<s)if(++s>e)for(s-=e;s--;)u+="0";else s<e&&(u=u.slice(0,s)+"."+u.slice(s));for(var c=[0],l=0;l<u.length;){for(var p=c.length;p--;)c[p]*=10;c[0]+=parseInt(u.charAt(l++));for(var m=0;m<c.length;++m)1<c[m]&&(null!==c[m+1]&&void 0!==c[m+1]||(c[m+1]=0),c[m+1]+=c[m]>>1,c[m]&=1)}return c.reverse()}function bitXor$1(e,t){if(e.isFinite()&&!e.isInteger()||t.isFinite()&&!t.isInteger())throw new Error("Integers expected in function bitXor");var r=e.constructor;if(e.isNaN()||t.isNaN())return new r(NaN);if(e.isZero())return t;if(t.isZero())return e;if(e.eq(t))return new r(0);var n=new r(-1);return e.eq(n)?bitNotBigNumber(t):t.eq(n)?bitNotBigNumber(e):e.isFinite()&&t.isFinite()?bitwise(e,t,function(e,t){return e^t}):e.isFinite()||t.isFinite()?new r(e.isNegative()===t.isNegative()?1/0:-1/0):n}function leftShiftBigNumber(e,t){if(e.isFinite()&&!e.isInteger()||t.isFinite()&&!t.isInteger())throw new Error("Integers expected in function leftShift");var r=e.constructor;return e.isNaN()||t.isNaN()||t.isNegative()&&!t.isZero()?new r(NaN):e.isZero()||t.isZero()?e:e.isFinite()||t.isFinite()?t.lt(55)?e.times(Math.pow(2,t.toNumber())+""):e.times(new r(2).pow(t)):new r(NaN)}function rightArithShiftBigNumber(e,t){if(e.isFinite()&&!e.isInteger()||t.isFinite()&&!t.isInteger())throw new Error("Integers expected in function rightArithShift");var r=e.constructor;return e.isNaN()||t.isNaN()||t.isNegative()&&!t.isZero()?new r(NaN):e.isZero()||t.isZero()?e:t.isFinite()?(t.lt(55)?e.div(Math.pow(2,t.toNumber())+""):e.div(new r(2).pow(t))).floor():e.isNegative()?new r(-1):e.isFinite()?new r(0):new r(NaN)}var name$3q="bitAnd",dependencies$3q=["typed","matrix","equalScalar"],createBitAnd=factory(name$3q,dependencies$3q,e=>{var{typed:t,matrix:r,equalScalar:e}=e,n=createAlgorithm02({typed:t,equalScalar:e}),i=createAlgorithm06({typed:t,equalScalar:e}),a=createAlgorithm11({typed:t,equalScalar:e}),o=createAlgorithm13({typed:t}),s=createAlgorithm14({typed:t});return t(name$3q,{"number, number":bitAndNumber,"BigNumber, BigNumber":bitAndBigNumber,"SparseMatrix, SparseMatrix":function(e,t){return i(e,t,this,!1)},"SparseMatrix, DenseMatrix":function(e,t){return n(t,e,this,!0)},"DenseMatrix, SparseMatrix":function(e,t){return n(e,t,this,!1)},"DenseMatrix, DenseMatrix":function(e,t){return o(e,t,this)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"SparseMatrix, any":function(e,t){return a(e,t,this,!1)},"DenseMatrix, any":function(e,t){return s(e,t,this,!1)},"any, SparseMatrix":function(e,t){return a(t,e,this,!0)},"any, DenseMatrix":function(e,t){return s(t,e,this,!0)},"Array, any":function(e,t){return s(r(e),t,this,!1).valueOf()},"any, Array":function(e,t){return s(r(t),e,this,!0).valueOf()}})}),name$3p="bitNot",dependencies$3p=["typed"],createBitNot=factory(name$3p,dependencies$3p,e=>{var e=e["typed"];return e(name$3p,{number:bitNotNumber,BigNumber:bitNotBigNumber,"Array | Matrix":function(e){return deepMap(e,this)}})}),name$3o="bitOr",dependencies$3o=["typed","matrix","equalScalar","DenseMatrix"],createBitOr=factory(name$3o,dependencies$3o,e=>{var{typed:t,matrix:r,equalScalar:n,DenseMatrix:e}=e,i=createAlgorithm01({typed:t}),a=createAlgorithm04({typed:t,equalScalar:n}),o=createAlgorithm10({typed:t,DenseMatrix:e}),s=createAlgorithm13({typed:t}),u=createAlgorithm14({typed:t});return t(name$3o,{"number, number":bitOrNumber,"BigNumber, BigNumber":bitOrBigNumber,"SparseMatrix, SparseMatrix":function(e,t){return a(e,t,this)},"SparseMatrix, DenseMatrix":function(e,t){return i(t,e,this,!0)},"DenseMatrix, SparseMatrix":function(e,t){return i(e,t,this,!1)},"DenseMatrix, DenseMatrix":function(e,t){return s(e,t,this)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"SparseMatrix, any":function(e,t){return o(e,t,this,!1)},"DenseMatrix, any":function(e,t){return u(e,t,this,!1)},"any, SparseMatrix":function(e,t){return o(t,e,this,!0)},"any, DenseMatrix":function(e,t){return u(t,e,this,!0)},"Array, any":function(e,t){return u(r(e),t,this,!1).valueOf()},"any, Array":function(e,t){return u(r(t),e,this,!0).valueOf()}})}),name$3n="algorithm07",dependencies$3n=["typed","DenseMatrix"],createAlgorithm07=factory(name$3n,dependencies$3n,e=>{var{typed:b,DenseMatrix:w}=e;return function(e,t,r){var n=e._size,i=e._datatype,a=t._size,o=t._datatype;if(n.length!==a.length)throw new DimensionError(n.length,a.length);if(n[0]!==a[0]||n[1]!==a[1])throw new RangeError("Dimension mismatch. Matrix A ("+n+") must match Matrix B ("+a+")");var s,u=n[0],c=n[1],l=0,p=r;"string"==typeof i&&i===o&&(l=b.convert(0,s=i),p=b.find(r,[s,s]));for(var m=[],f=0;f<u;f++)m[f]=[];for(var d=[],h=[],y=[],g=[],x=0;x<c;x++){var v=x+1;for(N(e,x,y,d,v),N(t,x,g,h,v),f=0;f<u;f++)m[f][x]=p(y[f]===v?d[f]:l,g[f]===v?h[f]:l)}return new w({data:m,size:[u,c],datatype:s})};function N(e,t,r,n,i){for(var a=e._values,o=e._index,e=e._ptr,s=e[t],u=e[t+1];s<u;s++){var c=o[s];r[c]=i,n[c]=a[s]}}}),name$3m="bitXor",dependencies$3m=["typed","matrix","DenseMatrix"],createBitXor=factory(name$3m,dependencies$3m,e=>{var{typed:t,matrix:r,DenseMatrix:e}=e,n=createAlgorithm03({typed:t}),i=createAlgorithm07({typed:t,DenseMatrix:e}),a=createAlgorithm12({typed:t,DenseMatrix:e}),o=createAlgorithm13({typed:t}),s=createAlgorithm14({typed:t});return t(name$3m,{"number, number":bitXorNumber,"BigNumber, BigNumber":bitXor$1,"SparseMatrix, SparseMatrix":function(e,t){return i(e,t,this)},"SparseMatrix, DenseMatrix":function(e,t){return n(t,e,this,!0)},"DenseMatrix, SparseMatrix":function(e,t){return n(e,t,this,!1)},"DenseMatrix, DenseMatrix":function(e,t){return o(e,t,this)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"SparseMatrix, any":function(e,t){return a(e,t,this,!1)},"DenseMatrix, any":function(e,t){return s(e,t,this,!1)},"any, SparseMatrix":function(e,t){return a(t,e,this,!0)},"any, DenseMatrix":function(e,t){return s(t,e,this,!0)},"Array, any":function(e,t){return s(r(e),t,this,!1).valueOf()},"any, Array":function(e,t){return s(r(t),e,this,!0).valueOf()}})}),name$3l="arg",dependencies$3l=["typed"],createArg=factory(name$3l,dependencies$3l,e=>{var e=e["typed"];return e(name$3l,{number:function(e){return Math.atan2(0,e)},BigNumber:function(e){return e.constructor.atan2(0,e)},Complex:function(e){return e.arg()},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$3k="conj",dependencies$3k=["typed"],createConj=factory(name$3k,dependencies$3k,e=>{var e=e["typed"];return e(name$3k,{number:function(e){return e},BigNumber:function(e){return e},Complex:function(e){return e.conjugate()},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$3j="im",dependencies$3j=["typed"],createIm=factory(name$3j,dependencies$3j,e=>{var e=e["typed"];return e(name$3j,{number:function(e){return 0},BigNumber:function(e){return e.mul(0)},Fraction:function(e){return e.mul(0)},Complex:function(e){return e.im},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$3i="re",dependencies$3i=["typed"],createRe=factory(name$3i,dependencies$3i,e=>{var e=e["typed"];return e(name$3i,{number:function(e){return e},BigNumber:function(e){return e},Fraction:function(e){return e},Complex:function(e){return e.re},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$3h="not",dependencies$3h=["typed"],createNot=factory(name$3h,dependencies$3h,e=>{var e=e["typed"];return e(name$3h,{number:notNumber,Complex:function(e){return 0===e.re&&0===e.im},BigNumber:function(e){return e.isZero()||e.isNaN()},Unit:function(e){return null===e.value||this(e.value)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$3g="or",dependencies$3g=["typed","matrix","equalScalar","DenseMatrix"],createOr=factory(name$3g,dependencies$3g,e=>{var{typed:t,matrix:r,equalScalar:n,DenseMatrix:e}=e,i=createAlgorithm03({typed:t}),a=createAlgorithm05({typed:t,equalScalar:n}),o=createAlgorithm12({typed:t,DenseMatrix:e}),s=createAlgorithm13({typed:t}),u=createAlgorithm14({typed:t});return t(name$3g,{"number, number":orNumber,"Complex, Complex":function(e,t){return 0!==e.re||0!==e.im||0!==t.re||0!==t.im},"BigNumber, BigNumber":function(e,t){return!e.isZero()&&!e.isNaN()||!t.isZero()&&!t.isNaN()},"Unit, Unit":function(e,t){return this(e.value||0,t.value||0)},"SparseMatrix, SparseMatrix":function(e,t){return a(e,t,this)},"SparseMatrix, DenseMatrix":function(e,t){return i(t,e,this,!0)},"DenseMatrix, SparseMatrix":function(e,t){return i(e,t,this,!1)},"DenseMatrix, DenseMatrix":function(e,t){return s(e,t,this)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"SparseMatrix, any":function(e,t){return o(e,t,this,!1)},"DenseMatrix, any":function(e,t){return u(e,t,this,!1)},"any, SparseMatrix":function(e,t){return o(t,e,this,!0)},"any, DenseMatrix":function(e,t){return u(t,e,this,!0)},"Array, any":function(e,t){return u(r(e),t,this,!1).valueOf()},"any, Array":function(e,t){return u(r(t),e,this,!0).valueOf()}})}),name$3f="xor",dependencies$3f=["typed","matrix","DenseMatrix"],createXor=factory(name$3f,dependencies$3f,e=>{var{typed:t,matrix:r,DenseMatrix:e}=e,n=createAlgorithm03({typed:t}),i=createAlgorithm07({typed:t,DenseMatrix:e}),a=createAlgorithm12({typed:t,DenseMatrix:e}),o=createAlgorithm13({typed:t}),s=createAlgorithm14({typed:t});return t(name$3f,{"number, number":xorNumber,"Complex, Complex":function(e,t){return(0!==e.re||0!==e.im)!=(0!==t.re||0!==t.im)},"BigNumber, BigNumber":function(e,t){return(!e.isZero()&&!e.isNaN())!=(!t.isZero()&&!t.isNaN())},"Unit, Unit":function(e,t){return this(e.value||0,t.value||0)},"SparseMatrix, SparseMatrix":function(e,t){return i(e,t,this)},"SparseMatrix, DenseMatrix":function(e,t){return n(t,e,this,!0)},"DenseMatrix, SparseMatrix":function(e,t){return n(e,t,this,!1)},"DenseMatrix, DenseMatrix":function(e,t){return o(e,t,this)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"SparseMatrix, any":function(e,t){return a(e,t,this,!1)},"DenseMatrix, any":function(e,t){return s(e,t,this,!1)},"any, SparseMatrix":function(e,t){return a(t,e,this,!0)},"any, DenseMatrix":function(e,t){return s(t,e,this,!0)},"Array, any":function(e,t){return s(r(e),t,this,!1).valueOf()},"any, Array":function(e,t){return s(r(t),e,this,!0).valueOf()}})}),name$3e="concat",dependencies$3e=["typed","matrix","isInteger"],createConcat=factory(name$3e,dependencies$3e,e=>{var{typed:e,matrix:l,isInteger:p}=e;return e(name$3e,{"...Array | Matrix | number | BigNumber":function(e){for(var t,r=e.length,n=-1,i=!1,a=[],o=0;o<r;o++){var s=e[o];if(isMatrix(s)&&(i=!0),isNumber(s)||isBigNumber(s)){if(o!==r-1)throw new Error("Dimension must be specified as last argument");if(t=n,n=s.valueOf(),!p(n))throw new TypeError("Integer number expected for dimension");if(n<0||0<o&&t<n)throw new IndexError(n,t+1)}else{var u=clone$1(s).valueOf(),s=arraySize(u);if(a[o]=u,t=n,n=s.length-1,0<o&&n!==t)throw new DimensionError(t+1,n+1)}}if(0===a.length)throw new SyntaxError("At least one matrix expected");for(var c=a.shift();a.length;)c=_concat(c,a.shift(),n,0);return i?l(c):c},"...string":function(e){return e.join("")}})});function _concat(e,t,r,n){if(n<r){if(e.length!==t.length)throw new DimensionError(e.length,t.length);for(var i=[],a=0;a<e.length;a++)i[a]=_concat(e[a],t[a],r,n+1);return i}return e.concat(t)}var name$3d="column",dependencies$3d=["typed","Index","matrix","range"],createColumn=factory(name$3d,dependencies$3d,e=>{var{typed:e,Index:n,matrix:r,range:i}=e;return e(name$3d,{"Matrix, number":a,"Array, number":function(e,t){return a(r(clone$1(e)),t).valueOf()}});function a(e,t){if(2!==e.size().length)throw new Error("Only two dimensional matrix is supported");validateIndex(t,e.size()[1]);var r=i(0,e.size()[0]),t=new n(r,t);return e.subset(t)}}),name$3c="count",dependencies$3c=["typed","size","prod"],createCount=factory(name$3c,dependencies$3c,e=>{var{typed:e,size:t,prod:r}=e;return e(name$3c,{string:function(e){return e.length},"Matrix | Array":function(e){return r(t(e))}})}),name$3b="cross",dependencies$3b=["typed","matrix","subtract","multiply"],createCross=factory(name$3b,dependencies$3b,e=>{var{typed:e,matrix:r,subtract:a,multiply:o}=e;return e(name$3b,{"Matrix, Matrix":function(e,t){return r(n(e.toArray(),t.toArray()))},"Matrix, Array":function(e,t){return r(n(e.toArray(),t))},"Array, Matrix":function(e,t){return r(n(e,t.toArray()))},"Array, Array":n});function n(e,t){var r=Math.max(arraySize(e).length,arraySize(t).length);e=squeeze$1(e),t=squeeze$1(t);var n=arraySize(e),i=arraySize(t);if(1!==n.length||1!==i.length||3!==n[0]||3!==i[0])throw new RangeError("Vectors with length 3 expected (Size A = ["+n.join(", ")+"], B = ["+i.join(", ")+"])");t=[a(o(e[1],t[2]),o(e[2],t[1])),a(o(e[2],t[0]),o(e[0],t[2])),a(o(e[0],t[1]),o(e[1],t[0]))];return 1<r?[t]:t}}),name$3a="diag",dependencies$3a=["typed","matrix","DenseMatrix","SparseMatrix"],createDiag=factory(name$3a,dependencies$3a,e=>{var{typed:e,matrix:c,DenseMatrix:o,SparseMatrix:s}=e;return e(name$3a,{Array:function(e){return n(e,0,arraySize(e),null)},"Array, number":function(e,t){return n(e,t,arraySize(e),null)},"Array, BigNumber":function(e,t){return n(e,t.toNumber(),arraySize(e),null)},"Array, string":function(e,t){return n(e,0,arraySize(e),t)},"Array, number, string":function(e,t,r){return n(e,t,arraySize(e),r)},"Array, BigNumber, string":function(e,t,r){return n(e,t.toNumber(),arraySize(e),r)},Matrix:function(e){return n(e,0,e.size(),e.storage())},"Matrix, number":function(e,t){return n(e,t,e.size(),e.storage())},"Matrix, BigNumber":function(e,t){return n(e,t.toNumber(),e.size(),e.storage())},"Matrix, string":function(e,t){return n(e,0,e.size(),t)},"Matrix, number, string":function(e,t,r){return n(e,t,e.size(),r)},"Matrix, BigNumber, string":function(e,t,r){return n(e,t.toNumber(),e.size(),r)}});function n(e,t,r,n){if(!isInteger$1(t))throw new TypeError("Second parameter in function diag must be an integer");var i=0<t?t:0,a=t<0?-t:0;switch(r.length){case 1:return function(e,t,r,n,i,a){a=[n+i,n+a];if(r&&"sparse"!==r&&"dense"!==r)throw new TypeError("Unknown matrix type ".concat(r,'"'));t=("sparse"===r?s:o).diagonal(a,e,t);return null!==r?t:t.valueOf()}(e,t,n,r[0],a,i);case 2:return function(e,t,r,n,i,a){if(isMatrix(e)){t=e.diagonal(t);return null!==r?r!==t.storage()?c(t,r):t:t.valueOf()}for(var o=Math.min(n[0]-i,n[1]-a),s=[],u=0;u<o;u++)s[u]=e[u+i][u+a];return null!==r?c(s):s}(e,t,n,r,a,i)}throw new RangeError("Matrix for function diag must be 2 dimensional")}});function lruQueue(n){function i(e){var t=u[e];if(t&&(delete s[t],delete u[e],--a,o===t)){if(!a)return c=0,void(o=1);for(;!hasOwnProperty.call(s,++o););}}var a=0,o=1,s=Object.create(null),u=Object.create(null),c=0;return n=Math.abs(n),{hit:function(e){var t=u[e],r=++c;if(s[r]=e,u[e]=r,!t)return++a<=n?void 0:(e=s[o],i(e),e);if(delete s[t],o===t)for(;!hasOwnProperty.call(s,++o););},delete:i,clear:function(){a=c=0,o=1,s=Object.create(null),u=Object.create(null)}}}function memoize(a){var{hasher:o,limit:s}=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},s=null==s?Number.POSITIVE_INFINITY:s,o=null==o?JSON.stringify:o;return function e(){"object"!=typeof e.cache&&(e.cache={values:new Map,lru:lruQueue(s||Number.POSITIVE_INFINITY)});for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var n=o(t);if(e.cache.values.has(n))return e.cache.lru.hit(n),e.cache.values.get(n);var i=a.apply(a,t);return e.cache.values.set(n,i),e.cache.values.delete(e.cache.lru.hit(n)),i}}function maxArgumentCount(e){return Object.keys(e.signatures||{}).reduce(function(e,t){t=(t.match(/,/g)||[]).length+1;return Math.max(e,t)},-1)}var name$39="filter",dependencies$39=["typed"],createFilter=factory(name$39,dependencies$39,e=>{var e=e["typed"];return e("filter",{"Array, function":_filterCallback,"Matrix, function":function(e,t){return e.create(_filterCallback(e.toArray(),t))},"Array, RegExp":filterRegExp,"Matrix, RegExp":function(e,t){return e.create(filterRegExp(e.toArray(),t))}})});function _filterCallback(e,n){var i=maxArgumentCount(n);return filter$1(e,function(e,t,r){return 1===i?n(e):2===i?n(e,[t]):n(e,[t],r)})}var name$38="flatten",dependencies$38=["typed","matrix"],createFlatten=factory(name$38,dependencies$38,e=>{var{typed:e,matrix:t}=e;return e(name$38,{Array:function(e){return flatten$1(clone$1(e))},Matrix:function(e){e=flatten$1(clone$1(e.toArray()));return t(e)}})}),name$37="forEach",dependencies$37=["typed"],createForEach=factory(name$37,dependencies$37,e=>{var e=e["typed"];return e(name$37,{"Array, function":_forEach,"Matrix, function":function(e,t){return e.forEach(t)}})});function _forEach(t,i){var a=maxArgumentCount(i);(function r(e,n){Array.isArray(e)?forEach$1(e,function(e,t){r(e,n.concat(t))}):1===a?i(e):2===a?i(e,n):i(e,n,t)})(t,[])}var name$36="getMatrixDataType",dependencies$36=["typed"],createGetMatrixDataType=factory(name$36,dependencies$36,e=>{var e=e["typed"];return e(name$36,{Array:function(e){return getArrayDataType(e,typeOf$1)},Matrix:function(e){return e.getDataType()}})}),name$35="identity",dependencies$35=["typed","config","matrix","BigNumber","DenseMatrix","SparseMatrix"],createIdentity=factory(name$35,dependencies$35,e=>{var{typed:e,config:r,matrix:n,BigNumber:c,DenseMatrix:l,SparseMatrix:p}=e;return e(name$35,{"":function(){return"Matrix"===r.matrix?n([]):[]},string:function(e){return n(e)},"number | BigNumber":function(e){return a(e,e,"Matrix"===r.matrix?"dense":void 0)},"number | BigNumber, string":function(e,t){return a(e,e,t)},"number | BigNumber, number | BigNumber":function(e,t){return a(e,t,"Matrix"===r.matrix?"dense":void 0)},"number | BigNumber, number | BigNumber, string":a,Array:function(e){return i(e)},"Array, string":i,Matrix:function(e){return i(e.valueOf(),e.storage())},"Matrix, string":function(e,t){return i(e.valueOf(),t)}});function i(e,t){switch(e.length){case 0:return t?n(t):[];case 1:return a(e[0],e[0],t);case 2:return a(e[0],e[1],t);default:throw new Error("Vector containing two values expected")}}function a(e,t,r){var n=isBigNumber(e)||isBigNumber(t)?c:null;if(isBigNumber(e)&&(e=e.toNumber()),isBigNumber(t)&&(t=t.toNumber()),!isInteger$1(e)||e<1)throw new Error("Parameters in function identity must be positive integers");if(!isInteger$1(t)||t<1)throw new Error("Parameters in function identity must be positive integers");var i=n?new c(1):1,a=n?new n(0):0,n=[e,t];if(r){if("sparse"===r)return p.diagonal(n,i,0,a);if("dense"===r)return l.diagonal(n,i,0,a);throw new TypeError('Unknown matrix type "'.concat(r,'"'))}for(var o=resize$1([],n,a),s=e<t?e:t,u=0;u<s;u++)o[u][u]=i;return o}}),name$34="kron",dependencies$34=["typed","matrix","multiplyScalar"],createKron=factory(name$34,dependencies$34,e=>{var{typed:e,matrix:r,multiplyScalar:a}=e;return e(name$34,{"Matrix, Matrix":function(e,t){return r(n(e.toArray(),t.toArray()))},"Matrix, Array":function(e,t){return r(n(e.toArray(),t))},"Array, Matrix":function(e,t){return r(n(e,t.toArray()))},"Array, Array":n});function n(e,r){if(1===arraySize(e).length&&(e=[e]),1===arraySize(r).length&&(r=[r]),2<arraySize(e).length||2<arraySize(r).length)throw new RangeError("Vectors with dimensions greater then 2 are not supported expected (Size x = "+JSON.stringify(e.length)+", y = "+JSON.stringify(r.length)+")");var n=[],i=[];return e.map(function(t){return r.map(function(e){return i=[],n.push(i),t.map(function(t){return e.map(function(e){return i.push(a(t,e))})})})})&&n}}),name$33="map",dependencies$33=["typed"],createMap=factory(name$33,dependencies$33,e=>{var e=e["typed"];return e(name$33,{"Array, function":_map$1,"Matrix, function":function(e,t){return e.map(t)}})});function _map$1(t,i){var a=maxArgumentCount(i);return function r(e,n){return Array.isArray(e)?e.map(function(e,t){return r(e,n.concat(t))}):1===a?i(e):2===a?i(e,n):i(e,n,t)}(t,[])}var name$32="diff",dependencies$32=["typed","matrix","subtract","number"],createDiff=factory(name$32,dependencies$32,e=>{var{typed:e,matrix:r,subtract:i,number:n}=e;return e(name$32,{"Array | Matrix":function(e){return isMatrix(e)?r(o(e.toArray())):o(e)},"Array | Matrix, number":function(e,t){if(!isInteger$1(t))throw new RangeError("Dimension must be a whole number");return isMatrix(e)?r(a(e.toArray(),t)):a(e,t)},"Array | Matrix, BigNumber":function(e,t){return this(e,n(t))}});function a(e,t){if(isMatrix(e)&&(e=e.toArray()),!Array.isArray(e))throw RangeError("Array/Matrix does not have that many dimensions");if(0<t){var r=[];return e.forEach(e=>{r.push(a(e,t-1))}),r}if(0===t)return o(e);throw RangeError("Cannot have negative dimension")}function o(e){var t=[],r=e.length;if(r<2)return e;for(var n=1;n<r;n++)t.push(s(e[n-1],e[n]));return t}function s(e,t){isMatrix(e)&&(e=e.toArray()),isMatrix(t)&&(t=t.toArray());var r=Array.isArray(e),n=Array.isArray(t);if(r&&n)return function(e,t){if(e.length!==t.length)throw RangeError("Not all sub-arrays have the same length");for(var r=[],n=e.length,i=0;i<n;i++)r.push(s(e[i],t[i]));return r}(e,t);if(!r&&!n)return i(t,e);throw TypeError("Cannot calculate difference between 1 array and 1 non-array")}}),name$31="ones",dependencies$31=["typed","config","matrix","BigNumber"],createOnes=factory(name$31,dependencies$31,e=>{var{typed:e,config:r,matrix:a,BigNumber:o}=e;return e("ones",{"":function(){return"Array"===r.matrix?n([]):n([],"default")},"...number | BigNumber | string":function(e){if("string"!=typeof e[e.length-1])return"Array"===r.matrix?n(e):n(e,"default");var t=e.pop();return n(e,t)},Array:n,Matrix:function(e){var t=e.storage();return n(e.valueOf(),t)},"Array | Matrix, string":function(e,t){return n(e.valueOf(),t)}});function n(e,t){var n,r=(n=!1,e.forEach(function(e,t,r){isBigNumber(e)&&(n=!0,r[t]=e.toNumber())}),n)?new o(1):1;if(e.forEach(function(e){if("number"!=typeof e||!isInteger$1(e)||e<0)throw new Error("Parameters in function ones must be positive integers")}),t){var i=a(t);return 0<e.length?i.resize(e,r):i}i=[];return 0<e.length?resize$1(i,e,r):i}});function noBignumber(){throw new Error('No "bignumber" implementation available')}function noFraction(){throw new Error('No "fraction" implementation available')}function noMatrix(){throw new Error('No "matrix" implementation available')}var name$30="range",dependencies$30=["typed","config","?matrix","?bignumber","smaller","smallerEq","larger","largerEq"],createRange=factory(name$30,dependencies$30,e=>{var{typed:e,config:n,matrix:t,bignumber:o,smaller:s,smallerEq:u,larger:c,largerEq:l}=e;return e(name$30,{string:r,"string, boolean":r,"number, number":function(e,t){return i(a(e,t,1))},"number, number, number":function(e,t,r){return i(a(e,t,r))},"number, number, boolean":function(e,t,r){return i((r?p:a)(e,t,1))},"number, number, number, boolean":function(e,t,r,n){return i((n?p:a)(e,t,r))},"BigNumber, BigNumber":function(e,t){return i(m(e,t,new e.constructor(1)))},"BigNumber, BigNumber, BigNumber":function(e,t,r){return i(m(e,t,r))},"BigNumber, BigNumber, boolean":function(e,t,r){var n=e.constructor;return i((r?f:m)(e,t,new n(1)))},"BigNumber, BigNumber, BigNumber, boolean":function(e,t,r,n){return i((n?f:m)(e,t,r))}});function i(e){return"Matrix"===n.matrix?t?t(e):noMatrix():e}function r(e,t){var r=function(e){var t=e.split(":").map(function(e){return Number(e)});if(t.some(function(e){return isNaN(e)}))return null;switch(t.length){case 2:return{start:t[0],end:t[1],step:1};case 3:return{start:t[0],end:t[2],step:t[1]};default:return null}}(e);if(!r)throw new SyntaxError('String "'+e+'" is no valid range');return"BigNumber"===n.number?(void 0===o&&noBignumber(),i((t?f:m)(o(r.start),o(r.end),o(r.step)))):i((t?p:a)(r.start,r.end,r.step))}function a(e,t,r){var n=[],i=e;if(0<r)for(;s(i,t);)n.push(i),i+=r;else if(r<0)for(;c(i,t);)n.push(i),i+=r;return n}function p(e,t,r){var n=[],i=e;if(0<r)for(;u(i,t);)n.push(i),i+=r;else if(r<0)for(;l(i,t);)n.push(i),i+=r;return n}function m(e,t,r){var n=o(0),i=[],a=e;if(r.gt(n))for(;s(a,t);)i.push(a),a=a.plus(r);else if(r.lt(n))for(;c(a,t);)i.push(a),a=a.plus(r);return i}function f(e,t,r){var n=o(0),i=[],a=e;if(r.gt(n))for(;u(a,t);)i.push(a),a=a.plus(r);else if(r.lt(n))for(;l(a,t);)i.push(a),a=a.plus(r);return i}}),name$2$="reshape",dependencies$2$=["typed","isInteger","matrix"],createReshape=factory(name$2$,dependencies$2$,e=>{var{typed:e,isInteger:r}=e;return e(name$2$,{"Matrix, Array":function(e,t){return e.reshape(t)},"Array, Array":function(e,t){return t.forEach(function(e){if(!r(e))throw new TypeError("Invalid size for dimension: "+e)}),reshape$1(e,t)}})});function ArgumentsError(e,t,r,n){if(!(this instanceof ArgumentsError))throw new SyntaxError("Constructor must be called with the new operator");this.fn=e,this.count=t,this.min=r,this.max=n,this.message="Wrong number of arguments in function "+e+" ("+t+" provided, "+r+(null!=n?"-"+n:"")+" expected)",this.stack=(new Error).stack}ArgumentsError.prototype=new Error,ArgumentsError.prototype.constructor=Error,ArgumentsError.prototype.name="ArgumentsError",ArgumentsError.prototype.isArgumentsError=!0;var name$2_="resize",dependencies$2_=["config","matrix"],createResize=factory(name$2_,dependencies$2_,e=>{var{config:i,matrix:a}=e;return function(e,t,r){if(2!==arguments.length&&3!==arguments.length)throw new ArgumentsError("resize",arguments.length,2,3);if(isBigNumber((t=isMatrix(t)?t.valueOf():t)[0])&&(t=t.map(function(e){return isBigNumber(e)?e.toNumber():e})),isMatrix(e))return e.resize(t,r,!0);if("string"==typeof e)return function(e,t,r){if(void 0!==r){if("string"!=typeof r||1!==r.length)throw new TypeError("Single character expected as defaultValue")}else r=" ";if(1!==t.length)throw new DimensionError(t.length,1);var n=t[0];if("number"!=typeof n||!isInteger$1(n))throw new TypeError("Invalid size, must contain positive integers (size: "+format$1(t)+")");{if(e.length>n)return e.substring(0,n);if(e.length<n){for(var i=e,a=0,o=n-e.length;a<o;a++)i+=r;return i}return e}}(e,t,r);var n=!Array.isArray(e)&&"Array"!==i.matrix;if(0===t.length){for(;Array.isArray(e);)e=e[0];return clone$1(e)}r=resize$1(e=clone$1(e=!Array.isArray(e)?[e]:e),t,r);return n?a(r):r}}),name$2Z="rotate",dependencies$2Z=["typed","multiply","rotationMatrix"],createRotate=factory(name$2Z,dependencies$2Z,e=>{var{typed:e,multiply:n,rotationMatrix:i}=e;return e(name$2Z,{"Array , number | BigNumber | Complex | Unit":function(e,t){return a(e,2),n(i(t),e).toArray()},"Matrix , number | BigNumber | Complex | Unit":function(e,t){return a(e,2),n(i(t),e)},"Array, number | BigNumber | Complex | Unit, Array | Matrix":function(e,t,r){return a(e,3),n(i(t,r),e)},"Matrix, number | BigNumber | Complex | Unit, Array | Matrix":function(e,t,r){return a(e,3),n(i(t,r),e)}});function a(e,t){e=Array.isArray(e)?arraySize(e):e.size();if(2<e.length)throw new RangeError("Vector must be of dimensions 1x".concat(t));if(2===e.length&&1!==e[1])throw new RangeError("Vector must be of dimensions 1x".concat(t));if(e[0]!==t)throw new RangeError("Vector must be of dimensions 1x".concat(t))}}),name$2Y="rotationMatrix",dependencies$2Y=["typed","config","multiplyScalar","addScalar","unaryMinus","norm","matrix","BigNumber","DenseMatrix","SparseMatrix","cos","sin"],createRotationMatrix=factory(name$2Y,dependencies$2Y,e=>{var{typed:e,config:n,multiplyScalar:i,addScalar:c,unaryMinus:l,norm:p,BigNumber:m,matrix:a,DenseMatrix:r,SparseMatrix:o,cos:f,sin:d}=e;return e(name$2Y,{"":function(){return"Matrix"===n.matrix?a([]):[]},string:function(e){return a(e)},"number | BigNumber | Complex | Unit":function(e){return t(e,"Matrix"===n.matrix?"dense":void 0)},"number | BigNumber | Complex | Unit, string":t,"number | BigNumber | Complex | Unit, Array":function(e,t){t=a(t);return s(t),u(e,t,void 0)},"number | BigNumber | Complex | Unit, Matrix":function(e,t){s(t);var r=t.storage()||("Matrix"===n.matrix?"dense":void 0);return u(e,t,r)},"number | BigNumber | Complex | Unit, Array, string":function(e,t,r){t=a(t);return s(t),u(e,t,r)},"number | BigNumber | Complex | Unit, Matrix, string":function(e,t,r){return s(t),u(e,t,r)}});function t(e,t){var r=isBigNumber(e)?new m(-1):-1,n=f(e),e=d(e);return y([[n,i(r,e)],[e,n]],t)}function s(e){e=e.size();if(e.length<1||3!==e[0])throw new RangeError("Vector must be of dimensions 1x3")}function h(e){return e.reduce((e,t)=>i(e,t))}function y(e,t){if(t){if("sparse"===t)return new o(e);if("dense"===t)return new r(e);throw new TypeError('Unknown matrix type "'.concat(t,'"'))}return e}function u(e,t,r){var n=p(t);if(0===n)throw new RangeError("Rotation around zero vector");var i=isBigNumber(e)?m:null,a=i?new i(1):1,o=i?new i(-1):-1,s=i?new i(t.get([0])/n):t.get([0])/n,u=i?new i(t.get([1])/n):t.get([1])/n,t=i?new i(t.get([2])/n):t.get([2])/n,n=f(e),a=c(a,l(n)),e=d(e);return y([[c(n,h([s,s,a])),c(h([s,u,a]),h([o,t,e])),c(h([s,t,a]),h([u,e]))],[c(h([s,u,a]),h([t,e])),c(n,h([u,u,a])),c(h([u,t,a]),h([o,s,e]))],[c(h([s,t,a]),h([o,u,e])),c(h([u,t,a]),h([s,e])),c(n,h([t,t,a]))]],r)}}),name$2X="row",dependencies$2X=["typed","Index","matrix","range"],createRow=factory(name$2X,dependencies$2X,e=>{var{typed:e,Index:n,matrix:r,range:i}=e;return e(name$2X,{"Matrix, number":a,"Array, number":function(e,t){return a(r(clone$1(e)),t).valueOf()}});function a(e,t){if(2!==e.size().length)throw new Error("Only two dimensional matrix is supported");validateIndex(t,e.size()[0]);var r=i(0,e.size()[1]),r=new n(t,r);return e.subset(r)}}),name$2W="size",dependencies$2W=["typed","config","?matrix"],createSize=factory(name$2W,dependencies$2W,e=>{var{typed:e,config:t,matrix:r}=e;return e(name$2W,{Matrix:function(e){return e.create(e.size())},Array:arraySize,string:function(e){return"Array"===t.matrix?[e.length]:r([e.length])},"number | Complex | BigNumber | Unit | boolean | null":function(e){return"Array"===t.matrix?[]:r?r([]):noMatrix()}})}),name$2V="squeeze",dependencies$2V=["typed","matrix"],createSqueeze=factory(name$2V,dependencies$2V,e=>{var{typed:e,matrix:t}=e;return e(name$2V,{Array:function(e){return squeeze$1(clone$1(e))},Matrix:function(e){e=squeeze$1(e.toArray());return Array.isArray(e)?t(e):e},any:function(e){return clone$1(e)}})}),name$2U="subset",dependencies$2U=["typed","matrix"],createSubset=factory(name$2U,dependencies$2U,e=>{var{typed:e,matrix:i}=e;return e(name$2U,{"Array, Index":function(e,t){e=i(e).subset(t);return t.isScalar()?e:e.valueOf()},"Matrix, Index":function(e,t){return e.subset(t)},"Object, Index":_getObjectProperty,"string, Index":_getSubstring,"Array, Index, any":function(e,t,r){return i(clone$1(e)).subset(t,r,void 0).valueOf()},"Array, Index, any, any":function(e,t,r,n){return i(clone$1(e)).subset(t,r,n).valueOf()},"Matrix, Index, any":function(e,t,r){return e.clone().subset(t,r)},"Matrix, Index, any, any":function(e,t,r,n){return e.clone().subset(t,r,n)},"string, Index, string":_setSubstring,"string, Index, string, string":_setSubstring,"Object, Index, any":_setObjectProperty})});function _getSubstring(t,e){if(!isIndex(e))throw new TypeError("Index expected");if(1!==e.size().length)throw new DimensionError(e.size().length,1);var r=t.length;validateIndex(e.min()[0],r),validateIndex(e.max()[0],r);var e=e.dimension(0),n="";return e.forEach(function(e){n+=t.charAt(e)}),n}function _setSubstring(e,t,r,n){if(!t||!0!==t.isIndex)throw new TypeError("Index expected");if(1!==t.size().length)throw new DimensionError(t.size().length,1);if(void 0!==n){if("string"!=typeof n||1!==n.length)throw new TypeError("Single character expected as defaultValue")}else n=" ";var i=t.dimension(0);if(i.size()[0]!==r.length)throw new DimensionError(i.size()[0],r.length);var a=e.length;validateIndex(t.min()[0]),validateIndex(t.max()[0]);for(var o=[],s=0;s<a;s++)o[s]=e.charAt(s);if(i.forEach(function(e,t){o[e]=r.charAt(t[0])}),o.length>a)for(var u=a-1,c=o.length;u<c;u++)o[u]||(o[u]=n);return o.join("")}function _getObjectProperty(e,t){if(1!==t.size().length)throw new DimensionError(t.size(),1);t=t.dimension(0);if("string"!=typeof t)throw new TypeError("String expected as index to retrieve an object property");return getSafeProperty(e,t)}function _setObjectProperty(e,t,r){if(1!==t.size().length)throw new DimensionError(t.size(),1);t=t.dimension(0);if("string"!=typeof t)throw new TypeError("String expected as index to retrieve an object property");e=clone$1(e);return setSafeProperty(e,t,r),e}var name$2T="transpose",dependencies$2T=["typed","matrix"],createTranspose=factory(name$2T,dependencies$2T,e=>{var{typed:e,matrix:t}=e;return e("transpose",{Array:function(e){return this(t(e)).valueOf()},Matrix:function(e){var t,r=e.size();switch(r.length){case 1:t=e.clone();break;case 2:var n=r[0],i=r[1];if(0===i)throw new RangeError("Cannot transpose a 2D matrix with no columns (size: "+format$1(r)+")");switch(e.storage()){case"dense":t=function(e,t,r){for(var n,i=e._data,a=[],o=0;o<r;o++){n=a[o]=[];for(var s=0;s<t;s++)n[s]=clone$1(i[s][o])}return e.createDenseMatrix({data:a,size:[r,t],datatype:e._datatype})}(e,n,i);break;case"sparse":t=function(e,t,r){for(var n,i,a,o=e._values,s=e._index,u=e._ptr,c=o?[]:void 0,l=[],p=[],m=[],f=0;f<t;f++)m[f]=0;for(n=0,i=s.length;n<i;n++)m[s[n]]++;for(var d=0,h=0;h<t;h++)p.push(d),d+=m[h],m[h]=p[h];for(p.push(d),a=0;a<r;a++)for(var y=u[a],g=u[a+1],x=y;x<g;x++){var v=m[s[x]]++;l[v]=a,o&&(c[v]=clone$1(o[x]))}return e.createSparseMatrix({values:c,index:l,ptr:p,size:[r,t],datatype:e._datatype})}(e,n,i)}break;default:throw new RangeError("Matrix must be a vector or two dimensional (size: "+format$1(this._size)+")")}return t},any:function(e){return clone$1(e)}})}),name$2S="ctranspose",dependencies$2S=["typed","transpose","conj"],createCtranspose=factory(name$2S,dependencies$2S,e=>{var{typed:e,transpose:t,conj:r}=e;return e(name$2S,{any:function(e){return r(t(e))}})}),name$2R="zeros",dependencies$2R=["typed","config","matrix","BigNumber"],createZeros=factory(name$2R,dependencies$2R,e=>{var{typed:e,config:r,matrix:a,BigNumber:o}=e;return e(name$2R,{"":function(){return"Array"===r.matrix?n([]):n([],"default")},"...number | BigNumber | string":function(e){if("string"!=typeof e[e.length-1])return"Array"===r.matrix?n(e):n(e,"default");var t=e.pop();return n(e,t)},Array:n,Matrix:function(e){var t=e.storage();return n(e.valueOf(),t)},"Array | Matrix, string":function(e,t){return n(e.valueOf(),t)}});function n(e,t){var n,r=(n=!1,e.forEach(function(e,t,r){isBigNumber(e)&&(n=!0,r[t]=e.toNumber())}),n)?new o(0):0;if(e.forEach(function(e){if("number"!=typeof e||!isInteger$1(e)||e<0)throw new Error("Parameters in function zeros must be positive integers")}),t){var i=a(t);return 0<e.length?i.resize(e,r):i}i=[];return 0<e.length?resize$1(i,e,r):i}}),name$2Q="erf",dependencies$2Q=["typed"],createErf=factory(name$2Q,dependencies$2Q,e=>{var e=e["typed"];return e("name",{number:function(e){var t=Math.abs(e);return MAX_NUM<=t?sign$1(e):t<=THRESH?sign$1(e)*function(e){var t,r=e*e,n=P[0][4]*r,i=r;for(t=0;t<3;t+=1)n=(n+P[0][t])*r,i=(i+Q[0][t])*r;return e*(n+P[0][3])/(i+Q[0][3])}(t):t<=4?sign$1(e)*(1-function(e){var t,r=P[1][8]*e,n=e;for(t=0;t<7;t+=1)r=(r+P[1][t])*e,n=(n+Q[1][t])*e;var i=(r+P[1][7])/(n+Q[1][7]),a=parseInt(16*e)/16,o=(e-a)*(e+a);return Math.exp(-a*a)*Math.exp(-o)*i}(t)):sign$1(e)*(1-function(e){var t,r=1/(e*e),n=P[2][5]*r,i=r;for(t=0;t<4;t+=1)n=(n+P[2][t])*r,i=(i+Q[2][t])*r;var a=r*(n+P[2][4])/(i+Q[2][4]);a=(SQRPI-a)/e,r=parseInt(16*e)/16;e=(e-r)*(e+r);return Math.exp(-r*r)*Math.exp(-e)*a}(t))},"Array | Matrix":function(e){return deepMap(e,this)}})}),THRESH=.46875,SQRPI=.5641895835477563,P=[[3.1611237438705655,113.86415415105016,377.485237685302,3209.3775891384694,.18577770618460315],[.5641884969886701,8.883149794388377,66.11919063714163,298.6351381974001,881.952221241769,1712.0476126340707,2051.0783778260716,1230.3393547979972,2.1531153547440383e-8],[.30532663496123236,.36034489994980445,.12578172611122926,.016083785148742275,.0006587491615298378,.016315387137302097]],Q=[[23.601290952344122,244.02463793444417,1282.6165260773723,2844.236833439171],[15.744926110709835,117.6939508913125,537.1811018620099,1621.3895745666903,3290.7992357334597,4362.619090143247,3439.3676741437216,1230.3393548037495],[2.568520192289822,1.8729528499234604,.5279051029514285,.06051834131244132,.0023352049762686918]],MAX_NUM=Math.pow(2,53),name$2P="mode",dependencies$2P=["typed","isNaN","isNumeric"],createMode=factory(name$2P,dependencies$2P,e=>{var{typed:e,isNaN:o,isNumeric:s}=e;return e(name$2P,{"Array | Matrix":t,"...":t});function t(e){if(0===(e=flatten$1(e.valueOf())).length)throw new Error("Cannot calculate mode of an empty array");for(var t={},r=[],n=0,i=0;i<e.length;i++){var a=e[i];if(s(a)&&o(a))throw new Error("Cannot calculate mode of an array containing NaN values");a in t||(t[a]=0),t[a]++,t[a]===n?r.push(a):t[a]>n&&(n=t[a],r=[a])}return r}});function improveErrorMessage(e,t,r){var n;return-1!==String(e).indexOf("Unexpected type")?(n=2<arguments.length?" (type: "+typeOf$1(r)+", value: "+JSON.stringify(r)+")":" (type: "+e.data.actual+")",new TypeError("Cannot calculate "+t+", unexpected type of argument"+n)):-1!==String(e).indexOf("complex numbers")?(n=2<arguments.length?" (type: "+typeOf$1(r)+", value: "+JSON.stringify(r)+")":"",new TypeError("Cannot calculate "+t+", no ordering relation is defined for complex numbers"+n)):e}var name$2O="prod",dependencies$2O=["typed","config","multiplyScalar","numeric"],createProd=factory(name$2O,dependencies$2O,e=>{var{typed:e,config:t,multiplyScalar:n,numeric:i}=e;return e(name$2O,{"Array | Matrix":r,"Array | Matrix, number | BigNumber":function(e,t){throw new Error("prod(A, dim) is not yet supported")},"...":r});function r(e){var r;if(deepForEach(e,function(t){try{r=void 0===r?t:n(r,t)}catch(e){throw improveErrorMessage(e,"prod",t)}}),void 0===(r="string"==typeof r?i(r,t.number):r))throw new Error("Cannot calculate prod of an empty array");return r}}),name$2N="format",dependencies$2N=["typed"],createFormat=factory(name$2N,dependencies$2N,e=>{var e=e["typed"];return e(name$2N,{any:format$1,"any, Object | function | number":format$1})}),name$2M="bin",dependencies$2M=["typed","format"],createBin=factory(name$2M,dependencies$2M,e=>{var{typed:e,format:r}=e;return e(name$2M,{"number | BigNumber":function(e){return r(e,{notation:"bin"})},"number | BigNumber, number":function(e,t){return r(e,{notation:"bin",wordSize:t})}})}),name$2L="oct",dependencies$2L=["typed","format"],createOct=factory(name$2L,dependencies$2L,e=>{var{typed:e,format:r}=e;return e(name$2L,{"number | BigNumber":function(e){return r(e,{notation:"oct"})},"number | BigNumber, number":function(e,t){return r(e,{notation:"oct",wordSize:t})}})}),name$2K="hex",dependencies$2K=["typed","format"],createHex=factory(name$2K,dependencies$2K,e=>{var{typed:e,format:r}=e;return e(name$2K,{"number | BigNumber":function(e){return r(e,{notation:"hex"})},"number | BigNumber, number":function(e,t){return r(e,{notation:"hex",wordSize:t})}})}),name$2J="print",dependencies$2J=["typed"],createPrint=factory(name$2J,dependencies$2J,e=>{var e=e["typed"];return e(name$2J,{"string, Object | Array":_print,"string, Object | Array, number | Object":_print})});function _print(e,a,o){return e.replace(/\$([\w.]+)/g,function(e,t){for(var r=t.split("."),n=a[r.shift()];r.length&&void 0!==n;)var i=r.shift(),n=i?n[i]:n+".";return void 0!==n?isString(n)?n:format$1(n,o):e})}var name$2I="to",dependencies$2I=["typed","matrix"],createTo=factory(name$2I,dependencies$2I,e=>{var{typed:e,matrix:r}=e,n=createAlgorithm13({typed:e}),i=createAlgorithm14({typed:e});return e(name$2I,{"Unit, Unit | string":function(e,t){return e.to(t)},"Matrix, Matrix":function(e,t){return n(e,t,this)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"Matrix, any":function(e,t){return i(e,t,this,!1)},"any, Matrix":function(e,t){return i(t,e,this,!0)},"Array, any":function(e,t){return i(r(e),t,this,!1).valueOf()},"any, Array":function(e,t){return i(r(t),e,this,!0).valueOf()}})}),name$2H="isPrime",dependencies$2H=["typed"],createIsPrime=factory(name$2H,dependencies$2H,e=>{var e=e["typed"];return e(name$2H,{number:function(e){if(0*e!=0)return!1;if(e<=3)return 1<e;if(e%2==0||e%3==0)return!1;for(var t=5;t*t<=e;t+=6)if(e%t==0||e%(t+2)==0)return!1;return!0},BigNumber:function(t){if(0*t.toNumber()!=0)return!1;if(t.lte(3))return t.gt(1);if(t.mod(2).eq(0)||t.mod(3).eq(0))return!1;if(t.lt(Math.pow(2,32))){for(var e=t.toNumber(),r=5;r*r<=e;r+=6)if(e%r==0||e%(r+2)==0)return!1;return!0}for(var n=0,i=(t=new(t.constructor.clone({precision:2*t.toFixed(0).length}))(t)).sub(1);i.mod(2).eq(0);)i=i.div(2),n+=1;var a=null;if(t.lt("3317044064679887385961981"))a=[2,3,5,7,11,13,17,19,23,29,31,37,41].filter(e=>e<t);else for(var o=Math.min(t.toNumber()-2,Math.floor(2*Math.pow(t.toFixed(0).length*Math.log(10),2))),a=[],s=2;s<=o;s+=1)a.push(o);for(var u=0;u<a.length;u+=1){var c=a[u],c=function(e,t,r){for(var n=1;!t.eq(0);)t.mod(2).eq(0)?(t=t.div(2),e=e.mul(e).mod(r)):(t=t.sub(1),n=e.mul(n).mod(r));return n}(t.sub(t).add(c),i,t);if(!c.eq(1))for(var l=0,p=c;!p.eq(t.sub(1));l+=1,p=p.mul(p).mod(t))if(l===n-1)return!1}return!0},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$2G="numeric",dependencies$2G=["number","?bignumber","?fraction"],createNumeric=factory(name$2G,dependencies$2G,e=>{var{number:t,bignumber:r,fraction:n}=e,i={string:!0,number:!0,BigNumber:!0,Fraction:!0},a={number:e=>t(e),BigNumber:r?e=>r(e):noBignumber,Fraction:n?e=>n(e):noFraction};return function(e,t){var r=typeOf$1(e);if(!(r in i))throw new TypeError("Cannot convert "+e+' of type "'+r+'"; valid input types are '+Object.keys(i).join(", "));if(!(t in a))throw new TypeError("Cannot convert "+e+' to type "'+t+'"; valid output types are '+Object.keys(a).join(", "));return t===r?e:a[t](e)}}),name$2F="divideScalar",dependencies$2F=["typed","numeric"],createDivideScalar=factory(name$2F,dependencies$2F,e=>{var{typed:e,numeric:i}=e;return e(name$2F,{"number, number":function(e,t){return e/t},"Complex, Complex":function(e,t){return e.div(t)},"BigNumber, BigNumber":function(e,t){return e.div(t)},"Fraction, Fraction":function(e,t){return e.div(t)},"Unit, number | Fraction | BigNumber":function(e,t){var r=e.clone(),e=i(1,typeOf$1(t));return r.value=this(null===r.value?r._normalize(e):r.value,t),r},"number | Fraction | BigNumber, Unit":function(e,t){var r=(r=t.clone()).pow(-1),n=i(1,typeOf$1(e));return r.value=this(e,null===t.value?t._normalize(n):t.value),r},"Unit, Unit":function(e,t){return e.divide(t)}})}),name$2E="pow",dependencies$2E=["typed","config","identity","multiply","matrix","fraction","number","Complex"],createPow=factory(name$2E,dependencies$2E,e=>{var{typed:e,config:i,identity:a,multiply:o,matrix:r,number:s,fraction:u,Complex:c}=e;return e(name$2E,{"number, number":n,"Complex, Complex":function(e,t){return e.pow(t)},"BigNumber, BigNumber":function(e,t){return t.isInteger()||0<=e||i.predictable?e.pow(t):new c(e.toNumber(),0).pow(t.toNumber(),0)},"Fraction, Fraction":function(e,t){var r=e.pow(t);if(null!=r)return r;if(i.predictable)throw new Error("Result of pow is non-rational and cannot be expressed as a fraction");return n(e.valueOf(),t.valueOf())},"Array, number":l,"Array, BigNumber":function(e,t){return l(e,t.toNumber())},"Matrix, number":p,"Matrix, BigNumber":function(e,t){return p(e,t.toNumber())},"Unit, number | BigNumber":function(e,t){return e.pow(t)}});function n(e,t){if(i.predictable&&!isInteger$1(t)&&e<0)try{var r=u(t),n=s(r);if((t===n||Math.abs((t-n)/t)<1e-14)&&r.d%2==1)return(r.n%2==0?1:-1)*Math.pow(-e,t)}catch(e){}return i.predictable&&(e<-1&&t===1/0||-1<e&&e<0&&t===-1/0)?NaN:isInteger$1(t)||0<=e||i.predictable?powNumber(e,t):e*e<1&&t===1/0||1<e*e&&t===-1/0?0:new c(e,0).pow(t,0)}function l(e,t){if(!isInteger$1(t)||t<0)throw new TypeError("For A^b, b must be a positive integer (value is "+t+")");var r=arraySize(e);if(2!==r.length)throw new Error("For A^b, A must be 2 dimensional (A has "+r.length+" dimensions)");if(r[0]!==r[1])throw new Error("For A^b, A must be square (size is "+r[0]+"x"+r[1]+")");for(var n=a(r[0]).valueOf(),i=e;1<=t;)1==(1&t)&&(n=o(i,n)),t>>=1,i=o(i,i);return n}function p(e,t){return r(l(e.valueOf(),t))}}),defineProperty=createCommonjsModule(function(e){e.exports=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e},e.exports.default=e.exports,e.exports.__esModule=!0}),_defineProperty=getDefaultExportFromCjs(defineProperty);function ownKeys$1(t,e){var r,n=Object.keys(t);return Object.getOwnPropertySymbols&&(r=Object.getOwnPropertySymbols(t),e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)),n}function _objectSpread$1(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ownKeys$1(Object(r),!0).forEach(function(e){_defineProperty(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ownKeys$1(Object(r)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}var NO_INT="Number of decimals in function round must be an integer",name$2D="round",dependencies$2D=["typed","matrix","equalScalar","zeros","BigNumber","DenseMatrix"],createRound=factory(name$2D,dependencies$2D,e=>{var{typed:t,matrix:r,equalScalar:n,zeros:i,BigNumber:a,DenseMatrix:e}=e,o=createAlgorithm11({typed:t,equalScalar:n}),s=createAlgorithm12({typed:t,DenseMatrix:e}),u=createAlgorithm14({typed:t});return t(name$2D,_objectSpread$1(_objectSpread$1({},roundNumberSignatures),{},{Complex:function(e){return e.round()},"Complex, number":function(e,t){if(t%1)throw new TypeError(NO_INT);return e.round(t)},"Complex, BigNumber":function(e,t){if(!t.isInteger())throw new TypeError(NO_INT);t=t.toNumber();return e.round(t)},"number, BigNumber":function(e,t){if(!t.isInteger())throw new TypeError(NO_INT);return new a(e).toDecimalPlaces(t.toNumber())},BigNumber:function(e){return e.toDecimalPlaces(0)},"BigNumber, BigNumber":function(e,t){if(!t.isInteger())throw new TypeError(NO_INT);return e.toDecimalPlaces(t.toNumber())},Fraction:function(e){return e.round()},"Fraction, number":function(e,t){if(t%1)throw new TypeError(NO_INT);return e.round(t)},"Array | Matrix":function(e){return deepMap(e,this)},"SparseMatrix, number | BigNumber":function(e,t){return o(e,t,this,!1)},"DenseMatrix, number | BigNumber":function(e,t){return u(e,t,this,!1)},"number | Complex | BigNumber, SparseMatrix":function(e,t){return n(e,0)?i(t.size(),t.storage()):s(t,e,this,!0)},"number | Complex | BigNumber, DenseMatrix":function(e,t){return n(e,0)?i(t.size(),t.storage()):u(t,e,this,!0)},"Array, number | BigNumber":function(e,t){return u(r(e),t,this,!1).valueOf()},"number | Complex | BigNumber, Array":function(e,t){return u(r(t),e,this,!0).valueOf()}}))}),roundNumberSignatures={number:roundNumber,"number, number":function(e,t){if(!isInteger$1(t))throw new TypeError(NO_INT);if(t<0||15<t)throw new Error("Number of decimals in function round must be in the range of 0-15");return roundNumber(e,t)}},name$2C="log",dependencies$2C=["config","typed","divideScalar","Complex"],createLog=factory(name$2C,dependencies$2C,e=>{var{typed:e,config:t,divideScalar:r,Complex:n}=e;return e(name$2C,{number:function(e){return 0<=e||t.predictable?logNumber(e):new n(e,0).log()},Complex:function(e){return e.log()},BigNumber:function(e){return!e.isNegative()||t.predictable?e.ln():new n(e.toNumber(),0).log()},"Array | Matrix":function(e){return deepMap(e,this)},"any, any":function(e,t){return r(this(e),this(t))}})}),name$2B="log1p",dependencies$2B=["typed","config","divideScalar","log","Complex"],createLog1p=factory(name$2B,dependencies$2B,e=>{var{typed:e,config:r,divideScalar:n,log:i,Complex:a}=e;return e(name$2B,{number:function(e){return-1<=e||r.predictable?log1p$1(e):o(new a(e,0))},Complex:o,BigNumber:function(e){var t=e.plus(1);return!t.isNegative()||r.predictable?t.ln():o(new a(e.toNumber(),0))},"Array | Matrix":function(e){return deepMap(e,this)},"any, any":function(e,t){return n(this(e),i(t))}});function o(e){var t=e.re+1;return new a(Math.log(Math.sqrt(t*t+e.im*e.im)),Math.atan2(e.im,t))}}),name$2A="nthRoots",dependencies$2A=["config","typed","divideScalar","Complex"],createNthRoots=factory(name$2A,dependencies$2A,e=>{var{typed:e,Complex:c}=e,l=[function(e){return new c(e,0)},function(e){return new c(0,e)},function(e){return new c(-e,0)},function(e){return new c(0,-e)}];function t(e,t){if(t<0)throw new Error("Root must be greater than zero");if(0===t)throw new Error("Root must be non-zero");if(t%1!=0)throw new Error("Root must be an integer");if(0===e||0===e.abs())return[new c(0,0)];var r,n="number"==typeof e;!n&&0!==e.re&&0!==e.im||(r=n?2*(e<0):0===e.im?2*(e.re<0):2*(e.im<0)+1);for(var i=e.arg(),e=e.abs(),a=[],o=Math.pow(e,1/t),s=0;s<t;s++){var u=(r+4*s)/t;u!==Math.round(u)?a.push(new c({r:o,phi:(i+2*Math.PI*s)/t})):a.push(l[u%4](o))}return a}return e(name$2A,{Complex:function(e){return t(e,2)},"Complex, number":t})}),name$2z="dotPow",dependencies$2z=["typed","equalScalar","matrix","pow","DenseMatrix"],createDotPow=factory(name$2z,dependencies$2z,e=>{var{typed:t,equalScalar:r,matrix:n,pow:i,DenseMatrix:e}=e,a=createAlgorithm03({typed:t}),o=createAlgorithm07({typed:t,DenseMatrix:e}),s=createAlgorithm11({typed:t,equalScalar:r}),u=createAlgorithm12({typed:t,DenseMatrix:e}),c=createAlgorithm13({typed:t}),l=createAlgorithm14({typed:t});return t(name$2z,{"any, any":i,"SparseMatrix, SparseMatrix":function(e,t){return o(e,t,i,!1)},"SparseMatrix, DenseMatrix":function(e,t){return a(t,e,i,!0)},"DenseMatrix, SparseMatrix":function(e,t){return a(e,t,i,!1)},"DenseMatrix, DenseMatrix":function(e,t){return c(e,t,i)},"Array, Array":function(e,t){return this(n(e),n(t)).valueOf()},"Array, Matrix":function(e,t){return this(n(e),t)},"Matrix, Array":function(e,t){return this(e,n(t))},"SparseMatrix, any":function(e,t){return s(e,t,this,!1)},"DenseMatrix, any":function(e,t){return l(e,t,this,!1)},"any, SparseMatrix":function(e,t){return u(t,e,this,!0)},"any, DenseMatrix":function(e,t){return l(t,e,this,!0)},"Array, any":function(e,t){return l(n(e),t,this,!1).valueOf()},"any, Array":function(e,t){return l(n(t),e,this,!0).valueOf()}})}),name$2y="dotDivide",dependencies$2y=["typed","matrix","equalScalar","divideScalar","DenseMatrix"],createDotDivide=factory(name$2y,dependencies$2y,e=>{var{typed:t,matrix:r,equalScalar:n,divideScalar:i,DenseMatrix:e}=e,a=createAlgorithm02({typed:t,equalScalar:n}),o=createAlgorithm03({typed:t}),s=createAlgorithm07({typed:t,DenseMatrix:e}),u=createAlgorithm11({typed:t,equalScalar:n}),c=createAlgorithm12({typed:t,DenseMatrix:e}),l=createAlgorithm13({typed:t}),p=createAlgorithm14({typed:t});return t(name$2y,{"any, any":i,"SparseMatrix, SparseMatrix":function(e,t){return s(e,t,i,!1)},"SparseMatrix, DenseMatrix":function(e,t){return a(t,e,i,!0)},"DenseMatrix, SparseMatrix":function(e,t){return o(e,t,i,!1)},"DenseMatrix, DenseMatrix":function(e,t){return l(e,t,i)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"SparseMatrix, any":function(e,t){return u(e,t,i,!1)},"DenseMatrix, any":function(e,t){return p(e,t,i,!1)},"any, SparseMatrix":function(e,t){return c(t,e,i,!0)},"any, DenseMatrix":function(e,t){return p(t,e,i,!0)},"Array, any":function(e,t){return p(r(e),t,i,!1).valueOf()},"any, Array":function(e,t){return p(r(t),e,i,!0).valueOf()}})});function createSolveValidation(e){var y=e["DenseMatrix"];return function(e,t,r){e=e.size();if(2!==e.length)throw new RangeError("Matrix must be two dimensional (size: "+format$1(e)+")");var n=e[0];if(n!==e[1])throw new RangeError("Matrix must be square (size: "+format$1(e)+")");var i=[];if(isMatrix(t)){var e=t.size(),a=t._data;if(1===e.length){if(e[0]!==n)throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");for(var o=0;o<n;o++)i[o]=[a[o]];return new y({data:i,size:[n,1],datatype:t._datatype})}if(2===e.length){if(e[0]!==n||1!==e[1])throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");if(isDenseMatrix(t)){if(r){for(var i=[],s=0;s<n;s++)i[s]=[a[s][0]];return new y({data:i,size:[n,1],datatype:t._datatype})}return t}if(isSparseMatrix(t)){for(var u=0;u<n;u++)i[u]=[0];for(var c=t._values,l=t._index,p=t._ptr,m=p[1],f=p[0];f<m;f++)i[l[f]][0]=c[f];return new y({data:i,size:[n,1],datatype:t._datatype})}}throw new RangeError("Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.")}if(isArray(t)){p=arraySize(t);if(1===p.length){if(p[0]!==n)throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");for(var d=0;d<n;d++)i[d]=[t[d]];return new y({data:i,size:[n,1]})}if(2!==p.length)throw new RangeError("Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.");if(p[0]!==n||1!==p[1])throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");for(var h=0;h<n;h++)i[h]=[t[h][0]];return new y({data:i,size:[n,1]})}}}var name$2x="lsolve",dependencies$2x=["typed","matrix","divideScalar","multiplyScalar","subtract","equalScalar","DenseMatrix"],createLsolve=factory(name$2x,dependencies$2x,e=>{var{typed:e,matrix:r,divideScalar:w,multiplyScalar:N,subtract:M,equalScalar:S,DenseMatrix:$}=e,E=createSolveValidation({DenseMatrix:$});return e(name$2x,{"SparseMatrix, Array | Matrix":function(e,t){for(var r=(t=E(e,t,!0))._data,t=e._size[0],n=e._size[1],i=e._values,a=e._index,o=e._ptr,s=[],u=0;u<n;u++){var c=r[u][0]||0;if(S(c,0))s[u]=[0];else{for(var l=0,p=[],m=[],f=o[u],d=o[u+1],h=f;h<d;h++){var y=a[h];y===u?l=i[h]:u<y&&(p.push(i[h]),m.push(y))}if(S(l,0))throw new Error("Linear system cannot be solved since matrix is singular");for(var g=w(c,l),x=0,v=m.length;x<v;x++){var b=m[x];r[b]=[M(r[b][0]||0,N(g,p[x]))]}s[u]=[g]}}return new $({data:s,size:[t,1]})},"DenseMatrix, Array | Matrix":n,"Array, Array | Matrix":function(e,t){return n(r(e),t).valueOf()}});function n(e,t){for(var r=(t=E(e,t,!0))._data,n=e._size[0],i=e._size[1],a=[],o=e._data,s=0;s<i;s++){var u=r[s][0]||0,c=void 0;if(S(u,0))c=0;else{var l=o[s][s];if(S(l,0))throw new Error("Linear system cannot be solved since matrix is singular");for(var c=w(u,l),p=s+1;p<n;p++)r[p]=[M(r[p][0]||0,N(c,o[p][s]))]}a[s]=[c]}return new $({data:a,size:[n,1]})}}),name$2w="usolve",dependencies$2w=["typed","matrix","divideScalar","multiplyScalar","subtract","equalScalar","DenseMatrix"],createUsolve=factory(name$2w,dependencies$2w,e=>{var{typed:e,matrix:r,divideScalar:b,multiplyScalar:w,subtract:N,equalScalar:M,DenseMatrix:S}=e,$=createSolveValidation({DenseMatrix:S});return e(name$2w,{"SparseMatrix, Array | Matrix":function(e,t){for(var r=(t=$(e,t,!0))._data,n=e._size[0],t=e._size[1],i=e._values,a=e._index,o=e._ptr,s=[],u=t-1;0<=u;u--){var c=r[u][0]||0;if(M(c,0))s[u]=[0];else{for(var l=0,p=[],m=[],f=o[u],d=o[u+1]-1;f<=d;d--){var h=a[d];h===u?l=i[d]:h<u&&(p.push(i[d]),m.push(h))}if(M(l,0))throw new Error("Linear system cannot be solved since matrix is singular");for(var y=b(c,l),g=0,x=m.length;g<x;g++){var v=m[g];r[v]=[N(r[v][0],w(y,p[g]))]}s[u]=[y]}}return new S({data:s,size:[n,1]})},"DenseMatrix, Array | Matrix":n,"Array, Array | Matrix":function(e,t){return n(r(e),t).valueOf()}});function n(e,t){for(var r=(t=$(e,t,!0))._data,n=e._size[0],t=e._size[1],i=[],a=e._data,o=t-1;0<=o;o--){var s=r[o][0]||0,u=void 0;if(M(s,0))u=0;else{var c=a[o][o];if(M(c,0))throw new Error("Linear system cannot be solved since matrix is singular");for(var u=b(s,c),l=o-1;0<=l;l--)r[l]=[N(r[l][0]||0,w(u,a[l][o]))]}i[o]=[u]}return new S({data:i,size:[n,1]})}}),name$2v="lsolveAll",dependencies$2v=["typed","matrix","divideScalar","multiplyScalar","subtract","equalScalar","DenseMatrix"],createLsolveAll=factory(name$2v,dependencies$2v,e=>{var{typed:e,matrix:r,divideScalar:E,multiplyScalar:A,subtract:O,equalScalar:C,DenseMatrix:T}=e,D=createSolveValidation({DenseMatrix:T});return e(name$2v,{"SparseMatrix, Array | Matrix":function(e,t){for(var r=[D(e,t,!0)._data.map(e=>e[0])],n=e._size[0],i=e._size[1],a=e._values,o=e._index,s=e._ptr,u=0;u<i;u++)for(var c=r.length,l=0;l<c;l++){for(var p=r[l],m=[],f=[],d=s[u],h=s[u+1],y=0,g=d;g<h;g++){var x=o[g];x===u?y=a[g]:u<x&&(m.push(a[g]),f.push(x))}if(C(y,0))if(C(p[u],0)){if(0===l){var v=[...p];v[u]=1;for(var b=0,w=f.length;b<w;b++){var N=f[b];v[N]=O(v[N],m[b])}r.push(v)}}else{if(0===l)return[];r.splice(l,1),--l,--c}else{p[u]=E(p[u],y);for(var M=0,S=f.length;M<S;M++){var $=f[M];p[$]=O(p[$],A(p[u],m[M]))}}}return r.map(e=>new T({data:e.map(e=>[e]),size:[n,1]}))},"DenseMatrix, Array | Matrix":n,"Array, Array | Matrix":function(e,t){return n(r(e),t).map(e=>e.valueOf())}});function n(e,t){for(var r=[D(e,t,!0)._data.map(e=>e[0])],n=e._data,i=e._size[0],a=e._size[1],o=0;o<a;o++)for(var s=r.length,u=0;u<s;u++){var c=r[u];if(C(n[o][o],0))if(C(c[o],0)){if(0===u){for(var l=[...c],p=o+(l[o]=1);p<a;p++)l[p]=O(l[p],n[p][o]);r.push(l)}}else{if(0===u)return[];r.splice(u,1),--u,--s}else{c[o]=E(c[o],n[o][o]);for(var m=o+1;m<a;m++)c[m]=O(c[m],A(c[o],n[m][o]))}}return r.map(e=>new T({data:e.map(e=>[e]),size:[i,1]}))}}),name$2u="usolveAll",dependencies$2u=["typed","matrix","divideScalar","multiplyScalar","subtract","equalScalar","DenseMatrix"],createUsolveAll=factory(name$2u,dependencies$2u,e=>{var{typed:e,matrix:r,divideScalar:$,multiplyScalar:E,subtract:A,equalScalar:O,DenseMatrix:C}=e,T=createSolveValidation({DenseMatrix:C});return e(name$2u,{"SparseMatrix, Array | Matrix":function(e,t){for(var r=[T(e,t,!0)._data.map(e=>e[0])],n=e._size[0],t=e._size[1],i=e._values,a=e._index,o=e._ptr,s=t-1;0<=s;s--)for(var u=r.length,c=0;c<u;c++){for(var l=r[c],p=[],m=[],f=o[s],d=o[s+1],h=0,y=d-1;f<=y;y--){var g=a[y];g===s?h=i[y]:g<s&&(p.push(i[y]),m.push(g))}if(O(h,0))if(O(l[s],0)){if(0===c){var x=[...l];x[s]=1;for(var v=0,b=m.length;v<b;v++){var w=m[v];x[w]=A(x[w],p[v])}r.push(x)}}else{if(0===c)return[];r.splice(c,1),--c,--u}else{l[s]=$(l[s],h);for(var N=0,M=m.length;N<M;N++){var S=m[N];l[S]=A(l[S],E(l[s],p[N]))}}}return r.map(e=>new C({data:e.map(e=>[e]),size:[n,1]}))},"DenseMatrix, Array | Matrix":n,"Array, Array | Matrix":function(e,t){return n(r(e),t).map(e=>e.valueOf())}});function n(e,t){for(var r=[T(e,t,!0)._data.map(e=>e[0])],n=e._data,i=e._size[0],a=e._size[1]-1;0<=a;a--)for(var o=r.length,s=0;s<o;s++){var u=r[s];if(O(n[a][a],0))if(O(u[a],0)){if(0===s){for(var c=[...u],l=a-(c[a]=1);0<=l;l--)c[l]=A(c[l],n[l][a]);r.push(c)}}else{if(0===s)return[];r.splice(s,1),--s,--o}else{u[a]=$(u[a],n[a][a]);for(var p=a-1;0<=p;p--)u[p]=A(u[p],E(u[a],n[p][a]))}}return r.map(e=>new C({data:e.map(e=>[e]),size:[i,1]}))}}),name$2t="algorithm08",dependencies$2t=["typed","equalScalar"],createAlgorithm08=factory(name$2t,dependencies$2t,e=>{var{typed:C,equalScalar:T}=e;return function(e,t,r){var n=e._values,i=e._index,a=e._ptr,o=e._size,s=e._datatype,u=t._values,c=t._index,l=t._ptr,p=t._size,t=t._datatype;if(o.length!==p.length)throw new DimensionError(o.length,p.length);if(o[0]!==p[0]||o[1]!==p[1])throw new RangeError("Dimension mismatch. Matrix A ("+o+") must match Matrix B ("+p+")");if(!n||!u)throw new Error("Cannot perform operation on Pattern Sparse Matrices");var m,p=o[0],f=o[1],d=T,h=0,y=r;"string"==typeof s&&s===t&&(d=C.find(T,[m=s,m]),h=C.convert(0,m),y=C.find(r,[m,m]));for(var g=[],x=[],v=[],b=[],w=[],N=0;N<f;N++){v[N]=x.length;for(var M=N+1,S=a[N],$=a[N+1],E=S;E<$;E++)w[A=i[E]]=M,b[A]=n[E],x.push(A);for(S=l[N],$=l[N+1],E=S;E<$;E++)w[A=c[E]]===M&&(b[A]=y(b[A],u[E]));for(E=v[N];E<x.length;){var A,O=b[A=x[E]];d(O,h)?x.splice(E,1):(g.push(O),E++)}}return v[f]=x.length,e.createSparseMatrix({values:g,index:x,ptr:v,size:[p,f],datatype:m})}}),name$2s="leftShift",dependencies$2s=["typed","matrix","equalScalar","zeros","DenseMatrix"],createLeftShift=factory(name$2s,dependencies$2s,e=>{var{typed:t,matrix:r,equalScalar:n,zeros:i,DenseMatrix:e}=e,a=createAlgorithm01({typed:t}),o=createAlgorithm02({typed:t,equalScalar:n}),s=createAlgorithm08({typed:t,equalScalar:n}),u=createAlgorithm10({typed:t,DenseMatrix:e}),c=createAlgorithm11({typed:t,equalScalar:n}),l=createAlgorithm13({typed:t}),p=createAlgorithm14({typed:t});return t(name$2s,{"number, number":leftShiftNumber,"BigNumber, BigNumber":leftShiftBigNumber,"SparseMatrix, SparseMatrix":function(e,t){return s(e,t,this,!1)},"SparseMatrix, DenseMatrix":function(e,t){return o(t,e,this,!0)},"DenseMatrix, SparseMatrix":function(e,t){return a(e,t,this,!1)},"DenseMatrix, DenseMatrix":function(e,t){return l(e,t,this)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"SparseMatrix, number | BigNumber":function(e,t){return n(t,0)?e.clone():c(e,t,this,!1)},"DenseMatrix, number | BigNumber":function(e,t){return n(t,0)?e.clone():p(e,t,this,!1)},"number | BigNumber, SparseMatrix":function(e,t){return n(e,0)?i(t.size(),t.storage()):u(t,e,this,!0)},"number | BigNumber, DenseMatrix":function(e,t){return n(e,0)?i(t.size(),t.storage()):p(t,e,this,!0)},"Array, number | BigNumber":function(e,t){return this(r(e),t).valueOf()},"number | BigNumber, Array":function(e,t){return this(e,r(t)).valueOf()}})}),name$2r="rightArithShift",dependencies$2r=["typed","matrix","equalScalar","zeros","DenseMatrix"],createRightArithShift=factory(name$2r,dependencies$2r,e=>{var{typed:t,matrix:r,equalScalar:n,zeros:i,DenseMatrix:e}=e,a=createAlgorithm01({typed:t}),o=createAlgorithm02({typed:t,equalScalar:n}),s=createAlgorithm08({typed:t,equalScalar:n}),u=createAlgorithm10({typed:t,DenseMatrix:e}),c=createAlgorithm11({typed:t,equalScalar:n}),l=createAlgorithm13({typed:t}),p=createAlgorithm14({typed:t});return t(name$2r,{"number, number":rightArithShiftNumber,"BigNumber, BigNumber":rightArithShiftBigNumber,"SparseMatrix, SparseMatrix":function(e,t){return s(e,t,this,!1)},"SparseMatrix, DenseMatrix":function(e,t){return o(t,e,this,!0)},"DenseMatrix, SparseMatrix":function(e,t){return a(e,t,this,!1)},"DenseMatrix, DenseMatrix":function(e,t){return l(e,t,this)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"SparseMatrix, number | BigNumber":function(e,t){return n(t,0)?e.clone():c(e,t,this,!1)},"DenseMatrix, number | BigNumber":function(e,t){return n(t,0)?e.clone():p(e,t,this,!1)},"number | BigNumber, SparseMatrix":function(e,t){return n(e,0)?i(t.size(),t.storage()):u(t,e,this,!0)},"number | BigNumber, DenseMatrix":function(e,t){return n(e,0)?i(t.size(),t.storage()):p(t,e,this,!0)},"Array, number | BigNumber":function(e,t){return this(r(e),t).valueOf()},"number | BigNumber, Array":function(e,t){return this(e,r(t)).valueOf()}})}),name$2q="rightLogShift",dependencies$2q=["typed","matrix","equalScalar","zeros","DenseMatrix"],createRightLogShift=factory(name$2q,dependencies$2q,e=>{var{typed:t,matrix:r,equalScalar:n,zeros:i,DenseMatrix:e}=e,a=createAlgorithm01({typed:t}),o=createAlgorithm02({typed:t,equalScalar:n}),s=createAlgorithm08({typed:t,equalScalar:n}),u=createAlgorithm10({typed:t,DenseMatrix:e}),c=createAlgorithm11({typed:t,equalScalar:n}),l=createAlgorithm13({typed:t}),p=createAlgorithm14({typed:t});return t(name$2q,{"number, number":rightLogShiftNumber,"SparseMatrix, SparseMatrix":function(e,t){return s(e,t,this,!1)},"SparseMatrix, DenseMatrix":function(e,t){return o(t,e,this,!0)},"DenseMatrix, SparseMatrix":function(e,t){return a(e,t,this,!1)},"DenseMatrix, DenseMatrix":function(e,t){return l(e,t,this)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"SparseMatrix, number | BigNumber":function(e,t){return n(t,0)?e.clone():c(e,t,this,!1)},"DenseMatrix, number | BigNumber":function(e,t){return n(t,0)?e.clone():p(e,t,this,!1)},"number | BigNumber, SparseMatrix":function(e,t){return n(e,0)?i(t.size(),t.storage()):u(t,e,this,!0)},"number | BigNumber, DenseMatrix":function(e,t){return n(e,0)?i(t.size(),t.storage()):p(t,e,this,!0)},"Array, number | BigNumber":function(e,t){return this(r(e),t).valueOf()},"number | BigNumber, Array":function(e,t){return this(e,r(t)).valueOf()}})}),name$2p="and",dependencies$2p=["typed","matrix","equalScalar","zeros","not"],createAnd=factory(name$2p,dependencies$2p,e=>{var{typed:t,matrix:r,equalScalar:e,zeros:n,not:i}=e,a=createAlgorithm02({typed:t,equalScalar:e}),o=createAlgorithm06({typed:t,equalScalar:e}),s=createAlgorithm11({typed:t,equalScalar:e}),u=createAlgorithm13({typed:t}),c=createAlgorithm14({typed:t});return t(name$2p,{"number, number":andNumber,"Complex, Complex":function(e,t){return!(0===e.re&&0===e.im||0===t.re&&0===t.im)},"BigNumber, BigNumber":function(e,t){return!(e.isZero()||t.isZero()||e.isNaN()||t.isNaN())},"Unit, Unit":function(e,t){return this(e.value||0,t.value||0)},"SparseMatrix, SparseMatrix":function(e,t){return o(e,t,this,!1)},"SparseMatrix, DenseMatrix":function(e,t){return a(t,e,this,!0)},"DenseMatrix, SparseMatrix":function(e,t){return a(e,t,this,!1)},"DenseMatrix, DenseMatrix":function(e,t){return u(e,t,this)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"SparseMatrix, any":function(e,t){return i(t)?n(e.size(),e.storage()):s(e,t,this,!1)},"DenseMatrix, any":function(e,t){return i(t)?n(e.size(),e.storage()):c(e,t,this,!1)},"any, SparseMatrix":function(e,t){return i(e)?n(e.size(),e.storage()):s(t,e,this,!0)},"any, DenseMatrix":function(e,t){return i(e)?n(e.size(),e.storage()):c(t,e,this,!0)},"Array, any":function(e,t){return this(r(e),t).valueOf()},"any, Array":function(e,t){return this(e,r(t)).valueOf()}})}),name$2o="compare",dependencies$2o=["typed","config","matrix","equalScalar","BigNumber","Fraction","DenseMatrix"],createCompare=factory(name$2o,dependencies$2o,e=>{var{typed:t,config:r,equalScalar:n,matrix:i,BigNumber:a,Fraction:o,DenseMatrix:e}=e,s=createAlgorithm03({typed:t}),u=createAlgorithm05({typed:t,equalScalar:n}),c=createAlgorithm12({typed:t,DenseMatrix:e}),l=createAlgorithm13({typed:t}),p=createAlgorithm14({typed:t});return t(name$2o,{"boolean, boolean":function(e,t){return e===t?0:t<e?1:-1},"number, number":function(e,t){return nearlyEqual$1(e,t,r.epsilon)?0:t<e?1:-1},"BigNumber, BigNumber":function(e,t){return nearlyEqual(e,t,r.epsilon)?new a(0):new a(e.cmp(t))},"Fraction, Fraction":function(e,t){return new o(e.compare(t))},"Complex, Complex":function(){throw new TypeError("No ordering relation is defined for complex numbers")},"Unit, Unit":function(e,t){if(!e.equalBase(t))throw new Error("Cannot compare units with different base");return this(e.value,t.value)},"SparseMatrix, SparseMatrix":function(e,t){return u(e,t,this)},"SparseMatrix, DenseMatrix":function(e,t){return s(t,e,this,!0)},"DenseMatrix, SparseMatrix":function(e,t){return s(e,t,this,!1)},"DenseMatrix, DenseMatrix":function(e,t){return l(e,t,this)},"Array, Array":function(e,t){return this(i(e),i(t)).valueOf()},"Array, Matrix":function(e,t){return this(i(e),t)},"Matrix, Array":function(e,t){return this(e,i(t))},"SparseMatrix, any":function(e,t){return c(e,t,this,!1)},"DenseMatrix, any":function(e,t){return p(e,t,this,!1)},"any, SparseMatrix":function(e,t){return c(t,e,this,!0)},"any, DenseMatrix":function(e,t){return p(t,e,this,!0)},"Array, any":function(e,t){return p(i(e),t,this,!1).valueOf()},"any, Array":function(e,t){return p(i(t),e,this,!0).valueOf()}})}),naturalSort=function t(e,r){function n(e){return t.insensitive&&(""+e).toLowerCase()||""+e}var i,a,o=/(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi,s=/(^[ ]*|[ ]*$)/g,u=/(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,c=/^0x[0-9a-f]+$/i,l=/^0/,e=n(e).replace(s,"")||"",s=n(r).replace(s,"")||"",p=e.replace(o,"\0$1\0").replace(/\0$/,"").replace(/^\0/,"").split("\0"),m=s.replace(o,"\0$1\0").replace(/\0$/,"").replace(/^\0/,"").split("\0"),e=parseInt(e.match(c),16)||1!==p.length&&e.match(u)&&Date.parse(e),s=parseInt(s.match(c),16)||e&&s.match(u)&&Date.parse(s)||null;if(s){if(e<s)return-1;if(s<e)return 1}for(var f=0,d=Math.max(p.length,m.length);f<d;f++){if(i=!(p[f]||"").match(l)&&parseFloat(p[f])||p[f]||0,a=!(m[f]||"").match(l)&&parseFloat(m[f])||m[f]||0,isNaN(i)!==isNaN(a))return isNaN(i)?1:-1;if(typeof i!=typeof a&&(i+="",a+=""),i<a)return-1;if(a<i)return 1}return 0},name$2n="compareNatural",dependencies$2n=["typed","compare"],createCompareNatural=factory(name$2n,dependencies$2n,e=>{var{typed:e,compare:a}=e,o=a.signatures["boolean,boolean"];return e(name$2n,{"any, any":function(e,t){var r,n=typeOf$1(e),i=typeOf$1(t);if(!("number"!==n&&"BigNumber"!==n&&"Fraction"!==n||"number"!==i&&"BigNumber"!==i&&"Fraction"!==i))return"0"!==(r=a(e,t)).toString()?0<r?1:-1:naturalSort(n,i);if("Array"===n||"Matrix"===n||"Array"===i||"Matrix"===i)return 0!==(r=function e(t,r,n){if(isSparseMatrix(r)&&isSparseMatrix(n))return u(t,r.toJSON().values,n.toJSON().values);if(isSparseMatrix(r))return e(t,r.toArray(),n);if(isSparseMatrix(n))return e(t,r,n.toArray());if(isDenseMatrix(r))return e(t,r.toJSON().data,n);if(isDenseMatrix(n))return e(t,r,n.toJSON().data);if(!Array.isArray(r))return e(t,[r],n);if(!Array.isArray(n))return e(t,r,[n]);return u(t,r,n)}(this,e,t))?r:naturalSort(n,i);if(n!==i)return naturalSort(n,i);if("Complex"===n)return compareComplexNumbers(e,t);if("Unit"===n)return e.equalBase(t)?this(e.value,t.value):u(this,e.formatUnits(),t.formatUnits());if("boolean"===n)return o(e,t);if("string"===n)return naturalSort(e,t);if("Object"===n)return function(e,t,r){var n=Object.keys(t),i=Object.keys(r);n.sort(naturalSort),i.sort(naturalSort);var a=u(e,n,i);if(0!==a)return a;for(var o=0;o<n.length;o++){var s=e(t[n[o]],r[i[o]]);if(0!==s)return s}return 0}(this,e,t);if("null"===n)return 0;if("undefined"===n)return 0;throw new TypeError('Unsupported type of value "'+n+'"')}});function u(e,t,r){for(var n=0,i=Math.min(t.length,r.length);n<i;n++){var a=e(t[n],r[n]);if(0!==a)return a}return t.length>r.length?1:t.length<r.length?-1:0}});function compareComplexNumbers(e,t){return e.re>t.re?1:e.re<t.re?-1:e.im>t.im?1:e.im<t.im?-1:0}var name$2m="compareText",dependencies$2m=["typed","matrix"],createCompareText=factory(name$2m,dependencies$2m,e=>{var{typed:e,matrix:r}=e,n=createAlgorithm13({typed:e}),i=createAlgorithm14({typed:e});return e(name$2m,{"any, any":compareText$1,"DenseMatrix, DenseMatrix":function(e,t){return n(e,t,compareText$1)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"DenseMatrix, any":function(e,t){return i(e,t,compareText$1,!1)},"any, DenseMatrix":function(e,t){return i(t,e,compareText$1,!0)},"Array, any":function(e,t){return i(r(e),t,compareText$1,!1).valueOf()},"any, Array":function(e,t){return i(r(t),e,compareText$1,!0).valueOf()}})}),name$2l="equal",dependencies$2l=["typed","matrix","equalScalar","DenseMatrix"],createEqual=factory(name$2l,dependencies$2l,e=>{var{typed:t,matrix:r,equalScalar:n,DenseMatrix:e}=e,i=createAlgorithm03({typed:t}),a=createAlgorithm07({typed:t,DenseMatrix:e}),o=createAlgorithm12({typed:t,DenseMatrix:e}),s=createAlgorithm13({typed:t}),u=createAlgorithm14({typed:t});return t(name$2l,{"any, any":function(e,t){return null===e?null===t:null===t?null===e:void 0===e?void 0===t:void 0===t?void 0===e:n(e,t)},"SparseMatrix, SparseMatrix":function(e,t){return a(e,t,n)},"SparseMatrix, DenseMatrix":function(e,t){return i(t,e,n,!0)},"DenseMatrix, SparseMatrix":function(e,t){return i(e,t,n,!1)},"DenseMatrix, DenseMatrix":function(e,t){return s(e,t,n)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"SparseMatrix, any":function(e,t){return o(e,t,n,!1)},"DenseMatrix, any":function(e,t){return u(e,t,n,!1)},"any, SparseMatrix":function(e,t){return o(t,e,n,!0)},"any, DenseMatrix":function(e,t){return u(t,e,n,!0)},"Array, any":function(e,t){return u(r(e),t,n,!1).valueOf()},"any, Array":function(e,t){return u(r(t),e,n,!0).valueOf()}})});factory(name$2l,["typed","equalScalar"],e=>{var{typed:e,equalScalar:r}=e;return e(name$2l,{"any, any":function(e,t){return null===e?null===t:null===t?null===e:void 0===e?void 0===t:void 0===t?void 0===e:r(e,t)}})});var name$2k="equalText",dependencies$2k=["typed","compareText","isZero"],createEqualText=factory(name$2k,dependencies$2k,e=>{var{typed:e,compareText:r,isZero:n}=e;return e(name$2k,{"any, any":function(e,t){return n(r(e,t))}})}),name$2j="smaller",dependencies$2j=["typed","config","matrix","DenseMatrix"],createSmaller=factory(name$2j,dependencies$2j,e=>{var{typed:t,config:r,matrix:n,DenseMatrix:e}=e,i=createAlgorithm03({typed:t}),a=createAlgorithm07({typed:t,DenseMatrix:e}),o=createAlgorithm12({typed:t,DenseMatrix:e}),s=createAlgorithm13({typed:t}),u=createAlgorithm14({typed:t});return t(name$2j,{"boolean, boolean":function(e,t){return e<t},"number, number":function(e,t){return e<t&&!nearlyEqual$1(e,t,r.epsilon)},"BigNumber, BigNumber":function(e,t){return e.lt(t)&&!nearlyEqual(e,t,r.epsilon)},"Fraction, Fraction":function(e,t){return-1===e.compare(t)},"Complex, Complex":function(e,t){throw new TypeError("No ordering relation is defined for complex numbers")},"Unit, Unit":function(e,t){if(!e.equalBase(t))throw new Error("Cannot compare units with different base");return this(e.value,t.value)},"SparseMatrix, SparseMatrix":function(e,t){return a(e,t,this)},"SparseMatrix, DenseMatrix":function(e,t){return i(t,e,this,!0)},"DenseMatrix, SparseMatrix":function(e,t){return i(e,t,this,!1)},"DenseMatrix, DenseMatrix":function(e,t){return s(e,t,this)},"Array, Array":function(e,t){return this(n(e),n(t)).valueOf()},"Array, Matrix":function(e,t){return this(n(e),t)},"Matrix, Array":function(e,t){return this(e,n(t))},"SparseMatrix, any":function(e,t){return o(e,t,this,!1)},"DenseMatrix, any":function(e,t){return u(e,t,this,!1)},"any, SparseMatrix":function(e,t){return o(t,e,this,!0)},"any, DenseMatrix":function(e,t){return u(t,e,this,!0)},"Array, any":function(e,t){return u(n(e),t,this,!1).valueOf()},"any, Array":function(e,t){return u(n(t),e,this,!0).valueOf()}})}),name$2i="smallerEq",dependencies$2i=["typed","config","matrix","DenseMatrix"],createSmallerEq=factory(name$2i,dependencies$2i,e=>{var{typed:t,config:r,matrix:n,DenseMatrix:e}=e,i=createAlgorithm03({typed:t}),a=createAlgorithm07({typed:t,DenseMatrix:e}),o=createAlgorithm12({typed:t,DenseMatrix:e}),s=createAlgorithm13({typed:t}),u=createAlgorithm14({typed:t});return t(name$2i,{"boolean, boolean":function(e,t){return e<=t},"number, number":function(e,t){return e<=t||nearlyEqual$1(e,t,r.epsilon)},"BigNumber, BigNumber":function(e,t){return e.lte(t)||nearlyEqual(e,t,r.epsilon)},"Fraction, Fraction":function(e,t){return 1!==e.compare(t)},"Complex, Complex":function(){throw new TypeError("No ordering relation is defined for complex numbers")},"Unit, Unit":function(e,t){if(!e.equalBase(t))throw new Error("Cannot compare units with different base");return this(e.value,t.value)},"SparseMatrix, SparseMatrix":function(e,t){return a(e,t,this)},"SparseMatrix, DenseMatrix":function(e,t){return i(t,e,this,!0)},"DenseMatrix, SparseMatrix":function(e,t){return i(e,t,this,!1)},"DenseMatrix, DenseMatrix":function(e,t){return s(e,t,this)},"Array, Array":function(e,t){return this(n(e),n(t)).valueOf()},"Array, Matrix":function(e,t){return this(n(e),t)},"Matrix, Array":function(e,t){return this(e,n(t))},"SparseMatrix, any":function(e,t){return o(e,t,this,!1)},"DenseMatrix, any":function(e,t){return u(e,t,this,!1)},"any, SparseMatrix":function(e,t){return o(t,e,this,!0)},"any, DenseMatrix":function(e,t){return u(t,e,this,!0)},"Array, any":function(e,t){return u(n(e),t,this,!1).valueOf()},"any, Array":function(e,t){return u(n(t),e,this,!0).valueOf()}})}),name$2h="larger",dependencies$2h=["typed","config","matrix","DenseMatrix"],createLarger=factory(name$2h,dependencies$2h,e=>{var{typed:t,config:r,matrix:n,DenseMatrix:e}=e,i=createAlgorithm03({typed:t}),a=createAlgorithm07({typed:t,DenseMatrix:e}),o=createAlgorithm12({typed:t,DenseMatrix:e}),s=createAlgorithm13({typed:t}),u=createAlgorithm14({typed:t});return t(name$2h,{"boolean, boolean":function(e,t){return t<e},"number, number":function(e,t){return t<e&&!nearlyEqual$1(e,t,r.epsilon)},"BigNumber, BigNumber":function(e,t){return e.gt(t)&&!nearlyEqual(e,t,r.epsilon)},"Fraction, Fraction":function(e,t){return 1===e.compare(t)},"Complex, Complex":function(){throw new TypeError("No ordering relation is defined for complex numbers")},"Unit, Unit":function(e,t){if(!e.equalBase(t))throw new Error("Cannot compare units with different base");return this(e.value,t.value)},"SparseMatrix, SparseMatrix":function(e,t){return a(e,t,this)},"SparseMatrix, DenseMatrix":function(e,t){return i(t,e,this,!0)},"DenseMatrix, SparseMatrix":function(e,t){return i(e,t,this,!1)},"DenseMatrix, DenseMatrix":function(e,t){return s(e,t,this)},"Array, Array":function(e,t){return this(n(e),n(t)).valueOf()},"Array, Matrix":function(e,t){return this(n(e),t)},"Matrix, Array":function(e,t){return this(e,n(t))},"SparseMatrix, any":function(e,t){return o(e,t,this,!1)},"DenseMatrix, any":function(e,t){return u(e,t,this,!1)},"any, SparseMatrix":function(e,t){return o(t,e,this,!0)},"any, DenseMatrix":function(e,t){return u(t,e,this,!0)},"Array, any":function(e,t){return u(n(e),t,this,!1).valueOf()},"any, Array":function(e,t){return u(n(t),e,this,!0).valueOf()}})}),name$2g="largerEq",dependencies$2g=["typed","config","matrix","DenseMatrix"],createLargerEq=factory(name$2g,dependencies$2g,e=>{var{typed:t,config:r,matrix:n,DenseMatrix:e}=e,i=createAlgorithm03({typed:t}),a=createAlgorithm07({typed:t,DenseMatrix:e}),o=createAlgorithm12({typed:t,DenseMatrix:e}),s=createAlgorithm13({typed:t}),u=createAlgorithm14({typed:t});return t(name$2g,{"boolean, boolean":function(e,t){return t<=e},"number, number":function(e,t){return t<=e||nearlyEqual$1(e,t,r.epsilon)},"BigNumber, BigNumber":function(e,t){return e.gte(t)||nearlyEqual(e,t,r.epsilon)},"Fraction, Fraction":function(e,t){return-1!==e.compare(t)},"Complex, Complex":function(){throw new TypeError("No ordering relation is defined for complex numbers")},"Unit, Unit":function(e,t){if(!e.equalBase(t))throw new Error("Cannot compare units with different base");return this(e.value,t.value)},"SparseMatrix, SparseMatrix":function(e,t){return a(e,t,this)},"SparseMatrix, DenseMatrix":function(e,t){return i(t,e,this,!0)},"DenseMatrix, SparseMatrix":function(e,t){return i(e,t,this,!1)},"DenseMatrix, DenseMatrix":function(e,t){return s(e,t,this)},"Array, Array":function(e,t){return this(n(e),n(t)).valueOf()},"Array, Matrix":function(e,t){return this(n(e),t)},"Matrix, Array":function(e,t){return this(e,n(t))},"SparseMatrix, any":function(e,t){return o(e,t,this,!1)},"DenseMatrix, any":function(e,t){return u(e,t,this,!1)},"any, SparseMatrix":function(e,t){return o(t,e,this,!0)},"any, DenseMatrix":function(e,t){return u(t,e,this,!0)},"Array, any":function(e,t){return u(n(e),t,this,!1).valueOf()},"any, Array":function(e,t){return u(n(t),e,this,!0).valueOf()}})}),name$2f="deepEqual",dependencies$2f=["typed","equal"],createDeepEqual=factory(name$2f,dependencies$2f,e=>{var{typed:e,equal:a}=e;return e(name$2f,{"any, any":function(e,t){return function e(t,r){{if(Array.isArray(t)){if(Array.isArray(r)){var n=t.length;if(n!==r.length)return!1;for(var i=0;i<n;i++)if(!e(t[i],r[i]))return!1;return!0}return!1}return!Array.isArray(r)&&a(t,r)}}(e.valueOf(),t.valueOf())}})}),name$2e="unequal",dependencies$2e=["typed","config","equalScalar","matrix","DenseMatrix"],createUnequal=factory(name$2e,dependencies$2e,e=>{var{typed:t,equalScalar:r,matrix:n,DenseMatrix:e}=e,i=createAlgorithm03({typed:t}),a=createAlgorithm07({typed:t,DenseMatrix:e}),o=createAlgorithm12({typed:t,DenseMatrix:e}),s=createAlgorithm13({typed:t}),u=createAlgorithm14({typed:t});return t("unequal",{"any, any":function(e,t){return null===e?null!==t:null===t?null!==e:void 0===e?void 0!==t:void 0===t?void 0!==e:c(e,t)},"SparseMatrix, SparseMatrix":function(e,t){return a(e,t,c)},"SparseMatrix, DenseMatrix":function(e,t){return i(t,e,c,!0)},"DenseMatrix, SparseMatrix":function(e,t){return i(e,t,c,!1)},"DenseMatrix, DenseMatrix":function(e,t){return s(e,t,c)},"Array, Array":function(e,t){return this(n(e),n(t)).valueOf()},"Array, Matrix":function(e,t){return this(n(e),t)},"Matrix, Array":function(e,t){return this(e,n(t))},"SparseMatrix, any":function(e,t){return o(e,t,c,!1)},"DenseMatrix, any":function(e,t){return u(e,t,c,!1)},"any, SparseMatrix":function(e,t){return o(t,e,c,!0)},"any, DenseMatrix":function(e,t){return u(t,e,c,!0)},"Array, any":function(e,t){return u(n(e),t,c,!1).valueOf()},"any, Array":function(e,t){return u(n(t),e,c,!0).valueOf()}});function c(e,t){return!r(e,t)}});factory(name$2e,["typed","equalScalar"],e=>{var{typed:e,equalScalar:r}=e;return e(name$2e,{"any, any":function(e,t){return null===e?null!==t:null===t?null!==e:void 0===e?void 0!==t:void 0===t?void 0!==e:!r(e,t)}})});var name$2d="partitionSelect",dependencies$2d=["typed","isNumeric","isNaN","compare"],createPartitionSelect=factory(name$2d,dependencies$2d,e=>{var{typed:e,isNumeric:l,isNaN:p,compare:r}=e,n=r,i=(e,t)=>-r(e,t);return e(name$2d,{"Array | Matrix, number":function(e,t){return a(e,t,n)},"Array | Matrix, number, string":function(e,t,r){if("asc"===r)return a(e,t,n);if("desc"===r)return a(e,t,i);throw new Error('Compare string must be "asc" or "desc"')},"Array | Matrix, number, function":a});function a(e,t,r){if(!isInteger$1(t)||t<0)throw new Error("k must be a non-negative integer");if(isMatrix(e)){if(1<e.size().length)throw new Error("Only one dimensional matrices supported");return o(e.valueOf(),t,r)}if(Array.isArray(e))return o(e,t,r)}function o(e,t,r){if(t>=e.length)throw new Error("k out of bounds");for(var n=0;n<e.length;n++)if(l(e[n])&&p(e[n]))return e[n];for(var i=0,a=e.length-1;i<a;){for(var o,s=i,u=a,c=e[Math.floor(Math.random()*(a-i+1))+i];s<u;)0<=r(e[s],c)?(o=e[u],e[u]=e[s],e[s]=o,--u):++s;0<r(e[s],c)&&--s,t<=s?a=s:i=s+1}return e[t]}}),name$2c="sort",dependencies$2c=["typed","matrix","compare","compareNatural"],createSort=factory(name$2c,dependencies$2c,e=>{var{typed:e,matrix:r,compare:n,compareNatural:t}=e,i=n,a=(e,t)=>-n(e,t);return e(name$2c,{Array:function(e){return s(e),e.sort(i)},Matrix:function(e){return u(e),r(e.toArray().sort(i),e.storage())},"Array, function":function(e,t){return s(e),e.sort(t)},"Matrix, function":function(e,t){return u(e),r(e.toArray().sort(t),e.storage())},"Array, string":function(e,t){return s(e),e.sort(o(t))},"Matrix, string":function(e,t){return u(e),r(e.toArray().sort(o(t)),e.storage())}});function o(e){if("asc"===e)return i;if("desc"===e)return a;if("natural"===e)return t;throw new Error('String "asc", "desc", or "natural" expected')}function s(e){if(1!==arraySize(e).length)throw new Error("One dimensional array expected")}function u(e){if(1!==e.size().length)throw new Error("One dimensional matrix expected")}}),name$2b="max",dependencies$2b=["typed","config","numeric","larger"],createMax=factory(name$2b,dependencies$2b,e=>{var{typed:e,config:t,numeric:n,larger:i}=e;return e(name$2b,{"Array | Matrix":a,"Array | Matrix, number | BigNumber":function(e,t){return reduce(e,t.valueOf(),r)},"...":function(e){if(containsCollections(e))throw new TypeError("Scalar values expected in function max");return a(e)}});function r(e,t){try{return i(e,t)?e:t}catch(e){throw improveErrorMessage(e,"max",t)}}function a(e){var r;if(deepForEach(e,function(t){try{isNaN(t)&&"number"==typeof t?r=NaN:void 0!==r&&!i(t,r)||(r=t)}catch(e){throw improveErrorMessage(e,"max",t)}}),void 0===r)throw new Error("Cannot calculate max of an empty array");return r="string"==typeof r?n(r,t.number):r}}),name$2a="min",dependencies$2a=["typed","config","numeric","smaller"],createMin=factory(name$2a,dependencies$2a,e=>{var{typed:e,config:t,numeric:n,smaller:i}=e;return e(name$2a,{"Array | Matrix":a,"Array | Matrix, number | BigNumber":function(e,t){return reduce(e,t.valueOf(),r)},"...":function(e){if(containsCollections(e))throw new TypeError("Scalar values expected in function min");return a(e)}});function r(e,t){try{return i(e,t)?e:t}catch(e){throw improveErrorMessage(e,"min",t)}}function a(e){var r;if(deepForEach(e,function(t){try{isNaN(t)&&"number"==typeof t?r=NaN:void 0!==r&&!i(t,r)||(r=t)}catch(e){throw improveErrorMessage(e,"min",t)}}),void 0===r)throw new Error("Cannot calculate min of an empty array");return r="string"==typeof r?n(r,t.number):r}}),name$29="ImmutableDenseMatrix",dependencies$29=["smaller","DenseMatrix"],createImmutableDenseMatrixClass=factory(name$29,dependencies$29,e=>{var{smaller:r,DenseMatrix:n}=e;function i(e,t){if(!(this instanceof i))throw new SyntaxError("Constructor must be called with the new operator");if(t&&!isString(t))throw new Error("Invalid datatype: "+t);if(isMatrix(e)||isArray(e)){var r=new n(e,t);this._data=r._data,this._size=r._size,this._datatype=r._datatype,this._min=null,this._max=null}else if(e&&isArray(e.data)&&isArray(e.size))this._data=e.data,this._size=e.size,this._datatype=e.datatype,this._min=void 0!==e.min?e.min:null,this._max=void 0!==e.max?e.max:null;else{if(e)throw new TypeError("Unsupported type of data ("+typeOf$1(e)+")");this._data=[],this._size=[0],this._datatype=t,this._min=null,this._max=null}}return(i.prototype=new n).type="ImmutableDenseMatrix",i.prototype.isImmutableDenseMatrix=!0,i.prototype.subset=function(e){switch(arguments.length){case 1:var t=n.prototype.subset.call(this,e);return isMatrix(t)?new i({data:t._data,size:t._size,datatype:t._datatype}):t;case 2:case 3:throw new Error("Cannot invoke set subset on an Immutable Matrix instance");default:throw new SyntaxError("Wrong number of arguments")}},i.prototype.set=function(){throw new Error("Cannot invoke set on an Immutable Matrix instance")},i.prototype.resize=function(){throw new Error("Cannot invoke resize on an Immutable Matrix instance")},i.prototype.reshape=function(){throw new Error("Cannot invoke reshape on an Immutable Matrix instance")},i.prototype.clone=function(){return new i({data:clone$1(this._data),size:clone$1(this._size),datatype:this._datatype})},i.prototype.toJSON=function(){return{mathjs:"ImmutableDenseMatrix",data:this._data,size:this._size,datatype:this._datatype}},i.fromJSON=function(e){return new i(e)},i.prototype.swapRows=function(){throw new Error("Cannot invoke swapRows on an Immutable Matrix instance")},i.prototype.min=function(){var t;return null===this._min&&(t=null,this.forEach(function(e){null!==t&&!r(e,t)||(t=e)}),this._min=null!==t?t:void 0),this._min},i.prototype.max=function(){var t;return null===this._max&&(t=null,this.forEach(function(e){null!==t&&!r(t,e)||(t=e)}),this._max=null!==t?t:void 0),this._max},i},{isClass:!0}),name$28="Index",dependencies$28=["ImmutableDenseMatrix"],createIndexClass=factory(name$28,dependencies$28,e=>{var n=e["ImmutableDenseMatrix"];function a(e){if(!(this instanceof a))throw new SyntaxError("Constructor must be called with the new operator");this._dimensions=[],this._isScalar=!0;for(var t=0,r=arguments.length;t<r;t++){var n=arguments[t];if(isRange(n))this._dimensions.push(n),this._isScalar=!1;else if(Array.isArray(n)||isMatrix(n)){var i=o(n.valueOf());this._dimensions.push(i);i=i.size();1===i.length&&1===i[0]||(this._isScalar=!1)}else if("number"==typeof n)this._dimensions.push(o([n]));else{if("string"!=typeof n)throw new TypeError("Dimension must be an Array, Matrix, number, string, or Range");this._dimensions.push(n)}}}function o(e){for(var t=0,r=e.length;t<r;t++)if("number"!=typeof e[t]||!isInteger$1(e[t]))throw new TypeError("Index parameters must be positive integer numbers");return new n(e)}return a.prototype.type="Index",a.prototype.isIndex=!0,a.prototype.clone=function(){var e=new a;return e._dimensions=clone$1(this._dimensions),e._isScalar=this._isScalar,e},a.create=function(e){var t=new a;return a.apply(t,e),t},a.prototype.size=function(){for(var e=[],t=0,r=this._dimensions.length;t<r;t++){var n=this._dimensions[t];e[t]="string"==typeof n?1:n.size()[0]}return e},a.prototype.max=function(){for(var e=[],t=0,r=this._dimensions.length;t<r;t++){var n=this._dimensions[t];e[t]="string"==typeof n?n:n.max()}return e},a.prototype.min=function(){for(var e=[],t=0,r=this._dimensions.length;t<r;t++){var n=this._dimensions[t];e[t]="string"==typeof n?n:n.min()}return e},a.prototype.forEach=function(e){for(var t=0,r=this._dimensions.length;t<r;t++)e(this._dimensions[t],t,this)},a.prototype.dimension=function(e){return this._dimensions[e]||null},a.prototype.isObjectProperty=function(){return 1===this._dimensions.length&&"string"==typeof this._dimensions[0]},a.prototype.getObjectProperty=function(){return this.isObjectProperty()?this._dimensions[0]:null},a.prototype.isScalar=function(){return this._isScalar},a.prototype.valueOf=a.prototype.toArray=function(){for(var e=[],t=0,r=this._dimensions.length;t<r;t++){var n=this._dimensions[t];e.push("string"==typeof n?n:n.toArray())}return e},a.prototype.toString=function(){for(var e=[],t=0,r=this._dimensions.length;t<r;t++){var n=this._dimensions[t];"string"==typeof n?e.push(JSON.stringify(n)):e.push(n.toString())}return"["+e.join(", ")+"]"},a.prototype.toJSON=function(){return{mathjs:"Index",dimensions:this._dimensions}},a.fromJSON=function(e){return a.create(e.dimensions)},a},{isClass:!0}),name$27="FibonacciHeap",dependencies$27=["smaller","larger"],createFibonacciHeapClass=factory(name$27,dependencies$27,e=>{var{smaller:p,larger:m}=e,f=1/Math.log((1+Math.sqrt(5))/2);function t(){if(!(this instanceof t))throw new SyntaxError("Constructor must be called with the new operator");this._minimum=null,this._size=0}function i(e,t,r){t.left.right=t.right,t.right.left=t.left,r.degree--,r.child===t&&(r.child=t.right),0===r.degree&&(r.child=null),t.left=e,t.right=e.right,((e.right=t).right.left=t).parent=null,t.mark=!1}t.prototype.type="FibonacciHeap",t.prototype.isFibonacciHeap=!0,t.prototype.insert=function(e,t){var r={key:e,value:t,degree:0};return this._minimum?(t=this._minimum,r.left=t,r.right=t.right,(t.right=r).right.left=r,p(e,t.key)&&(this._minimum=r)):((r.left=r).right=r,this._minimum=r),this._size++,r},t.prototype.size=function(){return this._size},t.prototype.clear=function(){this._minimum=null,this._size=0},t.prototype.isEmpty=function(){return 0===this._size},t.prototype.extractMinimum=function(){var e=this._minimum;if(null===e)return e;for(var t=this._minimum,r=e.degree,n=e.child;0<r;){var i=n.right;n.left.right=n.right,n.right.left=n.left,n.left=t,n.right=t.right,((t.right=n).right.left=n).parent=null,n=i,r--}return e.left.right=e.right,e.right.left=e.left,t=e===e.right?null:function(e,t){var r,n=Math.floor(Math.log(t)*f)+1,i=new Array(n),a=0,o=e;if(o)for(a++,o=o.right;o!==e;)a++,o=o.right;for(;0<a;){for(var s,u=o.degree,c=o.right;;){if(!(r=i[u]))break;m(o.key,r.key)&&(s=r,r=o,o=s),d(r,o),i[u]=null,u++}i[u]=o,o=c,a--}e=null;for(var l=0;l<n;l++)(r=i[l])&&(e?(r.left.right=r.right,r.right.left=r.left,r.left=e,r.right=e.right,(e.right=r).right.left=r,p(r.key,e.key)&&(e=r)):e=r);return e}(t=e.right,this._size),this._size--,this._minimum=t,e},t.prototype.remove=function(e){this._minimum=function(e,t,r){t.key=r;r=t.parent;r&&p(t.key,r.key)&&(i(e,t,r),function e(t,r){var n=r.parent;if(!n)return;r.mark?(i(t,r,n),e(n)):r.mark=!0}(e,r));p(t.key,e.key)&&(e=t);return e}(this._minimum,e,-1),this.extractMinimum()};var d=function(e,t){e.left.right=e.right,e.right.left=e.left,(e.parent=t).child?(e.left=t.child,e.right=t.child.right,(t.child.right=e).right.left=e):((t.child=e).right=e).left=e,t.degree++,e.mark=!1};return t},{isClass:!0}),name$26="Spa",dependencies$26=["addScalar","equalScalar","FibonacciHeap"],createSpaClass=factory(name$26,dependencies$26,e=>{var{addScalar:n,equalScalar:c,FibonacciHeap:t}=e;function r(){if(!(this instanceof r))throw new SyntaxError("Constructor must be called with the new operator");this._values=[],this._heap=new t}return r.prototype.type="Spa",r.prototype.isSpa=!0,r.prototype.set=function(e,t){this._values[e]?this._values[e].value=t:(t=this._heap.insert(e,t),this._values[e]=t)},r.prototype.get=function(e){e=this._values[e];return e?e.value:0},r.prototype.accumulate=function(e,t){var r=this._values[e];r?r.value=n(r.value,t):(r=this._heap.insert(e,t),this._values[e]=r)},r.prototype.forEach=function(e,t,r){var n=this._heap,i=this._values,a=[];for((s=n.extractMinimum())&&a.push(s);s&&s.key<=t;)s.key>=e&&(c(s.value,0)||r(s.key,s.value,this)),(s=n.extractMinimum())&&a.push(s);for(var o=0;o<a.length;o++){var s,u=a[o];i[(s=n.insert(u.key,u.value)).key]=s}},r.prototype.swap=function(e,t){var r=this._values[e],n=this._values[t];!r&&n?(r=this._heap.insert(e,n.value),this._heap.remove(n),this._values[e]=r,this._values[t]=void 0):r&&!n?(n=this._heap.insert(t,r.value),this._heap.remove(r),this._values[t]=n,this._values[e]=void 0):r&&n&&(e=r.value,r.value=n.value,n.value=e)},r},{isClass:!0}),createBigNumberE=memoize(function(e){return new e(1).exp()},{hasher:hasher}),createBigNumberPhi=memoize(function(e){return new e(1).plus(new e(5).sqrt()).div(2)},{hasher:hasher}),createBigNumberPi=memoize(function(e){return e.acos(-1)},{hasher:hasher}),createBigNumberTau=memoize(function(e){return createBigNumberPi(e).times(2)},{hasher:hasher});function hasher(e){return e[0].precision}function ownKeys(t,e){var r,n=Object.keys(t);return Object.getOwnPropertySymbols&&(r=Object.getOwnPropertySymbols(t),e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)),n}function _objectSpread(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ownKeys(Object(r),!0).forEach(function(e){_defineProperty(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ownKeys(Object(r)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}var name$25="Unit",dependencies$25=["?on","config","addScalar","subtract","multiplyScalar","divideScalar","pow","abs","fix","round","equal","isNumeric","format","number","Complex","BigNumber","Fraction"],createUnitClass=factory(name$25,dependencies$25,e=>{var h,y,N,{on:t,config:g,addScalar:u,subtract:c,multiplyScalar:l,divideScalar:p,pow:m,abs:f,fix:d,round:x,equal:v,isNumeric:n,format:a,number:r,Complex:e,BigNumber:b,Fraction:w}=e,i=r;function M(e,t){if(!(this instanceof M))throw new Error("Constructor must be called with the new operator");if(null!=e&&!n(e)&&!isComplex(e))throw new TypeError("First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined");if(void 0!==t&&("string"!=typeof t||""===t))throw new TypeError("Second parameter in Unit constructor must be a string");if(void 0!==t){t=M.parse(t);this.units=t.units,this.dimensions=t.dimensions}else{this.units=[{unit:R,prefix:T.NONE,power:0}],this.dimensions=[];for(var r=0;r<_.length;r++)this.dimensions[r]=0}this.value=null!=e?this._normalize(e):null,this.fixPrefix=!1,this.skipAutomaticSimplification=!0}function S(){for(;" "===N||"\t"===N;)E()}function $(e){return"0"<=e&&e<="9"}function E(){y++,N=h.charAt(y)}function o(e){y=e,N=h.charAt(y)}function A(){var e="",t=y;if("+"===N?E():"-"===N&&(e+=N,E()),!("0"<=(r=N)&&r<="9"||"."===r))return o(t),null;if("."===N){if(e+=N,E(),!$(N))return o(t),null}else{for(;$(N);)e+=N,E();"."===N&&(e+=N,E())}for(;$(N);)e+=N,E();if("E"===N||"e"===N){var r="",t=y;if(r+=N,E(),"+"!==N&&"-"!==N||(r+=N,E()),!$(N))return o(t),e;for(e+=r;$(N);)e+=N,E()}return e}function O(e){return N===e&&(E(),e)}M.prototype.type="Unit",M.prototype.isUnit=!0,M.parse=function(e,t){if(t=t||{},y=-1,N="","string"!=typeof(h=e))throw new TypeError("Invalid argument in Unit.parse, string expected");var r=new M,n=1,i=!(r.units=[]);E(),S();var a=A(),o=null;if(a){if("BigNumber"===g.number)o=new b(a);else if("Fraction"===g.number)try{o=new w(a)}catch(e){o=parseFloat(a)}else o=parseFloat(a);S(),O("*")?(n=1,i=!0):O("/")&&(n=-1,i=!0)}for(var s=[],u=1;;){for(S();"("===N;)s.push(n),u*=n,n=1,E(),S();var c=void 0;if(!N)break;var l=N;if(null===(c=function(){for(var e="";$(N)||M.isValidAlpha(N);)e+=N,E();var t=e.charAt(0);return M.isValidAlpha(t)?e:null}()))throw new SyntaxError('Unexpected "'+l+'" in "'+h+'" at index '+y.toString());var p=C(c);if(null===p)throw new SyntaxError('Unit "'+c+'" not found.');var m=n*u;if(S(),O("^")){S();var f=A();if(null===f)throw new SyntaxError('In "'+e+'", "^" must be followed by a floating-point number');m*=f}r.units.push({unit:p.unit,prefix:p.prefix,power:m});for(var d=0;d<_.length;d++)r.dimensions[d]+=(p.unit.dimensions[d]||0)*m;for(S();")"===N;){if(0===s.length)throw new SyntaxError('Unmatched ")" in "'+h+'" at index '+y.toString());u/=s.pop(),E(),S()}i=!1,O("*")?(n=1,i=!0):O("/")?(n=-1,i=!0):n=1,p.unit.base&&(f=p.unit.base.key,z.auto[f]={unit:p.unit,prefix:p.prefix})}if(S(),N)throw new SyntaxError('Could not parse: "'+e+'"');if(i)throw new SyntaxError('Trailing characters: "'+e+'"');if(0!==s.length)throw new SyntaxError('Unmatched "(" in "'+h+'"');if(0===r.units.length&&!t.allowNoUnits)throw new SyntaxError('"'+e+'" contains no units');return r.value=void 0!==o?r._normalize(o):null,r},M.prototype.clone=function(){var e=new M;e.fixPrefix=this.fixPrefix,e.skipAutomaticSimplification=this.skipAutomaticSimplification,e.value=clone$1(this.value),e.dimensions=this.dimensions.slice(0),e.units=[];for(var t=0;t<this.units.length;t++)for(var r in e.units[t]={},this.units[t])hasOwnProperty$1(this.units[t],r)&&(e.units[t][r]=this.units[t][r]);return e},M.prototype._isDerived=function(){return 0!==this.units.length&&(1<this.units.length||1e-15<Math.abs(this.units[0].power-1))},M.prototype._normalize=function(e){var t,r,n,i;if(null==e||0===this.units.length)return e;if(this._isDerived()){for(var a=e,o=M._getNumberConverter(typeOf$1(e)),s=0;s<this.units.length;s++)t=o(this.units[s].unit.value),i=o(this.units[s].prefix.value),n=o(this.units[s].power),a=l(a,m(l(t,i),n));return a}return t=(o=M._getNumberConverter(typeOf$1(e)))(this.units[0].unit.value),r=o(this.units[0].unit.offset),i=o(this.units[0].prefix.value),l(u(e,r),l(t,i))},M.prototype._denormalize=function(e,t){var r,n,i,a;if(null==e||0===this.units.length)return e;if(this._isDerived()){for(var o=e,s=M._getNumberConverter(typeOf$1(e)),u=0;u<this.units.length;u++)r=s(this.units[u].unit.value),a=s(this.units[u].prefix.value),i=s(this.units[u].power),o=p(o,m(l(r,a),i));return o}return r=(s=M._getNumberConverter(typeOf$1(e)))(this.units[0].unit.value),a=s(this.units[0].prefix.value),n=s(this.units[0].unit.offset),c(p(p(e,r),null==t?a:t),n)};var C=memoize(e=>{if(hasOwnProperty$1(B,e)){var t=B[e];return{unit:t,prefix:t.prefixes[""]}}for(var r in B)if(hasOwnProperty$1(B,r)&&endsWith(e,r)){var n=B[r],r=e.length-r.length,r=e.substring(0,r),r=hasOwnProperty$1(n.prefixes,r)?n.prefixes[r]:void 0;if(void 0!==r)return{unit:n,prefix:r}}return null},{hasher:e=>e[0],limit:100});function s(e){return e.equalBase(I.NONE)&&null!==e.value&&!g.predictable?e.value:e}M.isValuelessUnit=function(e){return null!==C(e)},M.prototype.hasBase=function(e){if(!(e="string"==typeof e?I[e]:e))return!1;for(var t=0;t<_.length;t++)if(1e-12<Math.abs((this.dimensions[t]||0)-(e.dimensions[t]||0)))return!1;return!0},M.prototype.equalBase=function(e){for(var t=0;t<_.length;t++)if(1e-12<Math.abs((this.dimensions[t]||0)-(e.dimensions[t]||0)))return!1;return!0},M.prototype.equals=function(e){return this.equalBase(e)&&v(this.value,e.value)},M.prototype.multiply=function(e){for(var t=this.clone(),r=0;r<_.length;r++)t.dimensions[r]=(this.dimensions[r]||0)+(e.dimensions[r]||0);for(var n,i,a=0;a<e.units.length;a++){var o=_objectSpread({},e.units[a]);t.units.push(o)}return null!==this.value||null!==e.value?(n=null===this.value?this._normalize(1):this.value,i=null===e.value?e._normalize(1):e.value,t.value=l(n,i)):t.value=null,t.skipAutomaticSimplification=!1,s(t)},M.prototype.divide=function(e){for(var t=this.clone(),r=0;r<_.length;r++)t.dimensions[r]=(this.dimensions[r]||0)-(e.dimensions[r]||0);for(var n,i,a=0;a<e.units.length;a++){var o=_objectSpread(_objectSpread({},e.units[a]),{},{power:-e.units[a].power});t.units.push(o)}return null!==this.value||null!==e.value?(n=null===this.value?this._normalize(1):this.value,i=null===e.value?e._normalize(1):e.value,t.value=p(n,i)):t.value=null,t.skipAutomaticSimplification=!1,s(t)},M.prototype.pow=function(e){for(var t=this.clone(),r=0;r<_.length;r++)t.dimensions[r]=(this.dimensions[r]||0)*e;for(var n=0;n<t.units.length;n++)t.units[n].power*=e;return null!==t.value?t.value=m(t.value,e):t.value=null,t.skipAutomaticSimplification=!1,s(t)},M.prototype.abs=function(){var e,t=this.clone();for(e in t.value=null!==t.value?f(t.value):null,t.units)"VA"!==t.units[e].unit.name&&"VAR"!==t.units[e].unit.name||(t.units[e].unit=B.W);return t},M.prototype.to=function(e){var t,r=null===this.value?this._normalize(1):this.value;if("string"==typeof e){if(t=M.parse(e),!this.equalBase(t))throw new Error("Units do not match ('".concat(t.toString(),"' != '").concat(this.toString(),"')"));if(null!==t.value)throw new Error("Cannot convert to a unit with a value");return t.value=clone$1(r),t.fixPrefix=!0,t.skipAutomaticSimplification=!0,t}if(isUnit(e)){if(!this.equalBase(e))throw new Error("Units do not match ('".concat(e.toString(),"' != '").concat(this.toString(),"')"));if(null!==e.value)throw new Error("Cannot convert to a unit with a value");return(t=e.clone()).value=clone$1(r),t.fixPrefix=!0,t.skipAutomaticSimplification=!0,t}throw new Error("String or Unit expected as parameter")},M.prototype.toNumber=function(e){return i(this.toNumeric(e))},M.prototype.toNumeric=function(e){e=e?this.to(e):this.clone();return e._isDerived()||0===e.units.length?e._denormalize(e.value):e._denormalize(e.value,e.units[0].prefix.value)},M.prototype.toString=function(){return this.format()},M.prototype.toJSON=function(){return{mathjs:"Unit",value:this._denormalize(this.value),unit:this.formatUnits(),fixPrefix:this.fixPrefix}},M.fromJSON=function(e){var t=new M(e.value,e.unit);return t.fixPrefix=e.fixPrefix||!1,t},M.prototype.valueOf=M.prototype.toString,M.prototype.simplify=function(){var e,t,r,n=this.clone(),i=[];for(t in L)if(hasOwnProperty$1(L,t)&&n.hasBase(I[t])){e=t;break}if("NONE"===e)n.units=[];else if(r=e&&hasOwnProperty$1(L,e)?L[e]:r)n.units=[{unit:r.unit,prefix:r.prefix,power:1}];else{for(var a=!1,o=0;o<_.length;o++){var s=_[o];1e-12<Math.abs(n.dimensions[o]||0)&&(hasOwnProperty$1(L,s)?i.push({unit:L[s].unit,prefix:L[s].prefix,power:n.dimensions[o]||0}):a=!0)}i.length<n.units.length&&!a&&(n.units=i)}return n},M.prototype.toSI=function(){for(var e=this.clone(),t=[],r=0;r<_.length;r++){var n=_[r];if(1e-12<Math.abs(e.dimensions[r]||0)){if(!hasOwnProperty$1(z.si,n))throw new Error("Cannot express custom unit "+n+" in SI units");t.push({unit:z.si[n].unit,prefix:z.si[n].prefix,power:e.dimensions[r]||0})}}return e.units=t,e.fixPrefix=!0,e.skipAutomaticSimplification=!0,e},M.prototype.formatUnits=function(){for(var e="",t="",r=0,n=0,i=0;i<this.units.length;i++)0<this.units[i].power?(r++,e+=" "+this.units[i].prefix.name+this.units[i].unit.name,1e-15<Math.abs(this.units[i].power-1)&&(e+="^"+this.units[i].power)):this.units[i].power<0&&n++;if(0<n)for(var a=0;a<this.units.length;a++)this.units[a].power<0&&(0<r?(t+=" "+this.units[a].prefix.name+this.units[a].unit.name,1e-15<Math.abs(this.units[a].power+1)&&(t+="^"+-this.units[a].power)):(t+=" "+this.units[a].prefix.name+this.units[a].unit.name,t+="^"+this.units[a].power));var e=e.substr(1),t=t.substr(1),o=e=1<r&&0<n?"("+e+")":e;return 0<r&&0<n&&(o+=" / "),o+=t=1<n&&0<r?"("+t+")":t},M.prototype.format=function(e){var t,r=this.skipAutomaticSimplification||null===this.value?this.clone():this.simplify(),n=!1;for(t in void 0!==r.value&&null!==r.value&&isComplex(r.value)&&(n=Math.abs(r.value.re)<1e-14),r.units)hasOwnProperty$1(r.units,t)&&r.units[t].unit&&("VA"===r.units[t].unit.name&&n?r.units[t].unit=B.VAR:"VAR"!==r.units[t].unit.name||n||(r.units[t].unit=B.VA));1!==r.units.length||r.fixPrefix||Math.abs(r.units[0].power-Math.round(r.units[0].power))<1e-14&&(r.units[0].prefix=r._bestPrefix());var i=r._denormalize(r.value),i=null!==r.value?a(i,e||{}):"",e=r.formatUnits();return r.value&&isComplex(r.value)&&(i="("+i+")"),0<e.length&&0<i.length&&(i+=" "),i+=e},M.prototype._bestPrefix=function(){if(1!==this.units.length)throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");if(1e-14<=Math.abs(this.units[0].power-Math.round(this.units[0].power)))throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");var e=null!==this.value?f(this.value):0,t=f(this.units[0].unit.value),r=this.units[0].prefix;if(0===e)return r;var n=this.units[0].power;if(-2.200001<(s=Math.log(e/Math.pow(r.value*t,n))/Math.LN10-1.2)&&s<1.800001)return r;var i,a,o,s=Math.abs(s),u=this.units[0].unit.prefixes;for(i in u)hasOwnProperty$1(u,i)&&(!(a=u[i]).scientific||((o=Math.abs(Math.log(e/Math.pow(a.value*t,n))/Math.LN10-1.2))<s||o===s&&a.name.length<r.name.length)&&(r=a,s=o));return r};var T={NONE:{"":{name:"",value:1,scientific:!0}},SHORT:{"":{name:"",value:1,scientific:!0},da:{name:"da",value:10,scientific:!(M.prototype.splitUnit=function(e){for(var t=this.clone(),r=[],n=0;n<e.length&&(t=t.to(e[n]),n!==e.length-1);n++){var i=t.toNumeric(),a=x(i),a=new M(v(a,i)?a:d(t.toNumeric()),e[n].toString());r.push(a),t=c(t,a)}for(var o=0,s=0;s<r.length;s++)o=u(o,r[s].value);return v(o,this.value)&&(t.value=0),r.push(t),r})},h:{name:"h",value:100,scientific:!1},k:{name:"k",value:1e3,scientific:!0},M:{name:"M",value:1e6,scientific:!0},G:{name:"G",value:1e9,scientific:!0},T:{name:"T",value:1e12,scientific:!0},P:{name:"P",value:1e15,scientific:!0},E:{name:"E",value:1e18,scientific:!0},Z:{name:"Z",value:1e21,scientific:!0},Y:{name:"Y",value:1e24,scientific:!0},d:{name:"d",value:.1,scientific:!1},c:{name:"c",value:.01,scientific:!1},m:{name:"m",value:.001,scientific:!0},u:{name:"u",value:1e-6,scientific:!0},n:{name:"n",value:1e-9,scientific:!0},p:{name:"p",value:1e-12,scientific:!0},f:{name:"f",value:1e-15,scientific:!0},a:{name:"a",value:1e-18,scientific:!0},z:{name:"z",value:1e-21,scientific:!0},y:{name:"y",value:1e-24,scientific:!0}},LONG:{"":{name:"",value:1,scientific:!0},deca:{name:"deca",value:10,scientific:!1},hecto:{name:"hecto",value:100,scientific:!1},kilo:{name:"kilo",value:1e3,scientific:!0},mega:{name:"mega",value:1e6,scientific:!0},giga:{name:"giga",value:1e9,scientific:!0},tera:{name:"tera",value:1e12,scientific:!0},peta:{name:"peta",value:1e15,scientific:!0},exa:{name:"exa",value:1e18,scientific:!0},zetta:{name:"zetta",value:1e21,scientific:!0},yotta:{name:"yotta",value:1e24,scientific:!0},deci:{name:"deci",value:.1,scientific:!1},centi:{name:"centi",value:.01,scientific:!1},milli:{name:"milli",value:.001,scientific:!0},micro:{name:"micro",value:1e-6,scientific:!0},nano:{name:"nano",value:1e-9,scientific:!0},pico:{name:"pico",value:1e-12,scientific:!0},femto:{name:"femto",value:1e-15,scientific:!0},atto:{name:"atto",value:1e-18,scientific:!0},zepto:{name:"zepto",value:1e-21,scientific:!0},yocto:{name:"yocto",value:1e-24,scientific:!0}},SQUARED:{"":{name:"",value:1,scientific:!0},da:{name:"da",value:100,scientific:!1},h:{name:"h",value:1e4,scientific:!1},k:{name:"k",value:1e6,scientific:!0},M:{name:"M",value:1e12,scientific:!0},G:{name:"G",value:1e18,scientific:!0},T:{name:"T",value:1e24,scientific:!0},P:{name:"P",value:1e30,scientific:!0},E:{name:"E",value:1e36,scientific:!0},Z:{name:"Z",value:1e42,scientific:!0},Y:{name:"Y",value:1e48,scientific:!0},d:{name:"d",value:.01,scientific:!1},c:{name:"c",value:1e-4,scientific:!1},m:{name:"m",value:1e-6,scientific:!0},u:{name:"u",value:1e-12,scientific:!0},n:{name:"n",value:1e-18,scientific:!0},p:{name:"p",value:1e-24,scientific:!0},f:{name:"f",value:1e-30,scientific:!0},a:{name:"a",value:1e-36,scientific:!0},z:{name:"z",value:1e-42,scientific:!0},y:{name:"y",value:1e-48,scientific:!0}},CUBIC:{"":{name:"",value:1,scientific:!0},da:{name:"da",value:1e3,scientific:!1},h:{name:"h",value:1e6,scientific:!1},k:{name:"k",value:1e9,scientific:!0},M:{name:"M",value:1e18,scientific:!0},G:{name:"G",value:1e27,scientific:!0},T:{name:"T",value:1e36,scientific:!0},P:{name:"P",value:1e45,scientific:!0},E:{name:"E",value:1e54,scientific:!0},Z:{name:"Z",value:1e63,scientific:!0},Y:{name:"Y",value:1e72,scientific:!0},d:{name:"d",value:.001,scientific:!1},c:{name:"c",value:1e-6,scientific:!1},m:{name:"m",value:1e-9,scientific:!0},u:{name:"u",value:1e-18,scientific:!0},n:{name:"n",value:1e-27,scientific:!0},p:{name:"p",value:1e-36,scientific:!0},f:{name:"f",value:1e-45,scientific:!0},a:{name:"a",value:1e-54,scientific:!0},z:{name:"z",value:1e-63,scientific:!0},y:{name:"y",value:1e-72,scientific:!0}},BINARY_SHORT_SI:{"":{name:"",value:1,scientific:!0},k:{name:"k",value:1e3,scientific:!0},M:{name:"M",value:1e6,scientific:!0},G:{name:"G",value:1e9,scientific:!0},T:{name:"T",value:1e12,scientific:!0},P:{name:"P",value:1e15,scientific:!0},E:{name:"E",value:1e18,scientific:!0},Z:{name:"Z",value:1e21,scientific:!0},Y:{name:"Y",value:1e24,scientific:!0}},BINARY_SHORT_IEC:{"":{name:"",value:1,scientific:!0},Ki:{name:"Ki",value:1024,scientific:!0},Mi:{name:"Mi",value:Math.pow(1024,2),scientific:!0},Gi:{name:"Gi",value:Math.pow(1024,3),scientific:!0},Ti:{name:"Ti",value:Math.pow(1024,4),scientific:!0},Pi:{name:"Pi",value:Math.pow(1024,5),scientific:!0},Ei:{name:"Ei",value:Math.pow(1024,6),scientific:!0},Zi:{name:"Zi",value:Math.pow(1024,7),scientific:!0},Yi:{name:"Yi",value:Math.pow(1024,8),scientific:!0}},BINARY_LONG_SI:{"":{name:"",value:1,scientific:!0},kilo:{name:"kilo",value:1e3,scientific:!0},mega:{name:"mega",value:1e6,scientific:!0},giga:{name:"giga",value:1e9,scientific:!0},tera:{name:"tera",value:1e12,scientific:!0},peta:{name:"peta",value:1e15,scientific:!0},exa:{name:"exa",value:1e18,scientific:!0},zetta:{name:"zetta",value:1e21,scientific:!0},yotta:{name:"yotta",value:1e24,scientific:!0}},BINARY_LONG_IEC:{"":{name:"",value:1,scientific:!0},kibi:{name:"kibi",value:1024,scientific:!0},mebi:{name:"mebi",value:Math.pow(1024,2),scientific:!0},gibi:{name:"gibi",value:Math.pow(1024,3),scientific:!0},tebi:{name:"tebi",value:Math.pow(1024,4),scientific:!0},pebi:{name:"pebi",value:Math.pow(1024,5),scientific:!0},exi:{name:"exi",value:Math.pow(1024,6),scientific:!0},zebi:{name:"zebi",value:Math.pow(1024,7),scientific:!0},yobi:{name:"yobi",value:Math.pow(1024,8),scientific:!0}},BTU:{"":{name:"",value:1,scientific:!0},MM:{name:"MM",value:1e6,scientific:!0}}};T.SHORTLONG=_extends$1({},T.SHORT,T.LONG),T.BINARY_SHORT=_extends$1({},T.BINARY_SHORT_SI,T.BINARY_SHORT_IEC),T.BINARY_LONG=_extends$1({},T.BINARY_LONG_SI,T.BINARY_LONG_IEC);var D,_=["MASS","LENGTH","TIME","CURRENT","TEMPERATURE","LUMINOUS_INTENSITY","AMOUNT_OF_SUBSTANCE","ANGLE","BIT"],I={NONE:{dimensions:[0,0,0,0,0,0,0,0,0]},MASS:{dimensions:[1,0,0,0,0,0,0,0,0]},LENGTH:{dimensions:[0,1,0,0,0,0,0,0,0]},TIME:{dimensions:[0,0,1,0,0,0,0,0,0]},CURRENT:{dimensions:[0,0,0,1,0,0,0,0,0]},TEMPERATURE:{dimensions:[0,0,0,0,1,0,0,0,0]},LUMINOUS_INTENSITY:{dimensions:[0,0,0,0,0,1,0,0,0]},AMOUNT_OF_SUBSTANCE:{dimensions:[0,0,0,0,0,0,1,0,0]},FORCE:{dimensions:[1,1,-2,0,0,0,0,0,0]},SURFACE:{dimensions:[0,2,0,0,0,0,0,0,0]},VOLUME:{dimensions:[0,3,0,0,0,0,0,0,0]},ENERGY:{dimensions:[1,2,-2,0,0,0,0,0,0]},POWER:{dimensions:[1,2,-3,0,0,0,0,0,0]},PRESSURE:{dimensions:[1,-1,-2,0,0,0,0,0,0]},ELECTRIC_CHARGE:{dimensions:[0,0,1,1,0,0,0,0,0]},ELECTRIC_CAPACITANCE:{dimensions:[-1,-2,4,2,0,0,0,0,0]},ELECTRIC_POTENTIAL:{dimensions:[1,2,-3,-1,0,0,0,0,0]},ELECTRIC_RESISTANCE:{dimensions:[1,2,-3,-2,0,0,0,0,0]},ELECTRIC_INDUCTANCE:{dimensions:[1,2,-2,-2,0,0,0,0,0]},ELECTRIC_CONDUCTANCE:{dimensions:[-1,-2,3,2,0,0,0,0,0]},MAGNETIC_FLUX:{dimensions:[1,2,-2,-1,0,0,0,0,0]},MAGNETIC_FLUX_DENSITY:{dimensions:[1,0,-2,-1,0,0,0,0,0]},FREQUENCY:{dimensions:[0,0,-1,0,0,0,0,0,0]},ANGLE:{dimensions:[0,0,0,0,0,0,0,1,0]},BIT:{dimensions:[0,0,0,0,0,0,0,0,1]}};for(D in I)hasOwnProperty$1(I,D)&&(I[D].key=D);var R={name:"",base:{},value:1,offset:0,dimensions:_.map(e=>0)},B={meter:{name:"meter",base:I.LENGTH,prefixes:T.LONG,value:1,offset:0},inch:{name:"inch",base:I.LENGTH,prefixes:T.NONE,value:.0254,offset:0},foot:{name:"foot",base:I.LENGTH,prefixes:T.NONE,value:.3048,offset:0},yard:{name:"yard",base:I.LENGTH,prefixes:T.NONE,value:.9144,offset:0},mile:{name:"mile",base:I.LENGTH,prefixes:T.NONE,value:1609.344,offset:0},link:{name:"link",base:I.LENGTH,prefixes:T.NONE,value:.201168,offset:0},rod:{name:"rod",base:I.LENGTH,prefixes:T.NONE,value:5.0292,offset:0},chain:{name:"chain",base:I.LENGTH,prefixes:T.NONE,value:20.1168,offset:0},angstrom:{name:"angstrom",base:I.LENGTH,prefixes:T.NONE,value:1e-10,offset:0},m:{name:"m",base:I.LENGTH,prefixes:T.SHORT,value:1,offset:0},in:{name:"in",base:I.LENGTH,prefixes:T.NONE,value:.0254,offset:0},ft:{name:"ft",base:I.LENGTH,prefixes:T.NONE,value:.3048,offset:0},yd:{name:"yd",base:I.LENGTH,prefixes:T.NONE,value:.9144,offset:0},mi:{name:"mi",base:I.LENGTH,prefixes:T.NONE,value:1609.344,offset:0},li:{name:"li",base:I.LENGTH,prefixes:T.NONE,value:.201168,offset:0},rd:{name:"rd",base:I.LENGTH,prefixes:T.NONE,value:5.02921,offset:0},ch:{name:"ch",base:I.LENGTH,prefixes:T.NONE,value:20.1168,offset:0},mil:{name:"mil",base:I.LENGTH,prefixes:T.NONE,value:254e-7,offset:0},m2:{name:"m2",base:I.SURFACE,prefixes:T.SQUARED,value:1,offset:0},sqin:{name:"sqin",base:I.SURFACE,prefixes:T.NONE,value:64516e-8,offset:0},sqft:{name:"sqft",base:I.SURFACE,prefixes:T.NONE,value:.09290304,offset:0},sqyd:{name:"sqyd",base:I.SURFACE,prefixes:T.NONE,value:.83612736,offset:0},sqmi:{name:"sqmi",base:I.SURFACE,prefixes:T.NONE,value:2589988.110336,offset:0},sqrd:{name:"sqrd",base:I.SURFACE,prefixes:T.NONE,value:25.29295,offset:0},sqch:{name:"sqch",base:I.SURFACE,prefixes:T.NONE,value:404.6873,offset:0},sqmil:{name:"sqmil",base:I.SURFACE,prefixes:T.NONE,value:6.4516e-10,offset:0},acre:{name:"acre",base:I.SURFACE,prefixes:T.NONE,value:4046.86,offset:0},hectare:{name:"hectare",base:I.SURFACE,prefixes:T.NONE,value:1e4,offset:0},m3:{name:"m3",base:I.VOLUME,prefixes:T.CUBIC,value:1,offset:0},L:{name:"L",base:I.VOLUME,prefixes:T.SHORT,value:.001,offset:0},l:{name:"l",base:I.VOLUME,prefixes:T.SHORT,value:.001,offset:0},litre:{name:"litre",base:I.VOLUME,prefixes:T.LONG,value:.001,offset:0},cuin:{name:"cuin",base:I.VOLUME,prefixes:T.NONE,value:16387064e-12,offset:0},cuft:{name:"cuft",base:I.VOLUME,prefixes:T.NONE,value:.028316846592,offset:0},cuyd:{name:"cuyd",base:I.VOLUME,prefixes:T.NONE,value:.764554857984,offset:0},teaspoon:{name:"teaspoon",base:I.VOLUME,prefixes:T.NONE,value:5e-6,offset:0},tablespoon:{name:"tablespoon",base:I.VOLUME,prefixes:T.NONE,value:15e-6,offset:0},drop:{name:"drop",base:I.VOLUME,prefixes:T.NONE,value:5e-8,offset:0},gtt:{name:"gtt",base:I.VOLUME,prefixes:T.NONE,value:5e-8,offset:0},minim:{name:"minim",base:I.VOLUME,prefixes:T.NONE,value:6.161152e-8,offset:0},fluiddram:{name:"fluiddram",base:I.VOLUME,prefixes:T.NONE,value:36966911e-13,offset:0},fluidounce:{name:"fluidounce",base:I.VOLUME,prefixes:T.NONE,value:2957353e-11,offset:0},gill:{name:"gill",base:I.VOLUME,prefixes:T.NONE,value:.0001182941,offset:0},cc:{name:"cc",base:I.VOLUME,prefixes:T.NONE,value:1e-6,offset:0},cup:{name:"cup",base:I.VOLUME,prefixes:T.NONE,value:.0002365882,offset:0},pint:{name:"pint",base:I.VOLUME,prefixes:T.NONE,value:.0004731765,offset:0},quart:{name:"quart",base:I.VOLUME,prefixes:T.NONE,value:.0009463529,offset:0},gallon:{name:"gallon",base:I.VOLUME,prefixes:T.NONE,value:.003785412,offset:0},beerbarrel:{name:"beerbarrel",base:I.VOLUME,prefixes:T.NONE,value:.1173478,offset:0},oilbarrel:{name:"oilbarrel",base:I.VOLUME,prefixes:T.NONE,value:.1589873,offset:0},hogshead:{name:"hogshead",base:I.VOLUME,prefixes:T.NONE,value:.238481,offset:0},fldr:{name:"fldr",base:I.VOLUME,prefixes:T.NONE,value:36966911e-13,offset:0},floz:{name:"floz",base:I.VOLUME,prefixes:T.NONE,value:2957353e-11,offset:0},gi:{name:"gi",base:I.VOLUME,prefixes:T.NONE,value:.0001182941,offset:0},cp:{name:"cp",base:I.VOLUME,prefixes:T.NONE,value:.0002365882,offset:0},pt:{name:"pt",base:I.VOLUME,prefixes:T.NONE,value:.0004731765,offset:0},qt:{name:"qt",base:I.VOLUME,prefixes:T.NONE,value:.0009463529,offset:0},gal:{name:"gal",base:I.VOLUME,prefixes:T.NONE,value:.003785412,offset:0},bbl:{name:"bbl",base:I.VOLUME,prefixes:T.NONE,value:.1173478,offset:0},obl:{name:"obl",base:I.VOLUME,prefixes:T.NONE,value:.1589873,offset:0},g:{name:"g",base:I.MASS,prefixes:T.SHORT,value:.001,offset:0},gram:{name:"gram",base:I.MASS,prefixes:T.LONG,value:.001,offset:0},ton:{name:"ton",base:I.MASS,prefixes:T.SHORT,value:907.18474,offset:0},t:{name:"t",base:I.MASS,prefixes:T.SHORT,value:1e3,offset:0},tonne:{name:"tonne",base:I.MASS,prefixes:T.LONG,value:1e3,offset:0},grain:{name:"grain",base:I.MASS,prefixes:T.NONE,value:6479891e-11,offset:0},dram:{name:"dram",base:I.MASS,prefixes:T.NONE,value:.0017718451953125,offset:0},ounce:{name:"ounce",base:I.MASS,prefixes:T.NONE,value:.028349523125,offset:0},poundmass:{name:"poundmass",base:I.MASS,prefixes:T.NONE,value:.45359237,offset:0},hundredweight:{name:"hundredweight",base:I.MASS,prefixes:T.NONE,value:45.359237,offset:0},stick:{name:"stick",base:I.MASS,prefixes:T.NONE,value:.115,offset:0},stone:{name:"stone",base:I.MASS,prefixes:T.NONE,value:6.35029318,offset:0},gr:{name:"gr",base:I.MASS,prefixes:T.NONE,value:6479891e-11,offset:0},dr:{name:"dr",base:I.MASS,prefixes:T.NONE,value:.0017718451953125,offset:0},oz:{name:"oz",base:I.MASS,prefixes:T.NONE,value:.028349523125,offset:0},lbm:{name:"lbm",base:I.MASS,prefixes:T.NONE,value:.45359237,offset:0},cwt:{name:"cwt",base:I.MASS,prefixes:T.NONE,value:45.359237,offset:0},s:{name:"s",base:I.TIME,prefixes:T.SHORT,value:1,offset:0},min:{name:"min",base:I.TIME,prefixes:T.NONE,value:60,offset:0},h:{name:"h",base:I.TIME,prefixes:T.NONE,value:3600,offset:0},second:{name:"second",base:I.TIME,prefixes:T.LONG,value:1,offset:0},sec:{name:"sec",base:I.TIME,prefixes:T.LONG,value:1,offset:0},minute:{name:"minute",base:I.TIME,prefixes:T.NONE,value:60,offset:0},hour:{name:"hour",base:I.TIME,prefixes:T.NONE,value:3600,offset:0},day:{name:"day",base:I.TIME,prefixes:T.NONE,value:86400,offset:0},week:{name:"week",base:I.TIME,prefixes:T.NONE,value:604800,offset:0},month:{name:"month",base:I.TIME,prefixes:T.NONE,value:2629800,offset:0},year:{name:"year",base:I.TIME,prefixes:T.NONE,value:31557600,offset:0},decade:{name:"decade",base:I.TIME,prefixes:T.NONE,value:315576e3,offset:0},century:{name:"century",base:I.TIME,prefixes:T.NONE,value:315576e4,offset:0},millennium:{name:"millennium",base:I.TIME,prefixes:T.NONE,value:315576e5,offset:0},hertz:{name:"Hertz",base:I.FREQUENCY,prefixes:T.LONG,value:1,offset:0,reciprocal:!0},Hz:{name:"Hz",base:I.FREQUENCY,prefixes:T.SHORT,value:1,offset:0,reciprocal:!0},rad:{name:"rad",base:I.ANGLE,prefixes:T.SHORT,value:1,offset:0},radian:{name:"radian",base:I.ANGLE,prefixes:T.LONG,value:1,offset:0},deg:{name:"deg",base:I.ANGLE,prefixes:T.SHORT,value:null,offset:0},degree:{name:"degree",base:I.ANGLE,prefixes:T.LONG,value:null,offset:0},grad:{name:"grad",base:I.ANGLE,prefixes:T.SHORT,value:null,offset:0},gradian:{name:"gradian",base:I.ANGLE,prefixes:T.LONG,value:null,offset:0},cycle:{name:"cycle",base:I.ANGLE,prefixes:T.NONE,value:null,offset:0},arcsec:{name:"arcsec",base:I.ANGLE,prefixes:T.NONE,value:null,offset:0},arcmin:{name:"arcmin",base:I.ANGLE,prefixes:T.NONE,value:null,offset:0},A:{name:"A",base:I.CURRENT,prefixes:T.SHORT,value:1,offset:0},ampere:{name:"ampere",base:I.CURRENT,prefixes:T.LONG,value:1,offset:0},K:{name:"K",base:I.TEMPERATURE,prefixes:T.NONE,value:1,offset:0},degC:{name:"degC",base:I.TEMPERATURE,prefixes:T.NONE,value:1,offset:273.15},degF:{name:"degF",base:I.TEMPERATURE,prefixes:T.NONE,value:1/1.8,offset:459.67},degR:{name:"degR",base:I.TEMPERATURE,prefixes:T.NONE,value:1/1.8,offset:0},kelvin:{name:"kelvin",base:I.TEMPERATURE,prefixes:T.NONE,value:1,offset:0},celsius:{name:"celsius",base:I.TEMPERATURE,prefixes:T.NONE,value:1,offset:273.15},fahrenheit:{name:"fahrenheit",base:I.TEMPERATURE,prefixes:T.NONE,value:1/1.8,offset:459.67},rankine:{name:"rankine",base:I.TEMPERATURE,prefixes:T.NONE,value:1/1.8,offset:0},mol:{name:"mol",base:I.AMOUNT_OF_SUBSTANCE,prefixes:T.SHORT,value:1,offset:0},mole:{name:"mole",base:I.AMOUNT_OF_SUBSTANCE,prefixes:T.LONG,value:1,offset:0},cd:{name:"cd",base:I.LUMINOUS_INTENSITY,prefixes:T.SHORT,value:1,offset:0},candela:{name:"candela",base:I.LUMINOUS_INTENSITY,prefixes:T.LONG,value:1,offset:0},N:{name:"N",base:I.FORCE,prefixes:T.SHORT,value:1,offset:0},newton:{name:"newton",base:I.FORCE,prefixes:T.LONG,value:1,offset:0},dyn:{name:"dyn",base:I.FORCE,prefixes:T.SHORT,value:1e-5,offset:0},dyne:{name:"dyne",base:I.FORCE,prefixes:T.LONG,value:1e-5,offset:0},lbf:{name:"lbf",base:I.FORCE,prefixes:T.NONE,value:4.4482216152605,offset:0},poundforce:{name:"poundforce",base:I.FORCE,prefixes:T.NONE,value:4.4482216152605,offset:0},kip:{name:"kip",base:I.FORCE,prefixes:T.LONG,value:4448.2216,offset:0},kilogramforce:{name:"kilogramforce",base:I.FORCE,prefixes:T.NONE,value:9.80665,offset:0},J:{name:"J",base:I.ENERGY,prefixes:T.SHORT,value:1,offset:0},joule:{name:"joule",base:I.ENERGY,prefixes:T.SHORT,value:1,offset:0},erg:{name:"erg",base:I.ENERGY,prefixes:T.NONE,value:1e-7,offset:0},Wh:{name:"Wh",base:I.ENERGY,prefixes:T.SHORT,value:3600,offset:0},BTU:{name:"BTU",base:I.ENERGY,prefixes:T.BTU,value:1055.05585262,offset:0},eV:{name:"eV",base:I.ENERGY,prefixes:T.SHORT,value:1602176565e-28,offset:0},electronvolt:{name:"electronvolt",base:I.ENERGY,prefixes:T.LONG,value:1602176565e-28,offset:0},W:{name:"W",base:I.POWER,prefixes:T.SHORT,value:1,offset:0},watt:{name:"watt",base:I.POWER,prefixes:T.LONG,value:1,offset:0},hp:{name:"hp",base:I.POWER,prefixes:T.NONE,value:745.6998715386,offset:0},VAR:{name:"VAR",base:I.POWER,prefixes:T.SHORT,value:e.I,offset:0},VA:{name:"VA",base:I.POWER,prefixes:T.SHORT,value:1,offset:0},Pa:{name:"Pa",base:I.PRESSURE,prefixes:T.SHORT,value:1,offset:0},psi:{name:"psi",base:I.PRESSURE,prefixes:T.NONE,value:6894.75729276459,offset:0},atm:{name:"atm",base:I.PRESSURE,prefixes:T.NONE,value:101325,offset:0},bar:{name:"bar",base:I.PRESSURE,prefixes:T.SHORTLONG,value:1e5,offset:0},torr:{name:"torr",base:I.PRESSURE,prefixes:T.NONE,value:133.322,offset:0},mmHg:{name:"mmHg",base:I.PRESSURE,prefixes:T.NONE,value:133.322,offset:0},mmH2O:{name:"mmH2O",base:I.PRESSURE,prefixes:T.NONE,value:9.80665,offset:0},cmH2O:{name:"cmH2O",base:I.PRESSURE,prefixes:T.NONE,value:98.0665,offset:0},coulomb:{name:"coulomb",base:I.ELECTRIC_CHARGE,prefixes:T.LONG,value:1,offset:0},C:{name:"C",base:I.ELECTRIC_CHARGE,prefixes:T.SHORT,value:1,offset:0},farad:{name:"farad",base:I.ELECTRIC_CAPACITANCE,prefixes:T.LONG,value:1,offset:0},F:{name:"F",base:I.ELECTRIC_CAPACITANCE,prefixes:T.SHORT,value:1,offset:0},volt:{name:"volt",base:I.ELECTRIC_POTENTIAL,prefixes:T.LONG,value:1,offset:0},V:{name:"V",base:I.ELECTRIC_POTENTIAL,prefixes:T.SHORT,value:1,offset:0},ohm:{name:"ohm",base:I.ELECTRIC_RESISTANCE,prefixes:T.SHORTLONG,value:1,offset:0},henry:{name:"henry",base:I.ELECTRIC_INDUCTANCE,prefixes:T.LONG,value:1,offset:0},H:{name:"H",base:I.ELECTRIC_INDUCTANCE,prefixes:T.SHORT,value:1,offset:0},siemens:{name:"siemens",base:I.ELECTRIC_CONDUCTANCE,prefixes:T.LONG,value:1,offset:0},S:{name:"S",base:I.ELECTRIC_CONDUCTANCE,prefixes:T.SHORT,value:1,offset:0},weber:{name:"weber",base:I.MAGNETIC_FLUX,prefixes:T.LONG,value:1,offset:0},Wb:{name:"Wb",base:I.MAGNETIC_FLUX,prefixes:T.SHORT,value:1,offset:0},tesla:{name:"tesla",base:I.MAGNETIC_FLUX_DENSITY,prefixes:T.LONG,value:1,offset:0},T:{name:"T",base:I.MAGNETIC_FLUX_DENSITY,prefixes:T.SHORT,value:1,offset:0},b:{name:"b",base:I.BIT,prefixes:T.BINARY_SHORT,value:1,offset:0},bits:{name:"bits",base:I.BIT,prefixes:T.BINARY_LONG,value:1,offset:0},B:{name:"B",base:I.BIT,prefixes:T.BINARY_SHORT,value:8,offset:0},bytes:{name:"bytes",base:I.BIT,prefixes:T.BINARY_LONG,value:8,offset:0}},q={meters:"meter",inches:"inch",feet:"foot",yards:"yard",miles:"mile",links:"link",rods:"rod",chains:"chain",angstroms:"angstrom",lt:"l",litres:"litre",liter:"litre",liters:"litre",teaspoons:"teaspoon",tablespoons:"tablespoon",minims:"minim",fluiddrams:"fluiddram",fluidounces:"fluidounce",gills:"gill",cups:"cup",pints:"pint",quarts:"quart",gallons:"gallon",beerbarrels:"beerbarrel",oilbarrels:"oilbarrel",hogsheads:"hogshead",gtts:"gtt",grams:"gram",tons:"ton",tonnes:"tonne",grains:"grain",drams:"dram",ounces:"ounce",poundmasses:"poundmass",hundredweights:"hundredweight",sticks:"stick",lb:"lbm",lbs:"lbm",kips:"kip",kgf:"kilogramforce",acres:"acre",hectares:"hectare",sqfeet:"sqft",sqyard:"sqyd",sqmile:"sqmi",sqmiles:"sqmi",mmhg:"mmHg",mmh2o:"mmH2O",cmh2o:"cmH2O",seconds:"second",secs:"second",minutes:"minute",mins:"minute",hours:"hour",hr:"hour",hrs:"hour",days:"day",weeks:"week",months:"month",years:"year",decades:"decade",centuries:"century",millennia:"millennium",hertz:"hertz",radians:"radian",degrees:"degree",gradians:"gradian",cycles:"cycle",arcsecond:"arcsec",arcseconds:"arcsec",arcminute:"arcmin",arcminutes:"arcmin",BTUs:"BTU",watts:"watt",joules:"joule",amperes:"ampere",coulombs:"coulomb",volts:"volt",ohms:"ohm",farads:"farad",webers:"weber",teslas:"tesla",electronvolts:"electronvolt",moles:"mole",bit:"bits",byte:"bytes"};function F(e){"BigNumber"===e.number?(e=createBigNumberPi(b),B.rad.value=new b(1),B.deg.value=e.div(180),B.grad.value=e.div(200),B.cycle.value=e.times(2),B.arcsec.value=e.div(648e3),B.arcmin.value=e.div(10800)):(B.rad.value=1,B.deg.value=Math.PI/180,B.grad.value=Math.PI/200,B.cycle.value=2*Math.PI,B.arcsec.value=Math.PI/648e3,B.arcmin.value=Math.PI/10800),B.radian.value=B.rad.value,B.degree.value=B.deg.value,B.gradian.value=B.grad.value}F(g),t&&t("config",function(e,t){e.number!==t.number&&F(e)});var z={si:{NONE:{unit:R,prefix:T.NONE[""]},LENGTH:{unit:B.m,prefix:T.SHORT[""]},MASS:{unit:B.g,prefix:T.SHORT.k},TIME:{unit:B.s,prefix:T.SHORT[""]},CURRENT:{unit:B.A,prefix:T.SHORT[""]},TEMPERATURE:{unit:B.K,prefix:T.SHORT[""]},LUMINOUS_INTENSITY:{unit:B.cd,prefix:T.SHORT[""]},AMOUNT_OF_SUBSTANCE:{unit:B.mol,prefix:T.SHORT[""]},ANGLE:{unit:B.rad,prefix:T.SHORT[""]},BIT:{unit:B.bits,prefix:T.SHORT[""]},FORCE:{unit:B.N,prefix:T.SHORT[""]},ENERGY:{unit:B.J,prefix:T.SHORT[""]},POWER:{unit:B.W,prefix:T.SHORT[""]},PRESSURE:{unit:B.Pa,prefix:T.SHORT[""]},ELECTRIC_CHARGE:{unit:B.C,prefix:T.SHORT[""]},ELECTRIC_CAPACITANCE:{unit:B.F,prefix:T.SHORT[""]},ELECTRIC_POTENTIAL:{unit:B.V,prefix:T.SHORT[""]},ELECTRIC_RESISTANCE:{unit:B.ohm,prefix:T.SHORT[""]},ELECTRIC_INDUCTANCE:{unit:B.H,prefix:T.SHORT[""]},ELECTRIC_CONDUCTANCE:{unit:B.S,prefix:T.SHORT[""]},MAGNETIC_FLUX:{unit:B.Wb,prefix:T.SHORT[""]},MAGNETIC_FLUX_DENSITY:{unit:B.T,prefix:T.SHORT[""]},FREQUENCY:{unit:B.Hz,prefix:T.SHORT[""]}}};z.cgs=JSON.parse(JSON.stringify(z.si)),z.cgs.LENGTH={unit:B.m,prefix:T.SHORT.c},z.cgs.MASS={unit:B.g,prefix:T.SHORT[""]},z.cgs.FORCE={unit:B.dyn,prefix:T.SHORT[""]},z.cgs.ENERGY={unit:B.erg,prefix:T.NONE[""]},z.us=JSON.parse(JSON.stringify(z.si)),z.us.LENGTH={unit:B.ft,prefix:T.NONE[""]},z.us.MASS={unit:B.lbm,prefix:T.NONE[""]},z.us.TEMPERATURE={unit:B.degF,prefix:T.NONE[""]},z.us.FORCE={unit:B.lbf,prefix:T.NONE[""]},z.us.ENERGY={unit:B.BTU,prefix:T.BTU[""]},z.us.POWER={unit:B.hp,prefix:T.NONE[""]},z.us.PRESSURE={unit:B.psi,prefix:T.NONE[""]},z.auto=JSON.parse(JSON.stringify(z.si));var P,k,U,L=z.auto;for(P in M.setUnitSystem=function(e){if(!hasOwnProperty$1(z,e))throw new Error("Unit system "+e+" does not exist. Choices are: "+Object.keys(z).join(", "));L=z[e]},M.getUnitSystem=function(){for(var e in z)if(hasOwnProperty$1(z,e)&&z[e]===L)return e},M.typeConverters={BigNumber:function(e){return new b(e+"")},Fraction:function(e){return new w(e)},Complex:function(e){return e},number:function(e){return e}},M._getNumberConverter=function(e){if(!M.typeConverters[e])throw new TypeError('Unsupported type "'+e+'"');return M.typeConverters[e]},B)hasOwnProperty$1(B,P)&&((k=B[P]).dimensions=k.base.dimensions);for(U in q)if(hasOwnProperty$1(q,U)){var j,G=B[q[U]],H={};for(j in G)hasOwnProperty$1(G,j)&&(H[j]=G[j]);H.name=U,B[U]=H}return M.isValidAlpha=function(e){return/^[a-zA-Z]$/.test(e)},M.createUnit=function(e,t){if("object"!=typeof e)throw new TypeError("createUnit expects first parameter to be of type 'Object'");if(t&&t.override)for(var r in e)if(hasOwnProperty$1(e,r)&&M.deleteUnit(r),e[r].aliases)for(var n=0;n<e[r].aliases.length;n++)M.deleteUnit(e[r].aliases[n]);var i,a;for(a in e)hasOwnProperty$1(e,a)&&(i=M.createUnitSingle(a,e[a]));return i},M.createUnitSingle=function(t,e,r){if(null==e&&(e={}),"string"!=typeof t)throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");if(hasOwnProperty$1(B,t))throw new Error('Cannot create unit "'+t+'": a unit with that name already exists');!function(e){for(var t=0;t<e.length;t++){if(N=e.charAt(t),0===t&&!M.isValidAlpha(N))throw new Error('Invalid unit name (must begin with alpha character): "'+e+'"');if(0<t&&!M.isValidAlpha(N)&&!$(N))throw new Error('Invalid unit name (only alphanumeric characters are allowed): "'+e+'"')}}(t);var n,i=null,a=[],o=0;if(e&&"Unit"===e.type)i=e.clone();else if("string"==typeof e)""!==e&&(n=e);else{if("object"!=typeof e)throw new TypeError('Cannot create unit "'+t+'" from "'+e.toString()+'": expecting "string" or "Unit" or "Object"');n=e.definition,u=e.prefixes,o=e.offset,p=e.baseName,e.aliases&&(a=e.aliases.valueOf())}if(a)for(var s=0;s<a.length;s++)if(hasOwnProperty$1(B,a[s]))throw new Error('Cannot create alias "'+a[s]+'": a unit with that name already exists');if(n&&"string"==typeof n&&!i)try{i=M.parse(n,{allowNoUnits:!0})}catch(e){throw e.message='Could not create unit "'+t+'" from "'+n+'": '+e.message,e}else n&&"Unit"===n.type&&(i=n.clone());var a=a||[],o=o||0,u=u&&u.toUpperCase&&T[u.toUpperCase()]||T.NONE,c={};if(i){var l,p,c={name:t,value:i.value,dimensions:i.dimensions.slice(0),prefixes:u,offset:o},m=!1;for(l in I)if(hasOwnProperty$1(I,l)){for(var f=!0,d=0;d<_.length;d++)if(1e-12<Math.abs((c.dimensions[d]||0)-(I[l].dimensions[d]||0))){f=!1;break}if(f){m=!0,c.base=I[l];break}}m||(p=p||t+"_STUFF",(i={dimensions:i.dimensions.slice(0)}).key=p,I[p]=i,L[p]={unit:c,prefix:T.NONE[""]},c.base=I[p])}else{if(0<=_.indexOf(p=p||t+"_STUFF"))throw new Error('Cannot create new base unit "'+t+'": a base unit with that name already exists (and cannot be overridden)');for(var h in _.push(p),I)hasOwnProperty$1(I,h)&&(I[h].dimensions[_.length-1]=0);for(var y={dimensions:[]},g=0;g<_.length;g++)y.dimensions[g]=0;y.dimensions[_.length-1]=1,y.key=p,I[p]=y,c={name:t,value:1,dimensions:I[p].dimensions.slice(0),prefixes:u,offset:o,base:I[p]},L[p]={unit:c,prefix:T.NONE[""]}}M.UNITS[t]=c;for(var x=0;x<a.length;x++){var v,b=a[x],w={};for(v in c)hasOwnProperty$1(c,v)&&(w[v]=c[v]);w.name=b,M.UNITS[b]=w}return delete C.cache,new M(null,t)},M.deleteUnit=function(e){delete M.UNITS[e]},M.PREFIXES=T,M.BASE_DIMENSIONS=_,M.BASE_UNITS=I,M.UNIT_SYSTEMS=z,M.UNITS=B,M},{isClass:!0}),name$24="unit",dependencies$24=["typed","Unit"],createUnitFunction=factory(name$24,dependencies$24,e=>{var{typed:e,Unit:r}=e;return e(name$24,{Unit:function(e){return e.clone()},string:function(e){return r.isValuelessUnit(e)?new r(null,e):r.parse(e,{allowNoUnits:!0})},"number | BigNumber | Fraction | Complex, string":function(e,t){return new r(e,t)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$23="sparse",dependencies$23=["typed","SparseMatrix"],createSparse=factory(name$23,dependencies$23,e=>{var{typed:e,SparseMatrix:r}=e;return e(name$23,{"":function(){return new r([])},string:function(e){return new r([],e)},"Array | Matrix":function(e){return new r(e)},"Array | Matrix, string":function(e,t){return new r(e,t)}})}),name$22="createUnit",dependencies$22=["typed","Unit"],createCreateUnit=factory(name$22,dependencies$22,e=>{var{typed:e,Unit:i}=e;return e(name$22,{"Object, Object":function(e,t){return i.createUnit(e,t)},Object:function(e){return i.createUnit(e,{})},"string, Unit | string | Object, Object":function(e,t,r){var n={};return n[e]=t,i.createUnit(n,r)},"string, Unit | string | Object":function(e,t){var r={};return r[e]=t,i.createUnit(r,{})},string:function(e){var t={};return t[e]={},i.createUnit(t,{})}})}),name$21="acos",dependencies$21=["typed","config","Complex"],createAcos=factory(name$21,dependencies$21,e=>{var{typed:e,config:t,Complex:r}=e;return e(name$21,{number:function(e){return-1<=e&&e<=1||t.predictable?Math.acos(e):new r(e,0).acos()},Complex:function(e){return e.acos()},BigNumber:function(e){return e.acos()},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$20="acosh",dependencies$20=["typed","config","Complex"],createAcosh=factory(name$20,dependencies$20,e=>{var{typed:e,config:t,Complex:r}=e;return e(name$20,{number:function(e){return 1<=e||t.predictable?acoshNumber(e):e<=-1?new r(Math.log(Math.sqrt(e*e-1)-e),Math.PI):new r(e,0).acosh()},Complex:function(e){return e.acosh()},BigNumber:function(e){return e.acosh()},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1$="acot",dependencies$1$=["typed","BigNumber"],createAcot=factory(name$1$,dependencies$1$,e=>{var{typed:e,BigNumber:t}=e;return e(name$1$,{number:acotNumber,Complex:function(e){return e.acot()},BigNumber:function(e){return new t(1).div(e).atan()},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1_="acoth",dependencies$1_=["typed","config","Complex","BigNumber"],createAcoth=factory(name$1_,dependencies$1_,e=>{var{typed:e,config:t,Complex:r,BigNumber:n}=e;return e(name$1_,{number:function(e){return 1<=e||e<=-1||t.predictable?acothNumber(e):new r(e,0).acoth()},Complex:function(e){return e.acoth()},BigNumber:function(e){return new n(1).div(e).atanh()},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1Z="acsc",dependencies$1Z=["typed","config","Complex","BigNumber"],createAcsc=factory(name$1Z,dependencies$1Z,e=>{var{typed:e,config:t,Complex:r,BigNumber:n}=e;return e(name$1Z,{number:function(e){return e<=-1||1<=e||t.predictable?acscNumber(e):new r(e,0).acsc()},Complex:function(e){return e.acsc()},BigNumber:function(e){return new n(1).div(e).asin()},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1Y="acsch",dependencies$1Y=["typed","BigNumber"],createAcsch=factory(name$1Y,dependencies$1Y,e=>{var{typed:e,BigNumber:t}=e;return e(name$1Y,{number:acschNumber,Complex:function(e){return e.acsch()},BigNumber:function(e){return new t(1).div(e).asinh()},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1X="asec",dependencies$1X=["typed","config","Complex","BigNumber"],createAsec=factory(name$1X,dependencies$1X,e=>{var{typed:e,config:t,Complex:r,BigNumber:n}=e;return e(name$1X,{number:function(e){return e<=-1||1<=e||t.predictable?asecNumber(e):new r(e,0).asec()},Complex:function(e){return e.asec()},BigNumber:function(e){return new n(1).div(e).acos()},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1W="asech",dependencies$1W=["typed","config","Complex","BigNumber"],createAsech=factory(name$1W,dependencies$1W,e=>{var{typed:e,config:n,Complex:i,BigNumber:t}=e;return e(name$1W,{number:function(e){if(e<=1&&-1<=e||n.predictable){var t=1/e;if(0<t||n.predictable)return asechNumber(e);var r=Math.sqrt(t*t-1);return new i(Math.log(r-t),Math.PI)}return new i(e,0).asech()},Complex:function(e){return e.asech()},BigNumber:function(e){return new t(1).div(e).acosh()},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1V="asin",dependencies$1V=["typed","config","Complex"],createAsin=factory(name$1V,dependencies$1V,e=>{var{typed:e,config:t,Complex:r}=e;return e(name$1V,{number:function(e){return-1<=e&&e<=1||t.predictable?Math.asin(e):new r(e,0).asin()},Complex:function(e){return e.asin()},BigNumber:function(e){return e.asin()},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1U="asinh",dependencies$1U=["typed"],createAsinh=factory(name$1U,dependencies$1U,e=>{var e=e["typed"];return e("asinh",{number:asinhNumber,Complex:function(e){return e.asinh()},BigNumber:function(e){return e.asinh()},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1T="atan",dependencies$1T=["typed"],createAtan=factory(name$1T,dependencies$1T,e=>{var e=e["typed"];return e("atan",{number:function(e){return Math.atan(e)},Complex:function(e){return e.atan()},BigNumber:function(e){return e.atan()},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1S="atan2",dependencies$1S=["typed","matrix","equalScalar","BigNumber","DenseMatrix"],createAtan2=factory(name$1S,dependencies$1S,e=>{var{typed:t,matrix:r,equalScalar:n,BigNumber:i,DenseMatrix:e}=e,a=createAlgorithm02({typed:t,equalScalar:n}),o=createAlgorithm03({typed:t}),s=createAlgorithm09({typed:t,equalScalar:n}),u=createAlgorithm11({typed:t,equalScalar:n}),c=createAlgorithm12({typed:t,DenseMatrix:e}),l=createAlgorithm13({typed:t}),p=createAlgorithm14({typed:t});return t(name$1S,{"number, number":Math.atan2,"BigNumber, BigNumber":function(e,t){return i.atan2(e,t)},"SparseMatrix, SparseMatrix":function(e,t){return s(e,t,this,!1)},"SparseMatrix, DenseMatrix":function(e,t){return a(t,e,this,!0)},"DenseMatrix, SparseMatrix":function(e,t){return o(e,t,this,!1)},"DenseMatrix, DenseMatrix":function(e,t){return l(e,t,this)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"SparseMatrix, number | BigNumber":function(e,t){return u(e,t,this,!1)},"DenseMatrix, number | BigNumber":function(e,t){return p(e,t,this,!1)},"number | BigNumber, SparseMatrix":function(e,t){return c(t,e,this,!0)},"number | BigNumber, DenseMatrix":function(e,t){return p(t,e,this,!0)},"Array, number | BigNumber":function(e,t){return p(r(e),t,this,!1).valueOf()},"number | BigNumber, Array":function(e,t){return p(r(t),e,this,!0).valueOf()}})}),name$1R="atanh",dependencies$1R=["typed","config","Complex"],createAtanh=factory(name$1R,dependencies$1R,e=>{var{typed:e,config:t,Complex:r}=e;return e(name$1R,{number:function(e){return e<=1&&-1<=e||t.predictable?atanhNumber(e):new r(e,0).atanh()},Complex:function(e){return e.atanh()},BigNumber:function(e){return e.atanh()},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1Q="cos",dependencies$1Q=["typed"],createCos=factory(name$1Q,dependencies$1Q,e=>{var e=e["typed"];return e(name$1Q,{number:Math.cos,Complex:function(e){return e.cos()},BigNumber:function(e){return e.cos()},Unit:function(e){if(!e.hasBase(e.constructor.BASE_UNITS.ANGLE))throw new TypeError("Unit in function cos is no angle");return this(e.value)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1P="cosh",dependencies$1P=["typed"],createCosh=factory(name$1P,dependencies$1P,e=>{var e=e["typed"];return e(name$1P,{number:cosh$1,Complex:function(e){return e.cosh()},BigNumber:function(e){return e.cosh()},Unit:function(e){if(!e.hasBase(e.constructor.BASE_UNITS.ANGLE))throw new TypeError("Unit in function cosh is no angle");return this(e.value)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1O="cot",dependencies$1O=["typed","BigNumber"],createCot=factory(name$1O,dependencies$1O,e=>{var{typed:e,BigNumber:t}=e;return e(name$1O,{number:cotNumber,Complex:function(e){return e.cot()},BigNumber:function(e){return new t(1).div(e.tan())},Unit:function(e){if(!e.hasBase(e.constructor.BASE_UNITS.ANGLE))throw new TypeError("Unit in function cot is no angle");return this(e.value)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1N="coth",dependencies$1N=["typed","BigNumber"],createCoth=factory(name$1N,dependencies$1N,e=>{var{typed:e,BigNumber:t}=e;return e(name$1N,{number:cothNumber,Complex:function(e){return e.coth()},BigNumber:function(e){return new t(1).div(e.tanh())},Unit:function(e){if(!e.hasBase(e.constructor.BASE_UNITS.ANGLE))throw new TypeError("Unit in function coth is no angle");return this(e.value)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1M="csc",dependencies$1M=["typed","BigNumber"],createCsc=factory(name$1M,dependencies$1M,e=>{var{typed:e,BigNumber:t}=e;return e(name$1M,{number:cscNumber,Complex:function(e){return e.csc()},BigNumber:function(e){return new t(1).div(e.sin())},Unit:function(e){if(!e.hasBase(e.constructor.BASE_UNITS.ANGLE))throw new TypeError("Unit in function csc is no angle");return this(e.value)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1L="csch",dependencies$1L=["typed","BigNumber"],createCsch=factory(name$1L,dependencies$1L,e=>{var{typed:e,BigNumber:t}=e;return e(name$1L,{number:cschNumber,Complex:function(e){return e.csch()},BigNumber:function(e){return new t(1).div(e.sinh())},Unit:function(e){if(!e.hasBase(e.constructor.BASE_UNITS.ANGLE))throw new TypeError("Unit in function csch is no angle");return this(e.value)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1K="sec",dependencies$1K=["typed","BigNumber"],createSec=factory(name$1K,dependencies$1K,e=>{var{typed:e,BigNumber:t}=e;return e(name$1K,{number:secNumber,Complex:function(e){return e.sec()},BigNumber:function(e){return new t(1).div(e.cos())},Unit:function(e){if(!e.hasBase(e.constructor.BASE_UNITS.ANGLE))throw new TypeError("Unit in function sec is no angle");return this(e.value)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1J="sech",dependencies$1J=["typed","BigNumber"],createSech=factory(name$1J,dependencies$1J,e=>{var{typed:e,BigNumber:t}=e;return e(name$1J,{number:sechNumber,Complex:function(e){return e.sech()},BigNumber:function(e){return new t(1).div(e.cosh())},Unit:function(e){if(!e.hasBase(e.constructor.BASE_UNITS.ANGLE))throw new TypeError("Unit in function sech is no angle");return this(e.value)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1I="sin",dependencies$1I=["typed"],createSin=factory(name$1I,dependencies$1I,e=>{var e=e["typed"];return e(name$1I,{number:Math.sin,Complex:function(e){return e.sin()},BigNumber:function(e){return e.sin()},Unit:function(e){if(!e.hasBase(e.constructor.BASE_UNITS.ANGLE))throw new TypeError("Unit in function sin is no angle");return this(e.value)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1H="sinh",dependencies$1H=["typed"],createSinh=factory(name$1H,dependencies$1H,e=>{var e=e["typed"];return e(name$1H,{number:sinhNumber,Complex:function(e){return e.sinh()},BigNumber:function(e){return e.sinh()},Unit:function(e){if(!e.hasBase(e.constructor.BASE_UNITS.ANGLE))throw new TypeError("Unit in function sinh is no angle");return this(e.value)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1G="tan",dependencies$1G=["typed"],createTan=factory(name$1G,dependencies$1G,e=>{var e=e["typed"];return e(name$1G,{number:Math.tan,Complex:function(e){return e.tan()},BigNumber:function(e){return e.tan()},Unit:function(e){if(!e.hasBase(e.constructor.BASE_UNITS.ANGLE))throw new TypeError("Unit in function tan is no angle");return this(e.value)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1F="tanh",dependencies$1F=["typed"],createTanh=factory(name$1F,dependencies$1F,e=>{var e=e["typed"];return e("tanh",{number:tanh$1,Complex:function(e){return e.tanh()},BigNumber:function(e){return e.tanh()},Unit:function(e){if(!e.hasBase(e.constructor.BASE_UNITS.ANGLE))throw new TypeError("Unit in function tanh is no angle");return this(e.value)},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$1E="setCartesian",dependencies$1E=["typed","size","subset","compareNatural","Index","DenseMatrix"],createSetCartesian=factory(name$1E,dependencies$1E,e=>{var{typed:e,size:s,subset:u,compareNatural:c,Index:l,DenseMatrix:p}=e;return e(name$1E,{"Array | Matrix, Array | Matrix":function(e,t){var r=[];if(0!==u(s(e),new l(0))&&0!==u(s(t),new l(0)))for(var n=flatten$1(Array.isArray(e)?e:e.toArray()).sort(c),i=flatten$1(Array.isArray(t)?t:t.toArray()).sort(c),r=[],a=0;a<n.length;a++)for(var o=0;o<i.length;o++)r.push([n[a],i[o]]);return Array.isArray(e)&&Array.isArray(t)?r:new p(r)}})}),name$1D="setDifference",dependencies$1D=["typed","size","subset","compareNatural","Index","DenseMatrix"],createSetDifference=factory(name$1D,dependencies$1D,e=>{var{typed:e,size:u,subset:c,compareNatural:l,Index:p,DenseMatrix:m}=e;return e(name$1D,{"Array | Matrix, Array | Matrix":function(e,t){if(0===c(u(e),new p(0)))i=[];else{if(0===c(u(t),new p(0)))return flatten$1(e.toArray());for(var r=identify(flatten$1(Array.isArray(e)?e:e.toArray()).sort(l)),n=identify(flatten$1(Array.isArray(t)?t:t.toArray()).sort(l)),i=[],a=0;a<r.length;a++){for(var o=!1,s=0;s<n.length;s++)if(0===l(r[a].value,n[s].value)&&r[a].identifier===n[s].identifier){o=!0;break}o||i.push(r[a])}}return Array.isArray(e)&&Array.isArray(t)?generalize(i):new m(generalize(i))}})}),name$1C="setDistinct",dependencies$1C=["typed","size","subset","compareNatural","Index","DenseMatrix"],createSetDistinct=factory(name$1C,dependencies$1C,e=>{var{typed:e,size:i,subset:a,compareNatural:o,Index:s,DenseMatrix:u}=e;return e(name$1C,{"Array | Matrix":function(e){if(0===a(i(e),new s(0)))t=[];else{var t,r=flatten$1(Array.isArray(e)?e:e.toArray()).sort(o);(t=[]).push(r[0]);for(var n=1;n<r.length;n++)0!==o(r[n],r[n-1])&&t.push(r[n])}return Array.isArray(e)?t:new u(t)}})}),name$1B="setIntersect",dependencies$1B=["typed","size","subset","compareNatural","Index","DenseMatrix"],createSetIntersect=factory(name$1B,dependencies$1B,e=>{var{typed:e,size:s,subset:u,compareNatural:c,Index:l,DenseMatrix:p}=e;return e(name$1B,{"Array | Matrix, Array | Matrix":function(e,t){if(0===u(s(e),new l(0))||0===u(s(t),new l(0)))i=[];else for(var r=identify(flatten$1(Array.isArray(e)?e:e.toArray()).sort(c)),n=identify(flatten$1(Array.isArray(t)?t:t.toArray()).sort(c)),i=[],a=0;a<r.length;a++)for(var o=0;o<n.length;o++)if(0===c(r[a].value,n[o].value)&&r[a].identifier===n[o].identifier){i.push(r[a]);break}return Array.isArray(e)&&Array.isArray(t)?generalize(i):new p(generalize(i))}})}),name$1A="setIsSubset",dependencies$1A=["typed","size","subset","compareNatural","Index"],createSetIsSubset=factory(name$1A,dependencies$1A,e=>{var{typed:e,size:s,subset:u,compareNatural:c,Index:l}=e;return e(name$1A,{"Array | Matrix, Array | Matrix":function(e,t){if(0===u(s(e),new l(0)))return!0;if(0===u(s(t),new l(0)))return!1;for(var r=identify(flatten$1(Array.isArray(e)?e:e.toArray()).sort(c)),n=identify(flatten$1(Array.isArray(t)?t:t.toArray()).sort(c)),i=0;i<r.length;i++){for(var a=!1,o=0;o<n.length;o++)if(0===c(r[i].value,n[o].value)&&r[i].identifier===n[o].identifier){a=!0;break}if(!1===a)return!1}return!0}})}),name$1z="setMultiplicity",dependencies$1z=["typed","size","subset","compareNatural","Index"],createSetMultiplicity=factory(name$1z,dependencies$1z,e=>{var{typed:e,size:a,subset:o,compareNatural:s,Index:u}=e;return e(name$1z,{"number | BigNumber | Fraction | Complex, Array | Matrix":function(e,t){if(0===o(a(t),new u(0)))return 0;for(var r=flatten$1(Array.isArray(t)?t:t.toArray()),n=0,i=0;i<r.length;i++)0===s(r[i],e)&&n++;return n}})}),name$1y="setPowerset",dependencies$1y=["typed","size","subset","compareNatural","Index"],createSetPowerset=factory(name$1y,dependencies$1y,e=>{var{typed:e,size:i,subset:a,compareNatural:o,Index:s}=e;return e(name$1y,{"Array | Matrix":function(e){if(0===a(i(e),new s(0)))return[];for(var t=flatten$1(Array.isArray(e)?e:e.toArray()).sort(o),r=[],n=0;n.toString(2).length<=t.length;)r.push(function(e,t){for(var r=[],n=0;n<t.length;n++)"1"===t[n]&&r.push(e[n]);return r}(t,n.toString(2).split("").reverse())),n++;return function(e){for(var t=[],r=e.length-1;0<r;r--)for(var n=0;n<r;n++)e[n].length>e[n+1].length&&(t=e[n],e[n]=e[n+1],e[n+1]=t);return e}(r)}})}),name$1x="setSize",dependencies$1x=["typed","compareNatural"],createSetSize=factory(name$1x,dependencies$1x,e=>{var{typed:e,compareNatural:a}=e;return e(name$1x,{"Array | Matrix":function(e){return(Array.isArray(e)?flatten$1(e):flatten$1(e.toArray())).length},"Array | Matrix, boolean":function(e,t){if(!1===t||0===e.length)return(Array.isArray(e)?flatten$1(e):flatten$1(e.toArray())).length;for(var r=flatten$1(Array.isArray(e)?e:e.toArray()).sort(a),n=1,i=1;i<r.length;i++)0!==a(r[i],r[i-1])&&n++;return n}})}),name$1w="setSymDifference",dependencies$1w=["typed","size","concat","subset","setDifference","Index"],createSetSymDifference=factory(name$1w,dependencies$1w,e=>{var{typed:e,size:r,concat:n,subset:i,setDifference:a,Index:o}=e;return e(name$1w,{"Array | Matrix, Array | Matrix":function(e,t){if(0===i(r(e),new o(0)))return flatten$1(t);if(0===i(r(t),new o(0)))return flatten$1(e);e=flatten$1(e),t=flatten$1(t);return n(a(e,t),a(t,e))}})}),name$1v="setUnion",dependencies$1v=["typed","size","concat","subset","setIntersect","setSymDifference","Index"],createSetUnion=factory(name$1v,dependencies$1v,e=>{var{typed:e,size:r,concat:n,subset:i,setIntersect:a,setSymDifference:o,Index:s}=e;return e(name$1v,{"Array | Matrix, Array | Matrix":function(e,t){if(0===i(r(e),new s(0)))return flatten$1(t);if(0===i(r(t),new s(0)))return flatten$1(e);e=flatten$1(e),t=flatten$1(t);return n(o(e,t),a(e,t))}})}),name$1u="add",dependencies$1u=["typed","matrix","addScalar","equalScalar","DenseMatrix","SparseMatrix"],createAdd=factory(name$1u,dependencies$1u,e=>{var{typed:t,matrix:r,addScalar:n,equalScalar:i,DenseMatrix:e}=e,a=createAlgorithm01({typed:t}),o=createAlgorithm04({typed:t,equalScalar:i}),s=createAlgorithm10({typed:t,DenseMatrix:e}),u=createAlgorithm13({typed:t}),c=createAlgorithm14({typed:t});return t(name$1u,extend({"DenseMatrix, DenseMatrix":function(e,t){return u(e,t,n)},"DenseMatrix, SparseMatrix":function(e,t){return a(e,t,n,!1)},"SparseMatrix, DenseMatrix":function(e,t){return a(t,e,n,!0)},"SparseMatrix, SparseMatrix":function(e,t){return o(e,t,n)},"Array, Array":function(e,t){return this(r(e),r(t)).valueOf()},"Array, Matrix":function(e,t){return this(r(e),t)},"Matrix, Array":function(e,t){return this(e,r(t))},"DenseMatrix, any":function(e,t){return c(e,t,n,!1)},"SparseMatrix, any":function(e,t){return s(e,t,n,!1)},"any, DenseMatrix":function(e,t){return c(t,e,n,!0)},"any, SparseMatrix":function(e,t){return s(t,e,n,!0)},"Array, any":function(e,t){return c(r(e),t,n,!1).valueOf()},"any, Array":function(e,t){return c(r(t),e,n,!0).valueOf()},"any, any":n,"any, any, ...any":function(e,t,r){for(var n=this(e,t),i=0;i<r.length;i++)n=this(n,r[i]);return n}},n.signatures))}),name$1t="hypot",dependencies$1t=["typed","abs","addScalar","divideScalar","multiplyScalar","sqrt","smaller","isPositive"],createHypot=factory(name$1t,dependencies$1t,e=>{var{typed:e,abs:a,addScalar:o,divideScalar:s,multiplyScalar:u,sqrt:c,smaller:l,isPositive:p}=e;return e(name$1t,{"... number | BigNumber":function(e){for(var t=0,r=0,n=0;n<e.length;n++){var i=a(e[n]);l(r,i)?(t=u(t,u(s(r,i),s(r,i))),t=o(t,1),r=i):t=o(t,p(i)?u(s(i,r),s(i,r)):i)}return u(r,c(t))},Array:function(e){return this.apply(this,flatten$1(e))},Matrix:function(e){return this.apply(this,flatten$1(e.toArray()))}})}),name$1s="norm",dependencies$1s=["typed","abs","add","pow","conj","sqrt","multiply","equalScalar","larger","smaller","matrix","ctranspose","eigs"],createNorm=factory(name$1s,dependencies$1s,e=>{var{typed:e,abs:s,add:u,pow:a,conj:c,sqrt:l,multiply:p,equalScalar:o,larger:m,smaller:f,matrix:r,ctranspose:d,eigs:h}=e;return e(name$1s,{number:Math.abs,Complex:function(e){return e.abs()},BigNumber:function(e){return e.abs()},boolean:function(e){return Math.abs(e)},Array:function(e){return y(r(e),2)},Matrix:function(e){return y(e,2)},"number | Complex | BigNumber | boolean, number | BigNumber | string":function(e){return this(e)},"Array, number | BigNumber | string":function(e,t){return y(r(e),t)},"Matrix, number | BigNumber | string":y});function n(e,t){if(t===Number.POSITIVE_INFINITY||"inf"===t)return r=0,e.forEach(function(e){e=s(e);m(e,r)&&(r=e)},!0),r;var r,n;if(t===Number.NEGATIVE_INFINITY||"-inf"===t)return e.forEach(function(e){e=s(e);n&&!f(e,n)||(n=e)},!0),n||0;if("fro"===t)return y(e,2);if("number"!=typeof t||isNaN(t))throw new Error("Unsupported parameter value");if(o(t,0))return Number.POSITIVE_INFINITY;var i=0;return e.forEach(function(e){i=u(a(s(e),t),i)},!0),a(i,1/t)}function i(e,t){if(1===t)return r=[],n=0,e.forEach(function(e,t){t=t[1],e=u(r[t]||0,s(e));m(e,n)&&(n=e),r[t]=e},!0),n;var r,n,i,a,o;if(t===Number.POSITIVE_INFINITY||"inf"===t)return i=[],a=0,e.forEach(function(e,t){t=t[0],e=u(i[t]||0,s(e));m(e,a)&&(a=e),i[t]=e},!0),a;if("fro"===t)return o=0,e.forEach(function(e,t){o=u(o,p(e,c(e)))}),s(l(o));if(2===t)return function(e){var t=e.size();if(t[0]!==t[1])throw new RangeError("Invalid matrix dimensions");return t=d(e),e=p(t,e),e=(e=h(e).values.toArray())[e.length-1],s(l(e))}(e);throw new Error("Unsupported parameter value "+t)}function y(e,t){var r=e.size();if(1===r.length)return n(e,t);if(2===r.length){if(r[0]&&r[1])return i(e,t);throw new RangeError("Invalid matrix dimensions")}}}),name$1r="dot",dependencies$1r=["typed","addScalar","multiplyScalar","conj","size"],createDot=factory(name$1r,dependencies$1r,e=>{var{typed:g,addScalar:x,multiplyScalar:v,conj:b,size:t}=e;return g(name$1r,{"Array | DenseMatrix, Array | DenseMatrix":function(e,t){var r=w(e,t),n=isMatrix(e)?e._data:e,i=isMatrix(e)?e._datatype:void 0,a=isMatrix(t)?t._data:t,o=isMatrix(t)?t._datatype:void 0,e=2===N(e).length,t=2===N(t).length,s=x,u=v;i&&o&&i===o&&"string"==typeof i&&(i=i,s=g.find(x,[i,i]),u=g.find(v,[i,i]));if(!e&&!t){for(var c=u(b(n[0]),a[0]),l=1;l<r;l++)c=s(c,u(b(n[l]),a[l]));return c}if(!e&&t){for(var p=u(b(n[0]),a[0][0]),m=1;m<r;m++)p=s(p,u(b(n[m]),a[m][0]));return p}if(e&&!t){for(var f=u(b(n[0][0]),a[0]),d=1;d<r;d++)f=s(f,u(b(n[d][0]),a[d]));return f}if(e&&t){for(var h=u(b(n[0][0]),a[0][0]),y=1;y<r;y++)h=s(h,u(b(n[y][0]),a[y][0]));return h}},"SparseMatrix, SparseMatrix":function(e,t){w(e,t);var r=e._index,n=e._values,i=t._index,a=t._values,o=0,s=x,u=v,c=0,l=0;for(;c<r.length&&l<i.length;){var p=r[c],m=i[l];p<m?c++:m<p?l++:p===m&&(o=s(o,u(n[c],a[l])),c++,l++)}return o}});function w(e,t){var r,n,e=N(e),t=N(t);if(1===e.length)r=e[0];else{if(2!==e.length||1!==e[1])throw new RangeError("Expected a column vector, instead got a matrix of size ("+e.join(", ")+")");r=e[0]}if(1===t.length)n=t[0];else{if(2!==t.length||1!==t[1])throw new RangeError("Expected a column vector, instead got a matrix of size ("+t.join(", ")+")");n=t[0]}if(r!==n)throw new RangeError("Vectors must have equal length ("+r+" != "+n+")");if(0===r)throw new RangeError("Cannot calculate the dot product of empty vectors");return r}function N(e){return isMatrix(e)?e.size():t(e)}}),name$1q="trace",dependencies$1q=["typed","matrix","add"],createTrace=factory(name$1q,dependencies$1q,e=>{var{typed:e,matrix:t,add:m}=e;return e("trace",{Array:function(e){return r(t(e))},SparseMatrix:function(e){var t=e._values,r=e._index,n=e._ptr,i=e._size,e=i[0],a=i[1];if(e!==a)throw new RangeError("Matrix must be square (size: "+format$1(i)+")");var o=0;if(0<t.length)for(var s=0;s<a;s++)for(var u=n[s],c=n[s+1],l=u;l<c;l++){var p=r[l];if(p===s){o=m(o,t[l]);break}if(s<p)break}return o},DenseMatrix:r,any:clone$1});function r(e){var t=e._size,r=e._data;switch(t.length){case 1:if(1===t[0])return clone$1(r[0]);throw new RangeError("Matrix must be square (size: "+format$1(t)+")");case 2:var n=t[0];if(n!==t[1])throw new RangeError("Matrix must be square (size: "+format$1(t)+")");for(var i=0,a=0;a<n;a++)i=m(i,r[a][a]);return i;default:throw new RangeError("Matrix must be two dimensional (size: "+format$1(t)+")")}}}),name$1p="index",dependencies$1p=["typed","Index"],createIndex=factory(name$1p,dependencies$1p,e=>{var{typed:e,Index:r}=e;return e(name$1p,{"...number | string | BigNumber | Range | Array | Matrix":function(e){var t=e.map(function(e){return isBigNumber(e)?e.toNumber():Array.isArray(e)||isMatrix(e)?e.map(function(e){return isBigNumber(e)?e.toNumber():e}):e}),e=new r;return r.apply(e,t),e}})}),keywords=new Set(["end"]),name$1o="Node",dependencies$1o=["mathWithTransform"],createNode=factory(name$1o,dependencies$1o,e=>{var i=e["mathWithTransform"];function t(){if(!(this instanceof t))throw new SyntaxError("Constructor must be called with the new operator")}return t.prototype.evaluate=function(e){return this.compile().evaluate(e)},t.prototype.type="Node",t.prototype.isNode=!0,t.prototype.comment="",t.prototype.compile=function(){var t=this._compile(i,{}),r={},n=null;return{evaluate:function(e){return function(e){for(var t of[...keywords])if(e.has(t))throw new Error('Scope contains an illegal symbol, "'+t+'" is a reserved keyword')}(e=createMap$1(e)),t(e,r,n)}}},t.prototype._compile=function(e,t){throw new Error("Method _compile should be implemented by type "+this.type)},t.prototype.forEach=function(e){throw new Error("Cannot run forEach on a Node interface")},t.prototype.map=function(e){throw new Error("Cannot run map on a Node interface")},t.prototype._ifNode=function(e){if(!isNode(e))throw new TypeError("Callback function must return a Node");return e},t.prototype.traverse=function(e){e(this,null,null),function n(e,i){e.forEach(function(e,t,r){i(e,t,r),n(e,i)})}(this,e)},t.prototype.transform=function(i){return function e(t,r,n){n=i(t,r,n);return n!==t?n:t.map(e)}(this,null,null)},t.prototype.filter=function(n){var i=[];return this.traverse(function(e,t,r){n(e,t,r)&&i.push(e)}),i},t.prototype.clone=function(){throw new Error("Cannot clone a Node interface")},t.prototype.cloneDeep=function(){return this.map(function(e){return e.cloneDeep()})},t.prototype.equals=function(e){return!!e&&deepStrictEqual(this,e)},t.prototype.toString=function(e){var t=this._getCustomString(e);return void 0!==t?t:this._toString(e)},t.prototype.toJSON=function(){throw new Error("Cannot serialize object: toJSON not implemented by "+this.type)},t.prototype.toHTML=function(e){var t=this._getCustomString(e);return void 0!==t?t:this.toHTML(e)},t.prototype._toString=function(){throw new Error("_toString not implemented for "+this.type)},t.prototype.toTex=function(e){var t=this._getCustomString(e);return void 0!==t?t:this._toTex(e)},t.prototype._toTex=function(e){throw new Error("_toTex not implemented for "+this.type)},t.prototype._getCustomString=function(e){if(e&&"object"==typeof e)switch(typeof e.handler){case"object":case"undefined":return;case"function":return e.handler(this,e);default:throw new TypeError("Object or function expected as callback")}},t.prototype.getIdentifier=function(){return this.type},t.prototype.getContent=function(){return this},t},{isClass:!0,isNode:!0});function errorTransform(e){return e&&e.isIndexError?new IndexError(e.index+1,e.min+1,void 0!==e.max?e.max+1:void 0):e}function accessFactory(e){var r=e["subset"];return function(e,t){try{if(Array.isArray(e))return r(e,t);if(e&&"function"==typeof e.subset)return e.subset(t);if("string"==typeof e)return r(e,t);if("object"!=typeof e)throw new TypeError("Cannot apply index: unsupported type of object");if(!t.isObjectProperty())throw new TypeError("Cannot apply a numeric index as object property");return getSafeProperty(e,t.getObjectProperty())}catch(e){throw errorTransform(e)}}}var name$1n="AccessorNode",dependencies$1n=["subset","Node"],createAccessorNode=factory(name$1n,dependencies$1n,e=>{var{subset:t,Node:e}=e,o=accessFactory({subset:t});function r(e,t){if(!(this instanceof r))throw new SyntaxError("Constructor must be called with the new operator");if(!isNode(e))throw new TypeError('Node expected for parameter "object"');if(!isIndexNode(t))throw new TypeError('IndexNode expected for parameter "index"');this.object=e||null,this.index=t,Object.defineProperty(this,"name",{get:function(){return this.index?this.index.isObjectProperty()?this.index.getObjectProperty():"":this.object.name||""}.bind(this),set:function(){throw new Error("Cannot assign a new name, name is read-only")}})}function n(e){return!(isAccessorNode(e)||isArrayNode(e)||isConstantNode(e)||isFunctionNode(e)||isObjectNode(e)||isParenthesisNode(e)||isSymbolNode(e))}return(r.prototype=new e).type="AccessorNode",r.prototype.isAccessorNode=!0,r.prototype._compile=function(e,t){var n=this.object._compile(e,t),i=this.index._compile(e,t);if(this.index.isObjectProperty()){var a=this.index.getObjectProperty();return function(e,t,r){return getSafeProperty(n(e,t,r),a)}}return function(e,t,r){r=n(e,t,r),t=i(e,t,r);return o(r,t)}},r.prototype.forEach=function(e){e(this.object,"object",this),e(this.index,"index",this)},r.prototype.map=function(e){return new r(this._ifNode(e(this.object,"object",this)),this._ifNode(e(this.index,"index",this)))},r.prototype.clone=function(){return new r(this.object,this.index)},r.prototype._toString=function(e){var t=this.object.toString(e);return(t=n(this.object)?"("+t+")":t)+this.index.toString(e)},r.prototype.toHTML=function(e){var t=this.object.toHTML(e);return(t=n(this.object)?'<span class="math-parenthesis math-round-parenthesis">(</span>'+t+'<span class="math-parenthesis math-round-parenthesis">)</span>':t)+this.index.toHTML(e)},r.prototype._toTex=function(e){var t=this.object.toTex(e);return(t=n(this.object)?"\\left(' + object + '\\right)":t)+this.index.toTex(e)},r.prototype.toJSON=function(){return{mathjs:"AccessorNode",object:this.object,index:this.index}},r.fromJSON=function(e){return new r(e.object,e.index)},r},{isClass:!0,isNode:!0}),name$1m="ArrayNode",dependencies$1m=["Node"],createArrayNode=factory(name$1m,dependencies$1m,e=>{var e=e["Node"];function n(e){if(!(this instanceof n))throw new SyntaxError("Constructor must be called with the new operator");if(this.items=e||[],!Array.isArray(this.items)||!this.items.every(isNode))throw new TypeError("Array containing Nodes expected")}return(n.prototype=new e).type="ArrayNode",n.prototype.isArrayNode=!0,n.prototype._compile=function(t,r){var e=map$1(this.items,function(e){return e._compile(t,r)});if("Array"===t.config.matrix)return function(t,r,n){return map$1(e,function(e){return e(t,r,n)})};var i=t.matrix;return function(t,r,n){return i(map$1(e,function(e){return e(t,r,n)}))}},n.prototype.forEach=function(e){for(var t=0;t<this.items.length;t++)e(this.items[t],"items["+t+"]",this)},n.prototype.map=function(e){for(var t=[],r=0;r<this.items.length;r++)t[r]=this._ifNode(e(this.items[r],"items["+r+"]",this));return new n(t)},n.prototype.clone=function(){return new n(this.items.slice(0))},n.prototype._toString=function(t){return"["+this.items.map(function(e){return e.toString(t)}).join(", ")+"]"},n.prototype.toJSON=function(){return{mathjs:"ArrayNode",items:this.items}},n.fromJSON=function(e){return new n(e.items)},n.prototype.toHTML=function(t){return'<span class="math-parenthesis math-square-parenthesis">[</span>'+this.items.map(function(e){return e.toHTML(t)}).join('<span class="math-separator">,</span>')+'<span class="math-parenthesis math-square-parenthesis">]</span>'},n.prototype._toTex=function(o){return function t(e,r){var n=e.some(isArrayNode)&&!e.every(isArrayNode),i=r||n,a=i?"&":"\\\\",a=e.map(function(e){return e.items?t(e.items,!r):e.toTex(o)}).join(a);return n||!i||i&&!r?"\\begin{bmatrix}"+a+"\\end{bmatrix}":a}(this.items,!1)},n},{isClass:!0,isNode:!0});function assignFactory(e){var{subset:n,matrix:i}=e;return function(e,t,r){try{if(Array.isArray(e))return i(e).subset(t,r).valueOf();if(e&&"function"==typeof e.subset)return e.subset(t,r);if("string"==typeof e)return n(e,t,r);if("object"!=typeof e)throw new TypeError("Cannot apply index: unsupported type of object");if(!t.isObjectProperty())throw TypeError("Cannot apply a numeric index as object property");return setSafeProperty(e,t.getObjectProperty(),r),e}catch(e){throw errorTransform(e)}}}var properties=[{AssignmentNode:{},FunctionAssignmentNode:{}},{ConditionalNode:{latexLeftParens:!1,latexRightParens:!1,latexParens:!1}},{"OperatorNode:or":{associativity:"left",associativeWith:[]}},{"OperatorNode:xor":{associativity:"left",associativeWith:[]}},{"OperatorNode:and":{associativity:"left",associativeWith:[]}},{"OperatorNode:bitOr":{associativity:"left",associativeWith:[]}},{"OperatorNode:bitXor":{associativity:"left",associativeWith:[]}},{"OperatorNode:bitAnd":{associativity:"left",associativeWith:[]}},{"OperatorNode:equal":{associativity:"left",associativeWith:[]},"OperatorNode:unequal":{associativity:"left",associativeWith:[]},"OperatorNode:smaller":{associativity:"left",associativeWith:[]},"OperatorNode:larger":{associativity:"left",associativeWith:[]},"OperatorNode:smallerEq":{associativity:"left",associativeWith:[]},"OperatorNode:largerEq":{associativity:"left",associativeWith:[]},RelationalNode:{associativity:"left",associativeWith:[]}},{"OperatorNode:leftShift":{associativity:"left",associativeWith:[]},"OperatorNode:rightArithShift":{associativity:"left",associativeWith:[]},"OperatorNode:rightLogShift":{associativity:"left",associativeWith:[]}},{"OperatorNode:to":{associativity:"left",associativeWith:[]}},{RangeNode:{}},{"OperatorNode:add":{associativity:"left",associativeWith:["OperatorNode:add","OperatorNode:subtract"]},"OperatorNode:subtract":{associativity:"left",associativeWith:[]}},{"OperatorNode:multiply":{associativity:"left",associativeWith:["OperatorNode:multiply","OperatorNode:divide","Operator:dotMultiply","Operator:dotDivide"]},"OperatorNode:divide":{associativity:"left",associativeWith:[],latexLeftParens:!1,latexRightParens:!1,latexParens:!1},"OperatorNode:dotMultiply":{associativity:"left",associativeWith:["OperatorNode:multiply","OperatorNode:divide","OperatorNode:dotMultiply","OperatorNode:doDivide"]},"OperatorNode:dotDivide":{associativity:"left",associativeWith:[]},"OperatorNode:mod":{associativity:"left",associativeWith:[]}},{"OperatorNode:unaryPlus":{associativity:"right"},"OperatorNode:unaryMinus":{associativity:"right"},"OperatorNode:bitNot":{associativity:"right"},"OperatorNode:not":{associativity:"right"}},{"OperatorNode:pow":{associativity:"right",associativeWith:[],latexRightParens:!1},"OperatorNode:dotPow":{associativity:"right",associativeWith:[]}},{"OperatorNode:factorial":{associativity:"left"}},{"OperatorNode:transpose":{associativity:"left"}}];function getPrecedence(e,t){for(var r=e,n=(r="keep"!==t?e.getContent():r).getIdentifier(),i=0;i<properties.length;i++)if(n in properties[i])return i;return null}function getAssociativity(e,t){var r=e,e=(r="keep"!==t?e.getContent():r).getIdentifier(),t=getPrecedence(r,t);if(null===t)return null;t=properties[t][e];if(hasOwnProperty$1(t,"associativity")){if("left"===t.associativity)return"left";if("right"===t.associativity)return"right";throw Error("'"+e+"' has the invalid associativity '"+t.associativity+"'.")}return null}function isAssociativeWith(e,t,r){var n="keep"!==r?e.getContent():e,e="keep"!==r?e.getContent():t,t=n.getIdentifier(),i=e.getIdentifier(),r=getPrecedence(n,r);if(null===r)return null;var a=properties[r][t];if(hasOwnProperty$1(a,"associativeWith")&&a.associativeWith instanceof Array){for(var o=0;o<a.associativeWith.length;o++)if(a.associativeWith[o]===i)return!0;return!1}return null}var name$1l="AssignmentNode",dependencies$1l=["subset","?matrix","Node"],createAssignmentNode=factory(name$1l,dependencies$1l,e=>{var{subset:t,matrix:r,Node:e}=e,m=accessFactory({subset:t}),f=assignFactory({subset:t,matrix:r});function n(e,t,r){if(!(this instanceof n))throw new SyntaxError("Constructor must be called with the new operator");if(this.object=e,this.index=r?t:null,this.value=r||t,!isSymbolNode(e)&&!isAccessorNode(e))throw new TypeError('SymbolNode or AccessorNode expected as "object"');if(isSymbolNode(e)&&"end"===e.name)throw new Error('Cannot assign to symbol "end"');if(this.index&&!isIndexNode(this.index))throw new TypeError('IndexNode expected as "index"');if(!isNode(this.value))throw new TypeError('Node expected as "value"');Object.defineProperty(this,"name",{get:function(){return this.index?this.index.isObjectProperty()?this.index.getObjectProperty():"":this.object.name||""}.bind(this),set:function(){throw new Error("Cannot assign a new name, name is read-only")}})}function i(e,t){var r=getPrecedence(e,t=t||"keep"),e=getPrecedence(e.value,t);return"all"===t||null!==e&&e<=r}return(n.prototype=new e).type="AssignmentNode",n.prototype.isAssignmentNode=!0,n.prototype._compile=function(e,t){var i=this.object._compile(e,t),s=this.index?this.index._compile(e,t):null,u=this.value._compile(e,t),a=this.object.name;if(this.index){if(this.index.isObjectProperty()){var o=this.index.getObjectProperty();return function(e,t,r){var n=i(e,t,r),r=u(e,t,r);return setSafeProperty(n,o,r),r}}if(isSymbolNode(this.object))return function(e,t,r){var n=i(e,t,r),r=u(e,t,r),t=s(e,t,n);return e.set(a,f(n,t,r)),r};var c=this.object.object._compile(e,t);if(this.object.index.isObjectProperty()){var l=this.object.index.getObjectProperty();return function(e,t,r){var n=c(e,t,r),i=getSafeProperty(n,l),a=s(e,t,i),r=u(e,t,r);return setSafeProperty(n,l,f(i,a,r)),r}}var p=this.object.index._compile(e,t);return function(e,t,r){var n=c(e,t,r),i=p(e,t,n),a=m(n,i),o=s(e,t,a),r=u(e,t,r);return f(n,i,f(a,o,r)),r}}if(!isSymbolNode(this.object))throw new TypeError("SymbolNode expected as object");return function(e,t,r){r=u(e,t,r);return e.set(a,r),r}},n.prototype.forEach=function(e){e(this.object,"object",this),this.index&&e(this.index,"index",this),e(this.value,"value",this)},n.prototype.map=function(e){return new n(this._ifNode(e(this.object,"object",this)),this.index?this._ifNode(e(this.index,"index",this)):null,this._ifNode(e(this.value,"value",this)))},n.prototype.clone=function(){return new n(this.object,this.index,this.value)},n.prototype._toString=function(e){var t=this.object.toString(e),r=this.index?this.index.toString(e):"",n=this.value.toString(e);return t+r+" = "+(n=i(this,e&&e.parenthesis)?"("+n+")":n)},n.prototype.toJSON=function(){return{mathjs:"AssignmentNode",object:this.object,index:this.index,value:this.value}},n.fromJSON=function(e){return new n(e.object,e.index,e.value)},n.prototype.toHTML=function(e){var t=this.object.toHTML(e),r=this.index?this.index.toHTML(e):"",n=this.value.toHTML(e);return t+r+'<span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>'+(n=i(this,e&&e.parenthesis)?'<span class="math-paranthesis math-round-parenthesis">(</span>'+n+'<span class="math-paranthesis math-round-parenthesis">)</span>':n)},n.prototype._toTex=function(e){var t=this.object.toTex(e),r=this.index?this.index.toTex(e):"",n=this.value.toTex(e);return t+r+":="+(n=i(this,e&&e.parenthesis)?"\\left(".concat(n,"\\right)"):n)},n},{isClass:!0,isNode:!0}),name$1k="BlockNode",dependencies$1k=["ResultSet","Node"],createBlockNode=factory(name$1k,dependencies$1k,e=>{var{ResultSet:o,Node:e}=e;function a(e){if(!(this instanceof a))throw new SyntaxError("Constructor must be called with the new operator");if(!Array.isArray(e))throw new Error("Array expected");this.blocks=e.map(function(e){var t=e&&e.node,e=!e||void 0===e.visible||e.visible;if(!isNode(t))throw new TypeError('Property "node" must be a Node');if("boolean"!=typeof e)throw new TypeError('Property "visible" must be a boolean');return{node:t,visible:e}})}return(a.prototype=new e).type="BlockNode",a.prototype.isBlockNode=!0,a.prototype._compile=function(t,r){var e=map$1(this.blocks,function(e){return{evaluate:e.node._compile(t,r),visible:e.visible}});return function(r,n,i){var a=[];return forEach$1(e,function(e){var t=e.evaluate(r,n,i);e.visible&&a.push(t)}),new o(a)}},a.prototype.forEach=function(e){for(var t=0;t<this.blocks.length;t++)e(this.blocks[t].node,"blocks["+t+"].node",this)},a.prototype.map=function(e){for(var t=[],r=0;r<this.blocks.length;r++){var n=this.blocks[r],i=this._ifNode(e(n.node,"blocks["+r+"].node",this));t[r]={node:i,visible:n.visible}}return new a(t)},a.prototype.clone=function(){return new a(this.blocks.map(function(e){return{node:e.node,visible:e.visible}}))},a.prototype._toString=function(t){return this.blocks.map(function(e){return e.node.toString(t)+(e.visible?"":";")}).join("\n")},a.prototype.toJSON=function(){return{mathjs:"BlockNode",blocks:this.blocks}},a.fromJSON=function(e){return new a(e.blocks)},a.prototype.toHTML=function(t){return this.blocks.map(function(e){return e.node.toHTML(t)+(e.visible?"":'<span class="math-separator">;</span>')}).join('<span class="math-separator"><br /></span>')},a.prototype._toTex=function(t){return this.blocks.map(function(e){return e.node.toTex(t)+(e.visible?"":";")}).join("\\;\\;\n")},a},{isClass:!0,isNode:!0}),name$1j="ConditionalNode",dependencies$1j=["Node"],createConditionalNode=factory(name$1j,dependencies$1j,e=>{var e=e["Node"];function n(e,t,r){if(!(this instanceof n))throw new SyntaxError("Constructor must be called with the new operator");if(!isNode(e))throw new TypeError("Parameter condition must be a Node");if(!isNode(t))throw new TypeError("Parameter trueExpr must be a Node");if(!isNode(r))throw new TypeError("Parameter falseExpr must be a Node");this.condition=e,this.trueExpr=t,this.falseExpr=r}return(n.prototype=new e).type="ConditionalNode",n.prototype.isConditionalNode=!0,n.prototype._compile=function(e,t){var n=this.condition._compile(e,t),i=this.trueExpr._compile(e,t),a=this.falseExpr._compile(e,t);return function(e,t,r){return(function(e){if("number"==typeof e||"boolean"==typeof e||"string"==typeof e)return!!e;if(e){if(isBigNumber(e))return!e.isZero();if(isComplex(e))return!(!e.re&&!e.im);if(isUnit(e))return!!e.value}if(null!=e)throw new TypeError('Unsupported type of condition "'+typeOf$1(e)+'"');return!1}(n(e,t,r))?i:a)(e,t,r)}},n.prototype.forEach=function(e){e(this.condition,"condition",this),e(this.trueExpr,"trueExpr",this),e(this.falseExpr,"falseExpr",this)},n.prototype.map=function(e){return new n(this._ifNode(e(this.condition,"condition",this)),this._ifNode(e(this.trueExpr,"trueExpr",this)),this._ifNode(e(this.falseExpr,"falseExpr",this)))},n.prototype.clone=function(){return new n(this.condition,this.trueExpr,this.falseExpr)},n.prototype._toString=function(e){var t=e&&e.parenthesis?e.parenthesis:"keep",r=getPrecedence(this,t),n=this.condition.toString(e),i=getPrecedence(this.condition,t);("all"===t||"OperatorNode"===this.condition.type||null!==i&&i<=r)&&(n="("+n+")");var a=this.trueExpr.toString(e),i=getPrecedence(this.trueExpr,t);("all"===t||"OperatorNode"===this.trueExpr.type||null!==i&&i<=r)&&(a="("+a+")");i=this.falseExpr.toString(e),e=getPrecedence(this.falseExpr,t);return n+" ? "+a+" : "+(i="all"===t||"OperatorNode"===this.falseExpr.type||null!==e&&e<=r?"("+i+")":i)},n.prototype.toJSON=function(){return{mathjs:"ConditionalNode",condition:this.condition,trueExpr:this.trueExpr,falseExpr:this.falseExpr}},n.fromJSON=function(e){return new n(e.condition,e.trueExpr,e.falseExpr)},n.prototype.toHTML=function(e){var t=e&&e.parenthesis?e.parenthesis:"keep",r=getPrecedence(this,t),n=this.condition.toHTML(e),i=getPrecedence(this.condition,t);("all"===t||"OperatorNode"===this.condition.type||null!==i&&i<=r)&&(n='<span class="math-parenthesis math-round-parenthesis">(</span>'+n+'<span class="math-parenthesis math-round-parenthesis">)</span>');var a=this.trueExpr.toHTML(e),i=getPrecedence(this.trueExpr,t);("all"===t||"OperatorNode"===this.trueExpr.type||null!==i&&i<=r)&&(a='<span class="math-parenthesis math-round-parenthesis">(</span>'+a+'<span class="math-parenthesis math-round-parenthesis">)</span>');i=this.falseExpr.toHTML(e),e=getPrecedence(this.falseExpr,t);return n+'<span class="math-operator math-conditional-operator">?</span>'+a+'<span class="math-operator math-conditional-operator">:</span>'+(i="all"===t||"OperatorNode"===this.falseExpr.type||null!==e&&e<=r?'<span class="math-parenthesis math-round-parenthesis">(</span>'+i+'<span class="math-parenthesis math-round-parenthesis">)</span>':i)},n.prototype._toTex=function(e){return"\\begin{cases} {"+this.trueExpr.toTex(e)+"}, &\\quad{\\text{if }\\;"+this.condition.toTex(e)+"}\\\\{"+this.falseExpr.toTex(e)+"}, &\\quad{\\text{otherwise}}\\end{cases}"},n},{isClass:!0,isNode:!0}),_extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r,n=arguments[t];for(r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},defaultEscapes={"{":"\\{","}":"\\}","\\":"\\textbackslash{}","#":"\\#",$:"\\$","%":"\\%","&":"\\&","^":"\\textasciicircum{}",_:"\\_","~":"\\textasciitilde{}"},formatEscapes={"–":"\\--","—":"\\---"," ":"~","\t":"\\qquad{}","\r\n":"\\newline{}","\n":"\\newline{}"},defaultEscapeMapFn=function(e,t){return _extends({},e,t)},dist=function(e){for(var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},r=t.preserveFormatting,r=void 0!==r&&r,t=t.escapeMapFn,t=void 0===t?defaultEscapeMapFn:t,n=String(e),i="",a=t(_extends({},defaultEscapes),r?_extends({},formatEscapes):{}),o=Object.keys(a);n;)!function(){var r=!1;o.forEach(function(e,t){r||n.length>=e.length&&n.slice(0,e.length)===e&&(i+=a[o[t]],n=n.slice(e.length,n.length),r=!0)}),r||(i+=n.slice(0,1),n=n.slice(1,n.length))}();return i},latexSymbols={Alpha:"A",alpha:"\\alpha",Beta:"B",beta:"\\beta",Gamma:"\\Gamma",gamma:"\\gamma",Delta:"\\Delta",delta:"\\delta",Epsilon:"E",epsilon:"\\epsilon",varepsilon:"\\varepsilon",Zeta:"Z",zeta:"\\zeta",Eta:"H",eta:"\\eta",Theta:"\\Theta",theta:"\\theta",vartheta:"\\vartheta",Iota:"I",iota:"\\iota",Kappa:"K",kappa:"\\kappa",varkappa:"\\varkappa",Lambda:"\\Lambda",lambda:"\\lambda",Mu:"M",mu:"\\mu",Nu:"N",nu:"\\nu",Xi:"\\Xi",xi:"\\xi",Omicron:"O",omicron:"o",Pi:"\\Pi",pi:"\\pi",varpi:"\\varpi",Rho:"P",rho:"\\rho",varrho:"\\varrho",Sigma:"\\Sigma",sigma:"\\sigma",varsigma:"\\varsigma",Tau:"T",tau:"\\tau",Upsilon:"\\Upsilon",upsilon:"\\upsilon",Phi:"\\Phi",phi:"\\phi",varphi:"\\varphi",Chi:"X",chi:"\\chi",Psi:"\\Psi",psi:"\\psi",Omega:"\\Omega",omega:"\\omega",true:"\\mathrm{True}",false:"\\mathrm{False}",i:"i",inf:"\\infty",Inf:"\\infty",infinity:"\\infty",Infinity:"\\infty",oo:"\\infty",lim:"\\lim",undefined:"\\mathbf{?}"},latexOperators={transpose:"^\\top",ctranspose:"^H",factorial:"!",pow:"^",dotPow:".^\\wedge",unaryPlus:"+",unaryMinus:"-",bitNot:"\\~",not:"\\neg",multiply:"\\cdot",divide:"\\frac",dotMultiply:".\\cdot",dotDivide:".:",mod:"\\mod",add:"+",subtract:"-",to:"\\rightarrow",leftShift:"<<",rightArithShift:">>",rightLogShift:">>>",equal:"=",unequal:"\\neq",smaller:"<",larger:">",smallerEq:"\\leq",largerEq:"\\geq",bitAnd:"\\&",bitXor:"\\underline{|}",bitOr:"|",and:"\\wedge",xor:"\\veebar",or:"\\vee"},latexFunctions={abs:{1:"\\left|${args[0]}\\right|"},add:{2:"\\left(${args[0]}".concat(latexOperators.add,"${args[1]}\\right)")},cbrt:{1:"\\sqrt[3]{${args[0]}}"},ceil:{1:"\\left\\lceil${args[0]}\\right\\rceil"},cube:{1:"\\left(${args[0]}\\right)^3"},divide:{2:"\\frac{${args[0]}}{${args[1]}}"},dotDivide:{2:"\\left(${args[0]}".concat(latexOperators.dotDivide,"${args[1]}\\right)")},dotMultiply:{2:"\\left(${args[0]}".concat(latexOperators.dotMultiply,"${args[1]}\\right)")},dotPow:{2:"\\left(${args[0]}".concat(latexOperators.dotPow,"${args[1]}\\right)")},exp:{1:"\\exp\\left(${args[0]}\\right)"},expm1:"\\left(e".concat(latexOperators.pow,"{${args[0]}}-1\\right)"),fix:{1:"\\mathrm{${name}}\\left(${args[0]}\\right)"},floor:{1:"\\left\\lfloor${args[0]}\\right\\rfloor"},gcd:"\\gcd\\left(${args}\\right)",hypot:"\\hypot\\left(${args}\\right)",log:{1:"\\ln\\left(${args[0]}\\right)",2:"\\log_{${args[1]}}\\left(${args[0]}\\right)"},log10:{1:"\\log_{10}\\left(${args[0]}\\right)"},log1p:{1:"\\ln\\left(${args[0]}+1\\right)",2:"\\log_{${args[1]}}\\left(${args[0]}+1\\right)"},log2:"\\log_{2}\\left(${args[0]}\\right)",mod:{2:"\\left(${args[0]}".concat(latexOperators.mod,"${args[1]}\\right)")},multiply:{2:"\\left(${args[0]}".concat(latexOperators.multiply,"${args[1]}\\right)")},norm:{1:"\\left\\|${args[0]}\\right\\|",2:void 0},nthRoot:{2:"\\sqrt[${args[1]}]{${args[0]}}"},nthRoots:{2:"\\{y : $y^{args[1]} = {${args[0]}}\\}"},pow:{2:"\\left(${args[0]}\\right)".concat(latexOperators.pow,"{${args[1]}}")},round:{1:"\\left\\lfloor${args[0]}\\right\\rceil",2:void 0},sign:{1:"\\mathrm{${name}}\\left(${args[0]}\\right)"},sqrt:{1:"\\sqrt{${args[0]}}"},square:{1:"\\left(${args[0]}\\right)^2"},subtract:{2:"\\left(${args[0]}".concat(latexOperators.subtract,"${args[1]}\\right)")},unaryMinus:{1:"".concat(latexOperators.unaryMinus,"\\left(${args[0]}\\right)")},unaryPlus:{1:"".concat(latexOperators.unaryPlus,"\\left(${args[0]}\\right)")},bitAnd:{2:"\\left(${args[0]}".concat(latexOperators.bitAnd,"${args[1]}\\right)")},bitNot:{1:latexOperators.bitNot+"\\left(${args[0]}\\right)"},bitOr:{2:"\\left(${args[0]}".concat(latexOperators.bitOr,"${args[1]}\\right)")},bitXor:{2:"\\left(${args[0]}".concat(latexOperators.bitXor,"${args[1]}\\right)")},leftShift:{2:"\\left(${args[0]}".concat(latexOperators.leftShift,"${args[1]}\\right)")},rightArithShift:{2:"\\left(${args[0]}".concat(latexOperators.rightArithShift,"${args[1]}\\right)")},rightLogShift:{2:"\\left(${args[0]}".concat(latexOperators.rightLogShift,"${args[1]}\\right)")},bellNumbers:{1:"\\mathrm{B}_{${args[0]}}"},catalan:{1:"\\mathrm{C}_{${args[0]}}"},stirlingS2:{2:"\\mathrm{S}\\left(${args}\\right)"},arg:{1:"\\arg\\left(${args[0]}\\right)"},conj:{1:"\\left(${args[0]}\\right)^*"},im:{1:"\\Im\\left\\lbrace${args[0]}\\right\\rbrace"},re:{1:"\\Re\\left\\lbrace${args[0]}\\right\\rbrace"},and:{2:"\\left(${args[0]}".concat(latexOperators.and,"${args[1]}\\right)")},not:{1:latexOperators.not+"\\left(${args[0]}\\right)"},or:{2:"\\left(${args[0]}".concat(latexOperators.or,"${args[1]}\\right)")},xor:{2:"\\left(${args[0]}".concat(latexOperators.xor,"${args[1]}\\right)")},cross:{2:"\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)"},ctranspose:{1:"\\left(${args[0]}\\right)".concat(latexOperators.ctranspose)},det:{1:"\\det\\left(${args[0]}\\right)"},dot:{2:"\\left(${args[0]}\\cdot${args[1]}\\right)"},expm:{1:"\\exp\\left(${args[0]}\\right)"},inv:{1:"\\left(${args[0]}\\right)^{-1}"},sqrtm:{1:"{${args[0]}}".concat(latexOperators.pow,"{\\frac{1}{2}}")},trace:{1:"\\mathrm{tr}\\left(${args[0]}\\right)"},transpose:{1:"\\left(${args[0]}\\right)".concat(latexOperators.transpose)},combinations:{2:"\\binom{${args[0]}}{${args[1]}}"},combinationsWithRep:{2:"\\left(\\!\\!{\\binom{${args[0]}}{${args[1]}}}\\!\\!\\right)"},factorial:{1:"\\left(${args[0]}\\right)".concat(latexOperators.factorial)},gamma:{1:"\\Gamma\\left(${args[0]}\\right)"},equal:{2:"\\left(${args[0]}".concat(latexOperators.equal,"${args[1]}\\right)")},larger:{2:"\\left(${args[0]}".concat(latexOperators.larger,"${args[1]}\\right)")},largerEq:{2:"\\left(${args[0]}".concat(latexOperators.largerEq,"${args[1]}\\right)")},smaller:{2:"\\left(${args[0]}".concat(latexOperators.smaller,"${args[1]}\\right)")},smallerEq:{2:"\\left(${args[0]}".concat(latexOperators.smallerEq,"${args[1]}\\right)")},unequal:{2:"\\left(${args[0]}".concat(latexOperators.unequal,"${args[1]}\\right)")},erf:{1:"erf\\left(${args[0]}\\right)"},max:"\\max\\left(${args}\\right)",min:"\\min\\left(${args}\\right)",variance:"\\mathrm{Var}\\left(${args}\\right)",acos:{1:"\\cos^{-1}\\left(${args[0]}\\right)"},acosh:{1:"\\cosh^{-1}\\left(${args[0]}\\right)"},acot:{1:"\\cot^{-1}\\left(${args[0]}\\right)"},acoth:{1:"\\coth^{-1}\\left(${args[0]}\\right)"},acsc:{1:"\\csc^{-1}\\left(${args[0]}\\right)"},acsch:{1:"\\mathrm{csch}^{-1}\\left(${args[0]}\\right)"},asec:{1:"\\sec^{-1}\\left(${args[0]}\\right)"},asech:{1:"\\mathrm{sech}^{-1}\\left(${args[0]}\\right)"},asin:{1:"\\sin^{-1}\\left(${args[0]}\\right)"},asinh:{1:"\\sinh^{-1}\\left(${args[0]}\\right)"},atan:{1:"\\tan^{-1}\\left(${args[0]}\\right)"},atan2:{2:"\\mathrm{atan2}\\left(${args}\\right)"},atanh:{1:"\\tanh^{-1}\\left(${args[0]}\\right)"},cos:{1:"\\cos\\left(${args[0]}\\right)"},cosh:{1:"\\cosh\\left(${args[0]}\\right)"},cot:{1:"\\cot\\left(${args[0]}\\right)"},coth:{1:"\\coth\\left(${args[0]}\\right)"},csc:{1:"\\csc\\left(${args[0]}\\right)"},csch:{1:"\\mathrm{csch}\\left(${args[0]}\\right)"},sec:{1:"\\sec\\left(${args[0]}\\right)"},sech:{1:"\\mathrm{sech}\\left(${args[0]}\\right)"},sin:{1:"\\sin\\left(${args[0]}\\right)"},sinh:{1:"\\sinh\\left(${args[0]}\\right)"},tan:{1:"\\tan\\left(${args[0]}\\right)"},tanh:{1:"\\tanh\\left(${args[0]}\\right)"},to:{2:"\\left(${args[0]}".concat(latexOperators.to,"${args[1]}\\right)")},numeric:function(e,t){return e.args[0].toTex()},number:{0:"0",1:"\\left(${args[0]}\\right)",2:"\\left(\\left(${args[0]}\\right)${args[1]}\\right)"},string:{0:'\\mathtt{""}',1:"\\mathrm{string}\\left(${args[0]}\\right)"},bignumber:{0:"0",1:"\\left(${args[0]}\\right)"},complex:{0:"0",1:"\\left(${args[0]}\\right)",2:"\\left(\\left(${args[0]}\\right)+".concat(latexSymbols.i,"\\cdot\\left(${args[1]}\\right)\\right)")},matrix:{0:"\\begin{bmatrix}\\end{bmatrix}",1:"\\left(${args[0]}\\right)",2:"\\left(${args[0]}\\right)"},sparse:{0:"\\begin{bsparse}\\end{bsparse}",1:"\\left(${args[0]}\\right)"},unit:{1:"\\left(${args[0]}\\right)",2:"\\left(\\left(${args[0]}\\right)${args[1]}\\right)"}},defaultTemplate="\\mathrm{${name}}\\left(${args}\\right)",latexUnits={deg:"^\\circ"};function escapeLatex(e){return dist(e,{preserveFormatting:!0})}function toSymbol(e,t){return(t=void 0!==t&&t)?hasOwnProperty$1(latexUnits,e)?latexUnits[e]:"\\mathrm{"+escapeLatex(e)+"}":hasOwnProperty$1(latexSymbols,e)?latexSymbols[e]:escapeLatex(e)}var name$1i="ConstantNode",dependencies$1i=["Node"],createConstantNode=factory(name$1i,dependencies$1i,e=>{var e=e["Node"];function t(e){if(!(this instanceof t))throw new SyntaxError("Constructor must be called with the new operator");this.value=e}return(t.prototype=new e).type="ConstantNode",t.prototype.isConstantNode=!0,t.prototype._compile=function(e,t){var r=this.value;return function(){return r}},t.prototype.forEach=function(e){},t.prototype.map=function(e){return this.clone()},t.prototype.clone=function(){return new t(this.value)},t.prototype._toString=function(e){return format$1(this.value,e)},t.prototype.toHTML=function(e){var t=this._toString(e);switch(typeOf$1(this.value)){case"number":case"BigNumber":case"Fraction":return'<span class="math-number">'+t+"</span>";case"string":return'<span class="math-string">'+t+"</span>";case"boolean":return'<span class="math-boolean">'+t+"</span>";case"null":return'<span class="math-null-symbol">'+t+"</span>";case"undefined":return'<span class="math-undefined">'+t+"</span>";default:return'<span class="math-symbol">'+t+"</span>"}},t.prototype.toJSON=function(){return{mathjs:"ConstantNode",value:this.value}},t.fromJSON=function(e){return new t(e.value)},t.prototype._toTex=function(e){var t=this._toString(e);switch(typeOf$1(this.value)){case"string":return"\\mathtt{"+escapeLatex(t)+"}";case"number":case"BigNumber":if(!isFinite(this.value))return this.value.valueOf()<0?"-\\infty":"\\infty";var r=t.toLowerCase().indexOf("e");return-1!==r?t.substring(0,r)+"\\cdot10^{"+t.substring(r+1)+"}":t;case"Fraction":return this.value.toLatex();default:return t}},t},{isClass:!0,isNode:!0}),name$1h="FunctionAssignmentNode",dependencies$1h=["typed","Node"],createFunctionAssignmentNode=factory(name$1h,dependencies$1h,e=>{var{typed:l,Node:e}=e;function n(e,t,r){if(!(this instanceof n))throw new SyntaxError("Constructor must be called with the new operator");if("string"!=typeof e)throw new TypeError('String expected for parameter "name"');if(!Array.isArray(t))throw new TypeError('Array containing strings or objects expected for parameter "params"');if(!isNode(r))throw new TypeError('Node expected for parameter "expr"');if(keywords.has(e))throw new Error('Illegal function name, "'+e+'" is a reserved keyword');this.name=e,this.params=t.map(function(e){return e&&e.name||e}),this.types=t.map(function(e){return e&&e.type||"any"}),this.expr=r}function i(e,t){var r=getPrecedence(e,t),e=getPrecedence(e.expr,t);return"all"===t||null!==e&&e<=r}return(n.prototype=new e).type="FunctionAssignmentNode",n.prototype.isFunctionAssignmentNode=!0,n.prototype._compile=function(e,t){var r=Object.create(t);forEach$1(this.params,function(e){r[e]=!0});var a=this.expr._compile(e,r),o=this.name,s=this.params,u=join(this.types,","),c=o+"("+join(this.params,", ")+")";return function(r,n,i){var e={};e[u]=function(){for(var e=Object.create(n),t=0;t<s.length;t++)e[s[t]]=arguments[t];return a(r,e,i)};e=l(o,e);return e.syntax=c,r.set(o,e),e}},n.prototype.forEach=function(e){e(this.expr,"expr",this)},n.prototype.map=function(e){e=this._ifNode(e(this.expr,"expr",this));return new n(this.name,this.params.slice(0),e)},n.prototype.clone=function(){return new n(this.name,this.params.slice(0),this.expr)},n.prototype._toString=function(e){var t=e&&e.parenthesis?e.parenthesis:"keep",e=this.expr.toString(e);return i(this,t)&&(e="("+e+")"),this.name+"("+this.params.join(", ")+") = "+e},n.prototype.toJSON=function(){var r=this.types;return{mathjs:"FunctionAssignmentNode",name:this.name,params:this.params.map(function(e,t){return{name:e,type:r[t]}}),expr:this.expr}},n.fromJSON=function(e){return new n(e.name,e.params,e.expr)},n.prototype.toHTML=function(e){for(var t=e&&e.parenthesis?e.parenthesis:"keep",r=[],n=0;n<this.params.length;n++)r.push('<span class="math-symbol math-parameter">'+escape(this.params[n])+"</span>");e=this.expr.toHTML(e);return i(this,t)&&(e='<span class="math-parenthesis math-round-parenthesis">(</span>'+e+'<span class="math-parenthesis math-round-parenthesis">)</span>'),'<span class="math-function">'+escape(this.name)+'</span><span class="math-parenthesis math-round-parenthesis">(</span>'+r.join('<span class="math-separator">,</span>')+'<span class="math-parenthesis math-round-parenthesis">)</span><span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>'+e},n.prototype._toTex=function(e){var t=e&&e.parenthesis?e.parenthesis:"keep",e=this.expr.toTex(e);return i(this,t)&&(e="\\left(".concat(e,"\\right)")),"\\mathrm{"+this.name+"}\\left("+this.params.map(toSymbol).join(",")+"\\right):="+e},n},{isClass:!0,isNode:!0}),name$1g="IndexNode",dependencies$1g=["Range","Node","size"],createIndexNode=factory(name$1g,dependencies$1g,e=>{var{Range:n,Node:e,size:f}=e;function i(e,t){if(!(this instanceof i))throw new SyntaxError("Constructor must be called with the new operator");if(this.dimensions=e,this.dotNotation=t||!1,!Array.isArray(e)||!e.every(isNode))throw new TypeError('Array containing Nodes expected for parameter "dimensions"');if(this.dotNotation&&!this.isObjectProperty())throw new Error("dotNotation only applicable for object properties")}function d(e,t,r){return new n(isBigNumber(e)?e.toNumber():e,isBigNumber(t)?t.toNumber():t,isBigNumber(r)?r.toNumber():r)}return(i.prototype=new e).type="IndexNode",i.prototype.isIndexNode=!0,i.prototype._compile=function(r,m){var i=map$1(this.dimensions,function(e,i){if(isRangeNode(e)){if(e.needsEnd()){var t=Object.create(m);t.end=!0;var a=e.start._compile(r,t),o=e.end._compile(r,t),s=e.step?e.step._compile(r,t):function(){return 1};return function(e,t,r){var n=f(r).valueOf(),t=Object.create(t);return t.end=n[i],d(a(e,t,r),o(e,t,r),s(e,t,r))}}var n=e.start._compile(r,m),u=e.end._compile(r,m),c=e.step?e.step._compile(r,m):function(){return 1};return function(e,t,r){return d(n(e,t,r),u(e,t,r),c(e,t,r))}}if(isSymbolNode(e)&&"end"===e.name){t=Object.create(m);t.end=!0;var l=e._compile(r,t);return function(e,t,r){var n=f(r).valueOf(),t=Object.create(t);return t.end=n[i],l(e,t,r)}}var p=e._compile(r,m);return function(e,t,r){return p(e,t,r)}}),a=getSafeProperty(r,"index");return function(t,r,n){var e=map$1(i,function(e){return e(t,r,n)});return a(...e)}},i.prototype.forEach=function(e){for(var t=0;t<this.dimensions.length;t++)e(this.dimensions[t],"dimensions["+t+"]",this)},i.prototype.map=function(e){for(var t=[],r=0;r<this.dimensions.length;r++)t[r]=this._ifNode(e(this.dimensions[r],"dimensions["+r+"]",this));return new i(t,this.dotNotation)},i.prototype.clone=function(){return new i(this.dimensions.slice(0),this.dotNotation)},i.prototype.isObjectProperty=function(){return 1===this.dimensions.length&&isConstantNode(this.dimensions[0])&&"string"==typeof this.dimensions[0].value},i.prototype.getObjectProperty=function(){return this.isObjectProperty()?this.dimensions[0].value:null},i.prototype._toString=function(e){return this.dotNotation?"."+this.getObjectProperty():"["+this.dimensions.join(", ")+"]"},i.prototype.toJSON=function(){return{mathjs:"IndexNode",dimensions:this.dimensions,dotNotation:this.dotNotation}},i.fromJSON=function(e){return new i(e.dimensions,e.dotNotation)},i.prototype.toHTML=function(e){for(var t=[],r=0;r<this.dimensions.length;r++)t[r]=this.dimensions[r].toHTML();return this.dotNotation?'<span class="math-operator math-accessor-operator">.</span><span class="math-symbol math-property">'+escape(this.getObjectProperty())+"</span>":'<span class="math-parenthesis math-square-parenthesis">[</span>'+t.join('<span class="math-separator">,</span>')+'<span class="math-parenthesis math-square-parenthesis">]</span>'},i.prototype._toTex=function(t){var e=this.dimensions.map(function(e){return e.toTex(t)});return this.dotNotation?"."+this.getObjectProperty():"_{"+e.join(",")+"}"},i},{isClass:!0,isNode:!0}),name$1f="ObjectNode",dependencies$1f=["Node"],createObjectNode=factory(name$1f,dependencies$1f,e=>{var e=e["Node"];function n(t){if(!(this instanceof n))throw new SyntaxError("Constructor must be called with the new operator");if(this.properties=t||{},t&&("object"!=typeof t||!Object.keys(t).every(function(e){return isNode(t[e])})))throw new TypeError("Object containing Nodes expected")}return(n.prototype=new e).type="ObjectNode",n.prototype.isObjectNode=!0,n.prototype._compile=function(e,t){var r,a={};for(r in this.properties)if(hasOwnProperty$1(this.properties,r)){var n=stringify(r),n=JSON.parse(n);if(!isSafeProperty(this.properties,n))throw new Error('No access to property "'+n+'"');a[n]=this.properties[r]._compile(e,t)}return function(e,t,r){var n,i={};for(n in a)hasOwnProperty$1(a,n)&&(i[n]=a[n](e,t,r));return i}},n.prototype.forEach=function(e){for(var t in this.properties)hasOwnProperty$1(this.properties,t)&&e(this.properties[t],"properties["+stringify(t)+"]",this)},n.prototype.map=function(e){var t,r={};for(t in this.properties)hasOwnProperty$1(this.properties,t)&&(r[t]=this._ifNode(e(this.properties[t],"properties["+stringify(t)+"]",this)));return new n(r)},n.prototype.clone=function(){var e,t={};for(e in this.properties)hasOwnProperty$1(this.properties,e)&&(t[e]=this.properties[e]);return new n(t)},n.prototype._toString=function(e){var t,r=[];for(t in this.properties)hasOwnProperty$1(this.properties,t)&&r.push(stringify(t)+": "+this.properties[t].toString(e));return"{"+r.join(", ")+"}"},n.prototype.toJSON=function(){return{mathjs:"ObjectNode",properties:this.properties}},n.fromJSON=function(e){return new n(e.properties)},n.prototype.toHTML=function(e){var t,r=[];for(t in this.properties)hasOwnProperty$1(this.properties,t)&&r.push('<span class="math-symbol math-property">'+escape(t)+'</span><span class="math-operator math-assignment-operator math-property-assignment-operator math-binary-operator">:</span>'+this.properties[t].toHTML(e));return'<span class="math-parenthesis math-curly-parenthesis">{</span>'+r.join('<span class="math-separator">,</span>')+'<span class="math-parenthesis math-curly-parenthesis">}</span>'},n.prototype._toTex=function(e){var t,r=[];for(t in this.properties)hasOwnProperty$1(this.properties,t)&&r.push("\\mathbf{"+t+":} & "+this.properties[t].toTex(e)+"\\\\");return"\\left\\{\\begin{array}{ll}".concat(r.join("\n"),"\\end{array}\\right\\}")},n},{isClass:!0,isNode:!0}),name$1e="OperatorNode",dependencies$1e=["Node"],createOperatorNode=factory(name$1e,dependencies$1e,e=>{var e=e["Node"];function a(e,t,r,n,i){if(!(this instanceof a))throw new SyntaxError("Constructor must be called with the new operator");if("string"!=typeof e)throw new TypeError('string expected for parameter "op"');if("string"!=typeof t)throw new TypeError('string expected for parameter "fn"');if(!Array.isArray(r)||!r.every(isNode))throw new TypeError('Array containing Nodes expected for parameter "args"');this.implicit=!0===n,this.isPercentage=!0===i,this.op=e,this.fn=t,this.args=r||[]}function m(n,i,e,t,r){var a,o=getPrecedence(n,i),s=getAssociativity(n,i);if("all"===i||2<t.length&&"OperatorNode:add"!==n.getIdentifier()&&"OperatorNode:multiply"!==n.getIdentifier())return t.map(function(e){switch(e.getContent().type){case"ArrayNode":case"ConstantNode":case"SymbolNode":case"ParenthesisNode":return!1;default:return!0}});switch(t.length){case 0:a=[];break;case 1:var u=getPrecedence(t[0],i);if(r&&null!==u){var c="keep"===i?(d=t[0].getIdentifier(),n.getIdentifier()):(d=t[0].getContent().getIdentifier(),n.getContent().getIdentifier());if(!1===properties[o][c].latexLeftParens){a=[!1];break}if(!1===properties[u][d].latexParens){a=[!1];break}}if(null===u){a=[!1];break}if(u<=o){a=[!0];break}a=[!1];break;case 2:var l,p,m=getPrecedence(t[0],i),f=isAssociativeWith(n,t[0],i),c=null!==m&&(m===o&&"right"===s&&!f||m<o),d=getPrecedence(t[1],i),u=isAssociativeWith(n,t[1],i),f=null!==d&&(d===o&&"left"===s&&!u||d<o);r&&(u="keep"===i?(l=n.getIdentifier(),p=n.args[0].getIdentifier(),n.args[1].getIdentifier()):(l=n.getContent().getIdentifier(),p=n.args[0].getContent().getIdentifier(),n.args[1].getContent().getIdentifier()),null!==m&&(!1===properties[o][l].latexLeftParens&&(c=!1),!1===properties[m][p].latexParens&&(c=!1)),null!==d&&(!1===properties[o][l].latexRightParens&&(f=!1),!1===properties[d][u].latexParens&&(f=!1))),a=[c,f];break;default:"OperatorNode:add"!==n.getIdentifier()&&"OperatorNode:multiply"!==n.getIdentifier()||(a=t.map(function(e){var t=getPrecedence(e,i),r=isAssociativeWith(n,e,i),e=getAssociativity(e,i);return null!==t&&(o===t&&s===e&&!r||t<o)}))}return a=2<=t.length&&"OperatorNode:multiply"===n.getIdentifier()&&n.implicit&&"auto"===i&&"hide"===e?t.map(function(e,t){e="ParenthesisNode"===e.getIdentifier();return!(!a[t]&&!e)}):a}return(a.prototype=new e).type="OperatorNode",a.prototype.isOperatorNode=!0,a.prototype._compile=function(t,r){if("string"!=typeof this.fn||!isSafeMethod(t,this.fn))throw t[this.fn]?new Error('No access to function "'+this.fn+'"'):new Error("Function "+this.fn+' missing in provided namespace "math"');var i=getSafeProperty(t,this.fn),e=map$1(this.args,function(e){return e._compile(t,r)});if(1===e.length){var n=e[0];return function(e,t,r){return i(n(e,t,r))}}if(2!==e.length)return function(t,r,n){return i.apply(null,map$1(e,function(e){return e(t,r,n)}))};var a=e[0],o=e[1];return function(e,t,r){return i(a(e,t,r),o(e,t,r))}},a.prototype.forEach=function(e){for(var t=0;t<this.args.length;t++)e(this.args[t],"args["+t+"]",this)},a.prototype.map=function(e){for(var t=[],r=0;r<this.args.length;r++)t[r]=this._ifNode(e(this.args[r],"args["+r+"]",this));return new a(this.op,this.fn,t,this.implicit,this.isPercentage)},a.prototype.clone=function(){return new a(this.op,this.fn,this.args.slice(0),this.implicit,this.isPercentage)},a.prototype.isUnary=function(){return 1===this.args.length},a.prototype.isBinary=function(){return 2===this.args.length},a.prototype._toString=function(r){var e=r&&r.parenthesis?r.parenthesis:"keep",t=r&&r.implicit?r.implicit:"hide",n=this.args,i=m(this,e,t,n,!1);if(1===n.length){var e=getAssociativity(this,e),a=n[0].toString(r);i[0]&&(a="("+a+")");var o=/[a-zA-Z]+/.test(this.op);return"right"===e?this.op+(o?" ":"")+a:"left"===e?a+(o?" ":"")+this.op:a+this.op}if(2===n.length){o=n[0].toString(r),a=n[1].toString(r);return i[0]&&(o="("+o+")"),i[1]&&(a="("+a+")"),this.implicit&&"OperatorNode:multiply"===this.getIdentifier()&&"hide"===t?o+" "+a:o+" "+this.op+" "+a}if(2<n.length&&("OperatorNode:add"===this.getIdentifier()||"OperatorNode:multiply"===this.getIdentifier())){n=n.map(function(e,t){return e=e.toString(r),e=i[t]?"("+e+")":e});return this.implicit&&"OperatorNode:multiply"===this.getIdentifier()&&"hide"===t?n.join(" "):n.join(" "+this.op+" ")}return this.fn+"("+this.args.join(", ")+")"},a.prototype.toJSON=function(){return{mathjs:"OperatorNode",op:this.op,fn:this.fn,args:this.args,implicit:this.implicit,isPercentage:this.isPercentage}},a.fromJSON=function(e){return new a(e.op,e.fn,e.args,e.implicit,e.isPercentage)},a.prototype.toHTML=function(r){var e=r&&r.parenthesis?r.parenthesis:"keep",t=r&&r.implicit?r.implicit:"hide",n=this.args,i=m(this,e,t,n,!1);if(1===n.length){var e=getAssociativity(this,e),a=n[0].toHTML(r);return i[0]&&(a='<span class="math-parenthesis math-round-parenthesis">(</span>'+a+'<span class="math-parenthesis math-round-parenthesis">)</span>'),"right"===e?'<span class="math-operator math-unary-operator math-lefthand-unary-operator">'+escape(this.op)+"</span>"+a:a+'<span class="math-operator math-unary-operator math-righthand-unary-operator">'+escape(this.op)+"</span>"}if(2===n.length){var a=n[0].toHTML(r),o=n[1].toHTML(r);return i[0]&&(a='<span class="math-parenthesis math-round-parenthesis">(</span>'+a+'<span class="math-parenthesis math-round-parenthesis">)</span>'),i[1]&&(o='<span class="math-parenthesis math-round-parenthesis">(</span>'+o+'<span class="math-parenthesis math-round-parenthesis">)</span>'),this.implicit&&"OperatorNode:multiply"===this.getIdentifier()&&"hide"===t?a+'<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>'+o:a+'<span class="math-operator math-binary-operator math-explicit-binary-operator">'+escape(this.op)+"</span>"+o}o=n.map(function(e,t){return e=e.toHTML(r),e=i[t]?'<span class="math-parenthesis math-round-parenthesis">(</span>'+e+'<span class="math-parenthesis math-round-parenthesis">)</span>':e});return 2<n.length&&("OperatorNode:add"===this.getIdentifier()||"OperatorNode:multiply"===this.getIdentifier())?this.implicit&&"OperatorNode:multiply"===this.getIdentifier()&&"hide"===t?o.join('<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>'):o.join('<span class="math-operator math-binary-operator math-explicit-binary-operator">'+escape(this.op)+"</span>"):'<span class="math-function">'+escape(this.fn)+'</span><span class="math-paranthesis math-round-parenthesis">(</span>'+o.join('<span class="math-separator">,</span>')+'<span class="math-paranthesis math-round-parenthesis">)</span>'},a.prototype._toTex=function(r){var e=r&&r.parenthesis?r.parenthesis:"keep",t=r&&r.implicit?r.implicit:"hide",n=this.args,i=m(this,e,t,n,!0),a=void 0===(a=latexOperators[this.fn])?this.op:a;if(1===n.length){var o=getAssociativity(this,e),s=n[0].toTex(r);return i[0]&&(s="\\left(".concat(s,"\\right)")),"right"===o?a+s:s+a}if(2===n.length){var u=n[0],c=u.toTex(r);i[0]&&(c="\\left(".concat(c,"\\right)"));var l,p=n[1].toTex(r);switch(i[1]&&(p="\\left(".concat(p,"\\right)")),l=("keep"===e?u:u.getContent()).getIdentifier(),this.getIdentifier()){case"OperatorNode:divide":return a+"{"+c+"}{"+p+"}";case"OperatorNode:pow":switch(c="{"+c+"}",p="{"+p+"}",l){case"ConditionalNode":case"OperatorNode:divide":c="\\left(".concat(c,"\\right)")}break;case"OperatorNode:multiply":if(this.implicit&&"hide"===t)return c+"~"+p}return c+a+p}if(2<n.length&&("OperatorNode:add"===this.getIdentifier()||"OperatorNode:multiply"===this.getIdentifier())){u=n.map(function(e,t){return e=e.toTex(r),e=i[t]?"\\left(".concat(e,"\\right)"):e});return"OperatorNode:multiply"===this.getIdentifier()&&this.implicit?u.join("~"):u.join(a)}return"\\mathrm{"+this.fn+"}\\left("+n.map(function(e){return e.toTex(r)}).join(",")+"\\right)"},a.prototype.getIdentifier=function(){return this.type+":"+this.fn},a},{isClass:!0,isNode:!0}),name$1d="ParenthesisNode",dependencies$1d=["Node"],createParenthesisNode=factory(name$1d,dependencies$1d,e=>{var e=e["Node"];function t(e){if(!(this instanceof t))throw new SyntaxError("Constructor must be called with the new operator");if(!isNode(e))throw new TypeError('Node expected for parameter "content"');this.content=e}return(t.prototype=new e).type="ParenthesisNode",t.prototype.isParenthesisNode=!0,t.prototype._compile=function(e,t){return this.content._compile(e,t)},t.prototype.getContent=function(){return this.content.getContent()},t.prototype.forEach=function(e){e(this.content,"content",this)},t.prototype.map=function(e){return new t(e(this.content,"content",this))},t.prototype.clone=function(){return new t(this.content)},t.prototype._toString=function(e){return!e||!e.parenthesis||e&&"keep"===e.parenthesis?"("+this.content.toString(e)+")":this.content.toString(e)},t.prototype.toJSON=function(){return{mathjs:"ParenthesisNode",content:this.content}},t.fromJSON=function(e){return new t(e.content)},t.prototype.toHTML=function(e){return!e||!e.parenthesis||e&&"keep"===e.parenthesis?'<span class="math-parenthesis math-round-parenthesis">(</span>'+this.content.toHTML(e)+'<span class="math-parenthesis math-round-parenthesis">)</span>':this.content.toHTML(e)},t.prototype._toTex=function(e){return!e||!e.parenthesis||e&&"keep"===e.parenthesis?"\\left(".concat(this.content.toTex(e),"\\right)"):this.content.toTex(e)},t},{isClass:!0,isNode:!0}),name$1c="RangeNode",dependencies$1c=["Node"],createRangeNode=factory(name$1c,dependencies$1c,e=>{var e=e["Node"];function n(e,t,r){if(!(this instanceof n))throw new SyntaxError("Constructor must be called with the new operator");if(!isNode(e))throw new TypeError("Node expected");if(!isNode(t))throw new TypeError("Node expected");if(r&&!isNode(r))throw new TypeError("Node expected");if(3<arguments.length)throw new Error("Too many arguments");this.start=e,this.end=t,this.step=r||null}function i(e,t){var r=getPrecedence(e,t),n={},i=getPrecedence(e.start,t);n.start=null!==i&&i<=r||"all"===t,e.step&&(i=getPrecedence(e.step,t),n.step=null!==i&&i<=r||"all"===t);e=getPrecedence(e.end,t);return n.end=null!==e&&e<=r||"all"===t,n}return(n.prototype=new e).type="RangeNode",n.prototype.isRangeNode=!0,n.prototype.needsEnd=function(){return 0<this.filter(function(e){return isSymbolNode(e)&&"end"===e.name}).length},n.prototype._compile=function(e,t){var n=e.range,i=this.start._compile(e,t),a=this.end._compile(e,t);if(this.step){var o=this.step._compile(e,t);return function(e,t,r){return n(i(e,t,r),a(e,t,r),o(e,t,r))}}return function(e,t,r){return n(i(e,t,r),a(e,t,r))}},n.prototype.forEach=function(e){e(this.start,"start",this),e(this.end,"end",this),this.step&&e(this.step,"step",this)},n.prototype.map=function(e){return new n(this._ifNode(e(this.start,"start",this)),this._ifNode(e(this.end,"end",this)),this.step&&this._ifNode(e(this.step,"step",this)))},n.prototype.clone=function(){return new n(this.start,this.end,this.step&&this.step)},n.prototype._toString=function(e){var t=i(this,e&&e.parenthesis?e.parenthesis:"keep"),r=this.start.toString(e),n=r=t.start?"("+r+")":r;this.step&&(r=this.step.toString(e),n+=":"+(r=t.step?"("+r+")":r));e=this.end.toString(e);return n+=":"+(e=t.end?"("+e+")":e)},n.prototype.toJSON=function(){return{mathjs:"RangeNode",start:this.start,end:this.end,step:this.step}},n.fromJSON=function(e){return new n(e.start,e.end,e.step)},n.prototype.toHTML=function(e){var t=i(this,e&&e.parenthesis?e.parenthesis:"keep"),r=this.start.toHTML(e),n=r=t.start?'<span class="math-parenthesis math-round-parenthesis">(</span>'+r+'<span class="math-parenthesis math-round-parenthesis">)</span>':r;this.step&&(r=this.step.toHTML(e),n+='<span class="math-operator math-range-operator">:</span>'+(r=t.step?'<span class="math-parenthesis math-round-parenthesis">(</span>'+r+'<span class="math-parenthesis math-round-parenthesis">)</span>':r));e=this.end.toHTML(e);return n+='<span class="math-operator math-range-operator">:</span>'+(e=t.end?'<span class="math-parenthesis math-round-parenthesis">(</span>'+e+'<span class="math-parenthesis math-round-parenthesis">)</span>':e)},n.prototype._toTex=function(e){var t,r=i(this,e&&e.parenthesis?e.parenthesis:"keep"),n=this.start.toTex(e);r.start&&(n="\\left(".concat(n,"\\right)")),this.step&&(t=this.step.toTex(e),n+=":"+(t=r.step?"\\left(".concat(t,"\\right)"):t));e=this.end.toTex(e);return n+=":"+(e=r.end?"\\left(".concat(e,"\\right)"):e)},n},{isClass:!0,isNode:!0}),name$1b="RelationalNode",dependencies$1b=["Node"],createRelationalNode=factory(name$1b,dependencies$1b,e=>{var e=e["Node"];function n(e,t){if(!(this instanceof n))throw new SyntaxError("Constructor must be called with the new operator");if(!Array.isArray(e))throw new TypeError("Parameter conditionals must be an array");if(!Array.isArray(t))throw new TypeError("Parameter params must be an array");if(e.length!==t.length-1)throw new TypeError("Parameter params must contain exactly one more element than parameter conditionals");this.conditionals=e,this.params=t}return(n.prototype=new e).type="RelationalNode",n.prototype.isRelationalNode=!0,n.prototype._compile=function(o,t){var s=this,u=this.params.map(e=>e._compile(o,t));return function(e,t,r){for(var n=u[0](e,t,r),i=0;i<s.conditionals.length;i++){var a=n,n=u[i+1](e,t,r);if(!getSafeProperty(o,s.conditionals[i])(a,n))return!1}return!0}},n.prototype.forEach=function(r){this.params.forEach((e,t)=>r(e,"params["+t+"]",this),this)},n.prototype.map=function(r){return new n(this.conditionals.slice(),this.params.map((e,t)=>this._ifNode(r(e,"params["+t+"]",this)),this))},n.prototype.clone=function(){return new n(this.conditionals,this.params)},n.prototype._toString=function(n){for(var i=n&&n.parenthesis?n.parenthesis:"keep",a=getPrecedence(this,i),e=this.params.map(function(e,t){var r=getPrecedence(e,i);return"all"===i||null!==r&&r<=a?"("+e.toString(n)+")":e.toString(n)}),t={equal:"==",unequal:"!=",smaller:"<",larger:">",smallerEq:"<=",largerEq:">="},r=e[0],o=0;o<this.conditionals.length;o++)r+=" "+t[this.conditionals[o]]+" "+e[o+1];return r},n.prototype.toJSON=function(){return{mathjs:"RelationalNode",conditionals:this.conditionals,params:this.params}},n.fromJSON=function(e){return new n(e.conditionals,e.params)},n.prototype.toHTML=function(n){for(var i=n&&n.parenthesis?n.parenthesis:"keep",a=getPrecedence(this,i),e=this.params.map(function(e,t){var r=getPrecedence(e,i);return"all"===i||null!==r&&r<=a?'<span class="math-parenthesis math-round-parenthesis">(</span>'+e.toHTML(n)+'<span class="math-parenthesis math-round-parenthesis">)</span>':e.toHTML(n)}),t={equal:"==",unequal:"!=",smaller:"<",larger:">",smallerEq:"<=",largerEq:">="},r=e[0],o=0;o<this.conditionals.length;o++)r+='<span class="math-operator math-binary-operator math-explicit-binary-operator">'+escape(t[this.conditionals[o]])+"</span>"+e[o+1];return r},n.prototype._toTex=function(n){for(var i=n&&n.parenthesis?n.parenthesis:"keep",a=getPrecedence(this,i),e=this.params.map(function(e,t){var r=getPrecedence(e,i);return"all"===i||null!==r&&r<=a?"\\left("+e.toTex(n)+"\right)":e.toTex(n)}),t=e[0],r=0;r<this.conditionals.length;r++)t+=latexOperators[this.conditionals[r]]+e[r+1];return t},n},{isClass:!0,isNode:!0}),name$1a="SymbolNode",dependencies$1a=["math","?Unit","Node"],createSymbolNode=factory(name$1a,dependencies$1a,e=>{var{math:r,Unit:o,Node:e}=e;function s(e){return!!o&&o.isValuelessUnit(e)}function u(e){if(!(this instanceof u))throw new SyntaxError("Constructor must be called with the new operator");if("string"!=typeof e)throw new TypeError('String expected for parameter "name"');this.name=e}return(u.prototype=new e).type="SymbolNode",u.prototype.isSymbolNode=!0,u.prototype._compile=function(n,e){var i=this.name;if(!0===e[i])return function(e,t,r){return t[i]};if(i in n)return function(e,t,r){return e.has(i)?e.get(i):getSafeProperty(n,i)};var a=s(i);return function(e,t,r){return e.has(i)?e.get(i):a?new o(null,i):u.onUndefinedSymbol(i)}},u.prototype.forEach=function(e){},u.prototype.map=function(e){return this.clone()},u.onUndefinedSymbol=function(e){throw new Error("Undefined symbol "+e)},u.prototype.clone=function(){return new u(this.name)},u.prototype._toString=function(e){return this.name},u.prototype.toHTML=function(e){var t=escape(this.name);return"true"===t||"false"===t?'<span class="math-symbol math-boolean">'+t+"</span>":"i"===t?'<span class="math-symbol math-imaginary-symbol">'+t+"</span>":"Infinity"===t?'<span class="math-symbol math-infinity-symbol">'+t+"</span>":"NaN"===t?'<span class="math-symbol math-nan-symbol">'+t+"</span>":"null"===t?'<span class="math-symbol math-null-symbol">'+t+"</span>":"undefined"===t?'<span class="math-symbol math-undefined-symbol">'+t+"</span>":'<span class="math-symbol">'+t+"</span>"},u.prototype.toJSON=function(){return{mathjs:"SymbolNode",name:this.name}},u.fromJSON=function(e){return new u(e.name)},u.prototype._toTex=function(e){var t=!1;void 0===r[this.name]&&s(this.name)&&(t=!0);t=toSymbol(this.name,t);return"\\"===t[0]?t:" "+t},u},{isClass:!0,isNode:!0});function createSubScope(e){for(var t=arguments.length,r=new Array(1<t?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return"function"==typeof e.createSubScope?assign(e.createSubScope(),...r):assign(createEmptyMap(),e,...r)}var name$19="FunctionNode",dependencies$19=["math","Node","SymbolNode"],createFunctionNode=factory(name$19,dependencies$19,e=>{var{math:i,Node:e,SymbolNode:r}=e;function f(e,t){if(!(this instanceof f))throw new SyntaxError("Constructor must be called with the new operator");if(!isNode(e="string"==typeof e?new r(e):e))throw new TypeError('Node expected as parameter "fn"');if(!Array.isArray(t)||!t.every(isNode))throw new TypeError('Array containing Nodes expected for parameter "args"');this.fn=e,this.args=t||[],Object.defineProperty(this,"name",{get:function(){return this.fn.name||""}.bind(this),set:function(){throw new Error("Cannot assign a new name, name is read-only")}})}(f.prototype=new e).type="FunctionNode",f.prototype.isFunctionNode=!0,f.prototype._compile=function(a,t){if(!(this instanceof f))throw new TypeError("No valid FunctionNode");var o=this.args.map(e=>e._compile(a,t));if(!isSymbolNode(this.fn)){if(isAccessorNode(this.fn)&&isIndexNode(this.fn.index)&&this.fn.index.isObjectProperty()){var s=this.fn.object._compile(a,t),u=this.fn.index.getObjectProperty(),c=this.args;return function(t,r,n){var e=s(t,r,n);if(validateSafeMethod(e,u),e[u]&&e[u].rawArgs)return e[u](c,a,createSubScope(t,r),t);var i=o.map(e=>e(t,r,n));return e[u].apply(e,i)}}var l=this.fn._compile(a,t),p=this.args;return function(t,r,n){var e=l(t,r,n);if(e&&e.rawArgs)return e(p,a,createSubScope(t,r),t);var i=o.map(e=>e(t,r,n));return e.apply(e,i)}}var r=this.fn.name,e=r in a?getSafeProperty(a,r):void 0,e="function"==typeof e&&!0===e.rawArgs,m=e=>e.has(r)?e.get(r):r in a?getSafeProperty(a,r):f.onUndefinedFunction(r);if(e){var n=this.args;return function(e,t,r){return m(e)(n,a,createSubScope(e,t),e)}}switch(o.length){case 0:return function(e,t,r){return m(e)()};case 1:return function(e,t,r){return m(e)((0,o[0])(e,t,r))};case 2:return function(e,t,r){var n=m(e),i=o[0],a=o[1];return n(i(e,t,r),a(e,t,r))};default:return function(t,r,n){return m(t)(...o.map(e=>e(t,r,n)))}}},f.prototype.forEach=function(e){e(this.fn,"fn",this);for(var t=0;t<this.args.length;t++)e(this.args[t],"args["+t+"]",this)},f.prototype.map=function(e){for(var t=this._ifNode(e(this.fn,"fn",this)),r=[],n=0;n<this.args.length;n++)r[n]=this._ifNode(e(this.args[n],"args["+n+"]",this));return new f(t,r)},f.prototype.clone=function(){return new f(this.fn,this.args.slice(0))},f.onUndefinedFunction=function(e){throw new Error("Undefined function "+e)};var n=f.prototype.toString;function a(e,t,r){for(var n,i="",a=/\$(?:\{([a-z_][a-z_0-9]*)(?:\[([0-9]+)\])?\}|\$)/gi,o=0;null!==(n=a.exec(e));)if(i+=e.substring(o,n.index),o=n.index,"$$"===n[0])i+="$",o++;else{o+=n[0].length;var s=t[n[1]];if(!s)throw new ReferenceError("Template: Property "+n[1]+" does not exist.");if(void 0===n[2])switch(typeof s){case"string":i+=s;break;case"object":if(isNode(s))i+=s.toTex(r);else{if(!Array.isArray(s))throw new TypeError("Template: "+n[1]+" has to be a Node, String or array of Nodes");i+=s.map(function(e,t){if(isNode(e))return e.toTex(r);throw new TypeError("Template: "+n[1]+"["+t+"] is not a Node.")}).join(",")}break;default:throw new TypeError("Template: "+n[1]+" has to be a Node, String or array of Nodes")}else{if(!isNode(s[n[2]]&&s[n[2]]))throw new TypeError("Template: "+n[1]+"["+n[2]+"] is not a Node.");i+=s[n[2]].toTex(r)}}return i+=e.slice(o)}f.prototype.toString=function(e){var t,r=this.fn.toString(e);return void 0!==(t=e&&"object"==typeof e.handler&&hasOwnProperty$1(e.handler,r)?e.handler[r](this,e):t)?t:n.call(this,e)},f.prototype._toString=function(t){var e=this.args.map(function(e){return e.toString(t)});return(isFunctionAssignmentNode(this.fn)?"("+this.fn.toString(t)+")":this.fn.toString(t))+"("+e.join(", ")+")"},f.prototype.toJSON=function(){return{mathjs:"FunctionNode",fn:this.fn,args:this.args}},f.fromJSON=function(e){return new f(e.fn,e.args)},f.prototype.toHTML=function(t){var e=this.args.map(function(e){return e.toHTML(t)});return'<span class="math-function">'+escape(this.fn)+'</span><span class="math-paranthesis math-round-parenthesis">(</span>'+e.join('<span class="math-separator">,</span>')+'<span class="math-paranthesis math-round-parenthesis">)</span>'};var o=f.prototype.toTex;return f.prototype.toTex=function(e){var t;return void 0!==(t=e&&"object"==typeof e.handler&&hasOwnProperty$1(e.handler,this.name)?e.handler[this.name](this,e):t)?t:o.call(this,e)},f.prototype._toTex=function(t){var e,r,n=this.args.map(function(e){return e.toTex(t)});switch(latexFunctions[this.name]&&(e=latexFunctions[this.name]),typeof(e=i[this.name]&&("function"==typeof i[this.name].toTex||"object"==typeof i[this.name].toTex||"string"==typeof i[this.name].toTex)?i[this.name].toTex:e)){case"function":r=e(this,t);break;case"string":r=a(e,this,t);break;case"object":switch(typeof e[n.length]){case"function":r=e[n.length](this,t);break;case"string":r=a(e[n.length],this,t)}}return void 0!==r?r:a(defaultTemplate,this,t)},f.prototype.getIdentifier=function(){return this.type+":"+this.name},f},{isClass:!0,isNode:!0}),name$18="parse",dependencies$18=["typed","numeric","config","AccessorNode","ArrayNode","AssignmentNode","BlockNode","ConditionalNode","ConstantNode","FunctionAssignmentNode","FunctionNode","IndexNode","ObjectNode","OperatorNode","ParenthesisNode","RangeNode","RelationalNode","SymbolNode"],createParse=factory(name$18,dependencies$18,e=>{var{typed:e,numeric:s,config:u,AccessorNode:i,ArrayNode:c,AssignmentNode:o,BlockNode:a,ConditionalNode:l,ConstantNode:p,FunctionAssignmentNode:m,FunctionNode:f,IndexNode:d,ObjectNode:h,OperatorNode:y,ParenthesisNode:g,RangeNode:n,RelationalNode:x,SymbolNode:v}=e,b=e(name$18,{string:function(e){return B(e,{})},"Array | Matrix":function(e){return t(e,{})},"string, Object":function(e,t){return B(e,void 0!==t.nodes?t.nodes:{})},"Array | Matrix, Object":t});function t(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},r=void 0!==t.nodes?t.nodes:{};return deepMap(e,function(e){if("string"!=typeof e)throw new TypeError("String expected");return B(e,r)})}var w={NULL:0,DELIMITER:1,NUMBER:2,SYMBOL:3,UNKNOWN:4},N={",":!0,"(":!0,")":!0,"[":!0,"]":!0,"{":!0,"}":!0,'"':!0,"'":!0,";":!0,"+":!0,"-":!0,"*":!0,".*":!0,"/":!0,"./":!0,"%":!0,"^":!0,".^":!0,"~":!0,"!":!0,"&":!0,"|":!0,"^|":!0,"=":!0,":":!0,"?":!0,"==":!0,"!=":!0,"<":!0,">":!0,"<=":!0,">=":!0,"<<":!0,">>":!0,">>>":!0},M={mod:!0,to:!0,in:!0,and:!0,xor:!0,or:!0,not:!0},S={true:!0,false:!1,null:null,undefined:void 0},$=["NaN","Infinity"];function E(e,t){return e.expression.substr(e.index,t)}function A(e){return E(e,1)}function O(e){e.index++}function C(e){return e.expression.charAt(e.index-1)}function T(e){return e.expression.charAt(e.index+1)}function D(e){for(e.tokenType=w.NULL,e.token="",e.comment="";b.isWhitespace(A(e),e.nestingLevel);)O(e);if("#"===A(e))for(;"\n"!==A(e)&&""!==A(e);)e.comment+=A(e),O(e);if(""!==A(e)){if("\n"===A(e)&&!e.nestingLevel)return e.tokenType=w.DELIMITER,e.token=A(e),void O(e);var t=A(e),r=E(e,2),n=E(e,3);if(3===n.length&&N[n])return e.tokenType=w.DELIMITER,e.token=n,O(e),O(e),void O(e);if(2===r.length&&N[r])return e.tokenType=w.DELIMITER,e.token=r,O(e),void O(e);if(N[t])return e.tokenType=w.DELIMITER,e.token=t,void O(e);if(b.isDigitDot(t)){e.tokenType=w.NUMBER;t=E(e,2);if("0b"!==t&&"0o"!==t&&"0x"!==t){if("."===A(e)){if(e.token+=A(e),O(e),!b.isDigit(A(e)))return void(e.tokenType=w.DELIMITER)}else{for(;b.isDigit(A(e));)e.token+=A(e),O(e);b.isDecimalMark(A(e),T(e))&&(e.token+=A(e),O(e))}for(;b.isDigit(A(e));)e.token+=A(e),O(e);if("E"===A(e)||"e"===A(e))if(b.isDigit(T(e))||"-"===T(e)||"+"===T(e)){if(e.token+=A(e),O(e),"+"!==A(e)&&"-"!==A(e)||(e.token+=A(e),O(e)),!b.isDigit(A(e)))throw re(e,'Digit expected, got "'+A(e)+'"');for(;b.isDigit(A(e));)e.token+=A(e),O(e);if(b.isDecimalMark(A(e),T(e)))throw re(e,'Digit expected, got "'+A(e)+'"')}else if("."===T(e))throw O(e),re(e,'Digit expected, got "'+A(e)+'"')}else{for(e.token+=A(e),O(e),e.token+=A(e),O(e);b.isHexDigit(A(e));)e.token+=A(e),O(e);if("."===A(e))for(e.token+=".",O(e);b.isHexDigit(A(e));)e.token+=A(e),O(e);else if("i"===A(e))for(e.token+="i",O(e);b.isDigit(A(e));)e.token+=A(e),O(e)}}else{if(!b.isAlpha(A(e),C(e),T(e))){for(e.tokenType=w.UNKNOWN;""!==A(e);)e.token+=A(e),O(e);throw re(e,'Syntax error in part "'+e.token+'"')}for(;b.isAlpha(A(e),C(e),T(e))||b.isDigit(A(e));)e.token+=A(e),O(e);hasOwnProperty$1(M,e.token)?e.tokenType=w.DELIMITER:e.tokenType=w.SYMBOL}}else e.tokenType=w.DELIMITER}function _(e){for(;D(e),"\n"===e.token;);}function I(e){e.nestingLevel++}function R(e){e.nestingLevel--}function B(e,t){var r={extraNodes:{},expression:"",comment:"",index:0,token:"",tokenType:w.NULL,nestingLevel:0,conditionalLevel:null};_extends$1(r,{expression:e,extraNodes:t}),D(r);t=function(e){var t,r,n=[];""!==e.token&&"\n"!==e.token&&";"!==e.token&&((t=q(e)).comment=e.comment);for(;"\n"===e.token||";"===e.token;)0===n.length&&t&&(r=";"!==e.token,n.push({node:t,visible:r})),D(e),"\n"!==e.token&&";"!==e.token&&""!==e.token&&((t=q(e)).comment=e.comment,r=";"!==e.token,n.push({node:t,visible:r}));return 0<n.length?new a(n):(t||((t=new p(void 0)).comment=e.comment),t)}(r);if(""!==r.token)throw r.tokenType===w.DELIMITER?ne(r,"Unexpected operator "+r.token):re(r,'Unexpected part "'+r.token+'"');return t}function q(e){var t,r,n,i,a=function(e){var t=function(e){var t=F(e);for(;"or"===e.token;)_(e),t=new y("or","or",[t,F(e)]);return t}(e);for(;"?"===e.token;){var r=e.conditionalLevel;e.conditionalLevel=e.nestingLevel,_(e);var n=t,i=q(e);if(":"!==e.token)throw re(e,"False part of conditional expression expected");e.conditionalLevel=null,_(e);var a=q(e);t=new l(n,i,a),e.conditionalLevel=r}return t}(e);if("="!==e.token)return a;if(isSymbolNode(a))return t=a.name,_(e),n=q(e),new o(new v(t),n);if(isAccessorNode(a))return _(e),n=q(e),new o(a.object,a.index,n);if(isFunctionNode(a)&&isSymbolNode(a.fn)&&(i=!0,r=[],t=a.name,a.args.forEach(function(e,t){isSymbolNode(e)?r[t]=e.name:i=!1}),i))return _(e),n=q(e),new m(t,r,n);throw re(e,"Invalid left hand side of assignment operator =")}function F(e){for(var t=r(e);"xor"===e.token;)_(e),t=new y("xor","xor",[t,r(e)]);return t}function r(e){for(var t=z(e);"and"===e.token;)_(e),t=new y("and","and",[t,z(e)]);return t}function z(e){for(var t=P(e);"|"===e.token;)_(e),t=new y("|","bitOr",[t,P(e)]);return t}function P(e){for(var t=k(e);"^|"===e.token;)_(e),t=new y("^|","bitXor",[t,k(e)]);return t}function k(e){for(var t=U(e);"&"===e.token;)_(e),t=new y("&","bitAnd",[t,U(e)]);return t}function U(e){for(var t=[L(e)],r=[],n={"==":"equal","!=":"unequal","<":"smaller",">":"larger","<=":"smallerEq",">=":"largerEq"};hasOwnProperty$1(n,e.token);){var i={name:e.token,fn:n[e.token]};r.push(i),_(e),t.push(L(e))}return 1===t.length?t[0]:2===t.length?new y(r[0].name,r[0].fn,t):new x(r.map(e=>e.fn),t)}function L(e){for(var t,r,n,i=j(e),a={"<<":"leftShift",">>":"rightArithShift",">>>":"rightLogShift"};hasOwnProperty$1(a,e.token);)r=a[t=e.token],_(e),n=[i,j(e)],i=new y(t,r,n);return i}function j(e){for(var t,r,n,i=G(e),a={to:"to",in:"to"};hasOwnProperty$1(a,e.token);)r=a[t=e.token],_(e),i="in"===t&&""===e.token?new y("*","multiply",[i,new v("in")],!0):(n=[i,G(e)],new y(t,r,n));return i}function G(e){var t=[],r=":"===e.token?new p(1):H(e);if(":"===e.token&&e.conditionalLevel!==e.nestingLevel){for(t.push(r);":"===e.token&&t.length<3;)_(e),")"===e.token||"]"===e.token||","===e.token||""===e.token?t.push(new v("end")):t.push(H(e));r=3===t.length?new n(t[0],t[2],t[1]):new n(t[0],t[1])}return r}function H(e){var t,r;a=V(e);for(var n={"+":"add","-":"subtract"};hasOwnProperty$1(n,e.token);){r=n[t=e.token],_(e);var i=V(e),i=i.isPercentage?[a,new y("*","multiply",[a,i])]:[a,i],a=new y(t,r,i)}return a}function V(e){for(var t,r,n,i=Z(e),a={"*":"multiply",".*":"dotMultiply","/":"divide","./":"dotDivide"};;){if(!hasOwnProperty$1(a,e.token))break;r=a[t=e.token],_(e),n=Z(e),i=new y(t,r,[i,n])}return i}function Z(e){for(var t=W(e),r=t;;){if(!(e.tokenType===w.SYMBOL||"in"===e.token&&isConstantNode(t))&&(e.tokenType!==w.NUMBER||isConstantNode(r)||isOperatorNode(r)&&"!"!==r.op)&&"("!==e.token)break;r=W(e),t=new y("*","multiply",[t,r],!0)}return t}function W(e){for(var t=J(e),r=t,n=[];;){if("/"!==e.token||!isConstantNode(r))break;if(n.push(_extends$1({},e)),_(e),e.tokenType!==w.NUMBER){_extends$1(e,n.pop());break}if(n.push(_extends$1({},e)),_(e),e.tokenType!==w.SYMBOL&&"("!==e.token){n.pop(),_extends$1(e,n.pop());break}_extends$1(e,n.pop()),n.pop(),r=J(e),t=new y("/","divide",[t,r])}return t}function J(e){for(var t,r,n,i=Y(e),a={"%":"mod",mod:"mod"};hasOwnProperty$1(a,e.token);)r=a[t=e.token],_(e),i="%"===t&&e.tokenType===w.DELIMITER&&"("!==e.token?new y("/","divide",[i,new p(100)],!1,!0):(n=[i,Y(e)],new y(t,r,n));return i}function Y(e){var t,r,n={"-":"unaryMinus","+":"unaryPlus","~":"bitNot",not:"not"};return hasOwnProperty$1(n,e.token)?(r=n[e.token],t=e.token,_(e),n=[Y(e)],new y(t,r,n)):function(e){var t,r,n;t=function(e){var t,r,n;t=function(e){var t=[];if(e.tokenType===w.SYMBOL&&hasOwnProperty$1(e.extraNodes,e.token)){var r=e.extraNodes[e.token];if(D(e),"("===e.token){if(t=[],I(e),D(e),")"!==e.token)for(t.push(q(e));","===e.token;)D(e),t.push(q(e));if(")"!==e.token)throw re(e,"Parenthesis ) expected");R(e),D(e)}return new r(t)}return function(e){var t;if(e.tokenType===w.SYMBOL||e.tokenType===w.DELIMITER&&e.token in M)return t=e.token,D(e),t=hasOwnProperty$1(S,t)?new p(S[t]):-1!==$.indexOf(t)?new p(s(t,"number")):new v(t),t=X(e,t);return function(e){var t;return'"'!==e.token?function(e){var t;return"'"!==e.token?function(e){var t,r,n,i;if("["!==e.token)return function(e){if("{"!==e.token)return function(e){var t;return e.tokenType!==w.NUMBER?function(e){var t;if("("!==e.token)return function(e){throw""===e.token?re(e,"Unexpected end of expression"):re(e,"Value expected")}(e);if(I(e),D(e),t=q(e),")"===e.token)return R(e),D(e),t=new g(t),t=X(e,t);throw re(e,"Parenthesis ) expected")}(e):(t=e.token,D(e),new p(s(t,u.number)))}(e);var t;I(e);var r={};do{if(D(e),"}"!==e.token){if('"'===e.token)t=Q(e);else if("'"===e.token)t=K(e);else{if(!(e.tokenType===w.SYMBOL||e.tokenType===w.DELIMITER&&e.token in M))throw re(e,"Symbol or string expected as object key");t=e.token,D(e)}if(":"!==e.token)throw re(e,"Colon : expected after object key");D(e),r[t]=q(e)}}while(","===e.token);if("}"!==e.token)throw re(e,"Comma , or bracket } expected after object value");R(e),D(e);var n=new h(r);return n=X(e,n)}(e);if(I(e),D(e),"]"!==e.token){var a=ee(e);if(";"===e.token){for(n=1,r=[a];";"===e.token;)D(e),r[n]=ee(e),n++;if("]"!==e.token)throw re(e,"End of matrix ] expected");R(e),D(e),i=r[0].items.length;for(var o=1;o<n;o++)if(r[o].items.length!==i)throw ne(e,"Column dimensions mismatch ("+r[o].items.length+" !== "+i+")");t=new c(r)}else{if("]"!==e.token)throw re(e,"End of matrix ] expected");R(e),D(e),t=a}}else R(e),D(e),t=new c([]);return X(e,t)}(e):(t=K(e),t=new p(t),t=X(e,t))}(e):(t=Q(e),t=new p(t),t=X(e,t))}(e)}(e)}(e);var i={"!":"factorial","'":"ctranspose"};for(;hasOwnProperty$1(i,e.token);)r=e.token,n=i[r],D(e),t=new y(r,n,[t]),t=X(e,t);return t}(e),"^"!==e.token&&".^"!==e.token||(r=e.token,n="^"===r?"pow":"dotPow",_(e),e=[t,Y(e)],t=new y(r,n,e));return t}(e)}function X(e,t,r){for(var n;!("("!==e.token&&"["!==e.token&&"."!==e.token||r&&-1===r.indexOf(e.token));)if(n=[],"("===e.token){if(!isSymbolNode(t)&&!isAccessorNode(t))return t;if(I(e),D(e),")"!==e.token)for(n.push(q(e));","===e.token;)D(e),n.push(q(e));if(")"!==e.token)throw re(e,"Parenthesis ) expected");R(e),D(e),t=new f(t,n)}else if("["===e.token){if(I(e),D(e),"]"!==e.token)for(n.push(q(e));","===e.token;)D(e),n.push(q(e));if("]"!==e.token)throw re(e,"Parenthesis ] expected");R(e),D(e),t=new i(t,new d(n))}else{if(D(e),e.tokenType!==w.SYMBOL)throw re(e,"Property name expected after dot");n.push(new p(e.token)),D(e);t=new i(t,new d(n,!0))}return t}function Q(e){for(var t="";""!==A(e)&&'"'!==A(e);)"\\"===A(e)&&(t+=A(e),O(e)),t+=A(e),O(e);if(D(e),'"'!==e.token)throw re(e,'End of string " expected');return D(e),JSON.parse('"'+t+'"')}function K(e){for(var t="";""!==A(e)&&"'"!==A(e);)"\\"===A(e)&&(t+=A(e),O(e)),t+=A(e),O(e);if(D(e),"'"!==e.token)throw re(e,"End of string ' expected");return D(e),JSON.parse('"'+t+'"')}function ee(e){for(var t=[q(e)],r=1;","===e.token;)D(e),t[r]=q(e),r++;return new c(t)}function te(e){return e.index-e.token.length+1}function re(e,t){e=te(e),t=new SyntaxError(t+" (char "+e+")");return t.char=e,t}function ne(e,t){e=te(e),t=new SyntaxError(t+" (char "+e+")");return t.char=e,t}return b.isAlpha=function(e,t,r){return b.isValidLatinOrGreek(e)||b.isValidMathSymbol(e,r)||b.isValidMathSymbol(t,e)},b.isValidLatinOrGreek=function(e){return/^[a-zA-Z_$\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(e)},b.isValidMathSymbol=function(e,t){return/^[\uD835]$/.test(e)&&/^[\uDC00-\uDFFF]$/.test(t)&&/^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(t)},b.isWhitespace=function(e,t){return" "===e||"\t"===e||"\n"===e&&0<t},b.isDecimalMark=function(e,t){return"."===e&&"/"!==t&&"*"!==t&&"^"!==t},b.isDigitDot=function(e){return"0"<=e&&e<="9"||"."===e},b.isDigit=function(e){return"0"<=e&&e<="9"},b.isHexDigit=function(e){return"0"<=e&&e<="9"||"a"<=e&&e<="f"||"A"<=e&&e<="F"},b}),name$17="compile",dependencies$17=["typed","parse"],createCompile=factory(name$17,dependencies$17,e=>{var{typed:e,parse:t}=e;return e(name$17,{string:function(e){return t(e).compile()},"Array | Matrix":function(e){return deepMap(e,function(e){return t(e).compile()})}})}),name$16="evaluate",dependencies$16=["typed","parse"],createEvaluate=factory(name$16,dependencies$16,e=>{var{typed:e,parse:r}=e;return e(name$16,{string:function(e){var t=createEmptyMap();return r(e).compile().evaluate(t)},"string, Map | Object":function(e,t){return r(e).compile().evaluate(t)},"Array | Matrix":function(e){var t=createEmptyMap();return deepMap(e,function(e){return r(e).compile().evaluate(t)})},"Array | Matrix, Map | Object":function(e,t){return deepMap(e,function(e){return r(e).compile().evaluate(t)})}})}),name$15="Parser",dependencies$15=["evaluate"],createParserClass=factory(name$15,dependencies$15,e=>{var t=e["evaluate"];function r(){if(!(this instanceof r))throw new SyntaxError("Constructor must be called with the new operator");Object.defineProperty(this,"scope",{value:createEmptyMap(),writable:!1})}return r.prototype.type="Parser",r.prototype.isParser=!0,r.prototype.evaluate=function(e){return t(e,this.scope)},r.prototype.get=function(e){if(this.scope.has(e))return this.scope.get(e)},r.prototype.getAll=function(){return toObject(this.scope)},r.prototype.getAllAsMap=function(){return this.scope},r.prototype.set=function(e,t){return this.scope.set(e,t),t},r.prototype.remove=function(e){this.scope.delete(e)},r.prototype.clear=function(){this.scope.clear()},r},{isClass:!0}),name$14="parser",dependencies$14=["typed","Parser"],createParser=factory(name$14,dependencies$14,e=>{var{typed:e,Parser:t}=e;return e(name$14,{"":function(){return new t}})}),name$13="lup",dependencies$13=["typed","matrix","abs","addScalar","divideScalar","multiplyScalar","subtract","larger","equalScalar","unaryMinus","DenseMatrix","SparseMatrix","Spa"],createLup=factory(name$13,dependencies$13,e=>{var{typed:e,matrix:t,abs:E,addScalar:w,divideScalar:A,multiplyScalar:O,subtract:N,larger:C,equalScalar:T,unaryMinus:D,DenseMatrix:M,SparseMatrix:_,Spa:I}=e;return e(name$13,{DenseMatrix:r,SparseMatrix:function(e){var c,l,p,m=e._size[0],t=e._size[1],r=Math.min(m,t),f=e._values,d=e._index,h=e._ptr,y=[],g=[],x=[],v=[m,r],b=[],w=[],N=[],M=[r,t],S=[],$=[];for(c=0;c<m;c++)S[c]=c,$[c]=c;function n(){var i=new I;l<m&&(x.push(y.length),y.push(1),g.push(l)),N.push(b.length);var e=h[l],t=h[l+1];for(p=e;p<t;p++)c=d[p],i.set(S[c],f[p]);0<l&&i.forEach(0,l-1,function(r,n){_._forEachRow(r,y,g,x,function(e,t){r<e&&i.accumulate(e,D(O(t,n)))})});var r,n,a,o=l,s=i.get(l),u=E(s);i.forEach(l+1,m-1,function(e,t){var r=E(t);C(r,u)&&(o=e,u=r,s=t)}),l!==o&&(_._swapRows(l,o,v[1],y,g,x),_._swapRows(l,o,M[1],b,w,N),i.swap(l,o),n=o,a=$[r=l],e=$[n],S[a]=n,S[e]=r,$[r]=e,$[n]=a),i.forEach(0,m-1,function(e,t){e<=l?(b.push(t),w.push(e)):(t=A(t,s),T(t,0)||(y.push(t),g.push(e)))})}for(l=0;l<t;l++)n();return N.push(b.length),x.push(y.length),{L:new _({values:y,index:g,ptr:x,size:v}),U:new _({values:b,index:w,ptr:N,size:M}),p:S,toString:function(){return"L: "+this.L.toString()+"\nU: "+this.U.toString()+"\nP: "+this.p}}},Array:function(e){e=r(t(e));return{L:e.L.valueOf(),U:e.U.valueOf(),p:e.p}}});function r(e){var t,r=e._size[0],n=e._size[1],i=Math.min(r,n),a=clone$1(e._data),o=[],s=[r,i],u=[],e=[i,n],c=[];for(y=0;y<r;y++)c[y]=y;for(t=0;t<n;t++){if(0<t)for(y=0;y<r;y++){for(var l=Math.min(y,t),p=0,m=0;m<l;m++)p=w(p,O(a[y][m],a[m][t]));a[y][t]=N(a[y][t],p)}for(var f=t,d=0,h=0,y=t;y<r;y++){var g=a[y][t],x=E(g);C(x,d)&&(f=y,d=x,h=g)}if(t!==f&&(c[t]=[c[f],c[f]=c[t]][0],M._swapRows(t,f,a)),t<r)for(y=t+1;y<r;y++){var v=a[y][t];T(v,0)||(a[y][t]=A(a[y][t],h))}}for(t=0;t<n;t++)for(y=0;y<r;y++)0===t&&(y<n&&(u[y]=[]),o[y]=[]),y<t?(y<n&&(u[y][t]=a[y][t]),t<r&&(o[y][t]=0)):y!==t?(y<n&&(u[y][t]=0),t<r&&(o[y][t]=a[y][t])):(y<n&&(u[y][t]=a[y][t]),t<r&&(o[y][t]=1));var s=new M({data:o,size:s}),e=new M({data:u,size:e}),b=[];for(y=0,i=c.length;y<i;y++)b[c[y]]=y;return{L:s,U:e,p:b,toString:function(){return"L: "+this.L.toString()+"\nU: "+this.U.toString()+"\nP: "+this.p}}}}),name$12="qr",dependencies$12=["typed","matrix","zeros","identity","isZero","equal","sign","sqrt","conj","unaryMinus","addScalar","divideScalar","multiplyScalar","subtract","complex"],createQr=factory(name$12,dependencies$12,e=>{var{typed:e,matrix:t,zeros:g,identity:x,isZero:v,equal:b,sign:w,sqrt:N,conj:M,unaryMinus:S,addScalar:$,divideScalar:E,multiplyScalar:A,subtract:O,complex:o}=e;return _extends$1(e(name$12,{DenseMatrix:r,SparseMatrix:function(e){throw new Error("qr not implemented for sparse matrices yet")},Array:function(e){e=r(t(e));return{Q:e.Q.valueOf(),R:e.R.valueOf()}}}),{_denseQRimpl:s});function s(e){for(var t=e._size[0],r=e._size[1],n=x([t],"dense"),i=n._data,e=e.clone(),a=e._data,o=g([t],""),s=0;s<Math.min(r,t);++s){var u=a[s][s],c=S(b(u,0)?1:w(u)),l=M(c),p=0;for(f=s;f<t;f++)p=$(p,A(a[f][s],M(a[f][s])));c=A(c,N(p));if(!v(c)){for(var m=O(u,c),f=s+(o[s]=1);f<t;f++)o[f]=E(a[f][s],m);for(var d=S(M(E(m,c))),h=void 0,y=s;y<r;y++){for(h=0,f=s;f<t;f++)h=$(h,A(M(o[f]),a[f][y]));for(h=A(h,d),f=s;f<t;f++)a[f][y]=A(O(a[f][y],A(o[f],h)),l)}for(f=0;f<t;f++){for(h=0,y=s;y<t;y++)h=$(h,A(i[f][y],o[y]));for(h=A(h,d),y=s;y<t;++y)i[f][y]=E(O(i[f][y],A(h,M(o[y]))),l)}}}return{Q:n,R:e,toString:function(){return"Q: "+this.Q.toString()+"\nR: "+this.R.toString()}}}function r(e){var t=s(e),r=t.R._data;if(0<e._data.length)for(var n="Complex"===r[0][0].type?o(0):0,i=0;i<r.length;++i)for(var a=0;a<i&&a<(r[0]||[]).length;++a)r[i][a]=n;return t}});function csPermute(e,t,r,n){for(var i=e._values,a=e._index,o=e._ptr,s=e._size,u=e._datatype,c=s[0],l=s[1],p=n&&e._values?[]:null,m=[],f=[],d=0,h=0;h<l;h++){f[h]=d;for(var y=r?r[h]:h,g=o[y],x=o[y+1],v=g;v<x;v++){var b=t?t[a[v]]:a[v];m[d]=b,p&&(p[d]=i[v]),d++}}return f[l]=d,e.createSparseMatrix({values:p,index:m,ptr:f,size:[c,l],datatype:u})}function csTdfs(e,t,r,n,i,a,o){var s=0;for(r[o]=e;0<=s;){var u=r[o+s],c=r[n+u];-1===c?(s--,a[t++]=u):(r[n+u]=r[i+c],r[o+ ++s]=c)}return t}function csPost(e,t){if(!e)return null;for(var r=0,n=[],i=[],a=t,o=2*t,s=0;s<t;s++)i[0+s]=-1;for(s=t-1;0<=s;s--)-1!==e[s]&&(i[a+s]=i[0+e[s]],i[0+e[s]]=s);for(s=0;s<t;s++)-1===e[s]&&(r=csTdfs(s,r,i,0,a,n,o));return n}function csEtree(e,t){if(!e)return null;var r,n=e._index,i=e._ptr,e=e._size,a=e[0],o=e[1],s=[],u=[],c=o;if(t)for(h=0;h<a;h++)u[c+h]=-1;for(var l=0;l<o;l++){s[l]=-1,u[0+l]=-1;for(var p=i[l],m=i[l+1],f=p;f<m;f++){for(var d=n[f],h=t?u[c+d]:d;-1!==h&&h<l;h=r)r=u[0+h],u[0+h]=l,-1===r&&(s[h]=l);t&&(u[c+d]=l)}}return s}function csFkeep(e,t,r){for(var n=e._values,i=e._index,a=e._ptr,o=e._size[1],s=0,u=0;u<o;u++){var c=a[u];for(a[u]=s;c<a[u+1];c++)t(i[c],u,n?n[c]:1,r)&&(i[s]=i[c],n&&(n[s]=n[c]),s++)}return a[o]=s,i.splice(s,i.length-s),n&&n.splice(s,n.length-s),s}function csFlip(e){return-e-2}var name$11="csAmd",dependencies$11=["add","multiply","transpose"],createCsAmd=factory(name$11,dependencies$11,e=>{var{add:X,multiply:Q,transpose:K}=e;return function(e,t){if(!t||e<=0||3<e)return null;var r=t._size,n=r[0],i=r[1],a=0,r=Math.max(16,10*Math.sqrt(i)),n=function(e,t,r,n,i){var a=K(t);if(1===e&&n===r)return X(t,a);if(2!==e)return Q(a,t);for(var o=a._index,s=a._ptr,u=0,c=0;c<r;c++){var l=s[c];if(s[c]=u,!(s[c+1]-l>i))for(var p=s[c+1];l<p;l++)o[u++]=o[l]}return s[r]=u,t=K(a),Q(a,t)}(e,t,n,i,r=Math.min(i-2,r));csFkeep(n,te,null);for(var o,s,u,c,l,p,m,f,d,h,y,g=n._index,x=n._ptr,v=x[i],b=[],w=[],N=i+1,M=2*(i+1),S=3*(i+1),$=4*(i+1),E=5*(i+1),A=6*(i+1),O=7*(i+1),C=b,T=function(e,t,r,n,i,a,o,s,u,c,l,p){for(var m=0;m<e;m++)r[n+m]=t[m+1]-t[m];for(var f=r[n+e]=0;f<=e;f++)r[i+f]=-1,a[f]=-1,r[o+f]=-1,r[s+f]=-1,r[u+f]=1,r[c+f]=1,r[l+f]=0,r[p+f]=r[n+f];var d=ee(0,0,r,c,e);return r[l+e]=-2,t[e]=-1,r[c+e]=0,d}(i,x,w,0,S,C,M,O,N,A,$,E),D=function(e,t,r,n,i,a,o,s,u,c,l){for(var p=0,m=0;m<e;m++){var f,d=r[n+m];0===d?(r[i+m]=-2,p++,t[m]=-1,r[a+m]=0):o<d?(r[s+m]=0,r[i+m]=-1,p++,t[m]=csFlip(e),r[s+e]++):(-1!==(f=r[u+d])&&(c[f]=m),r[l+m]=r[u+d],r[u+d]=m)}return p}(i,x,w,E,$,A,r,N,S,C,M),_=0;D<i;){for(s=-1;_<i&&-1===(s=w[S+_]);_++);-1!==w[M+s]&&(C[w[M+s]]=-1),w[S+_]=w[M+s];var I=w[$+s],R=w[N+s];D+=R;var B=0;w[N+s]=-R;for(var q,F,z=x[s],P=0===I?z:v,k=P,U=1;U<=I+1;U++){for(l=I<U?(c=z,w[0+(F=s)]-I):(c=x[F=g[z++]],w[0+F]),u=1;u<=l;u++)(L=w[N+(o=g[c++])])<=0||(B+=L,w[N+o]=-L,-1!==w[M+(g[k++]=o)]&&(C[w[M+o]]=C[o]),-1!==C[o]?w[M+C[o]]=w[M+o]:w[S+w[E+o]]=w[M+o]);F!==s&&(x[F]=csFlip(s),w[A+F]=0)}for(0!==I&&(v=k),w[E+s]=B,x[s]=P,w[0+s]=k-P,w[$+s]=-2,T=ee(T,a,w,A,i),p=P;p<k;p++)if(!((m=w[$+(o=g[p])])<=0))for(var L,j=T-(L=-w[N+o]),z=x[o],G=x[o]+m-1;z<=G;z++)w[A+(F=g[z])]>=T?w[A+F]-=L:0!==w[A+F]&&(w[A+F]=w[E+F]+j);for(p=P;p<k;p++){for(f=(G=x[o=g[p]])+w[$+o]-1,y=h=0,z=d=G;z<=f;z++)0!==w[A+(F=g[z])]&&(0<(q=w[A+F]-T)?(y+=q,h+=g[d++]=F):(x[F]=csFlip(s),w[A+F]=0));w[$+o]=d-G+1;var H=d,V=G+w[0+o];for(z=1+f;z<V;z++){var Z,W=w[N+(Z=g[z])];W<=0||(y+=W,h+=g[d++]=Z)}0===y?(x[o]=csFlip(s),B-=L=-w[N+o],R+=L,D+=L,w[N+o]=0,w[$+o]=-1):(w[E+o]=Math.min(w[E+o],y),g[d]=g[H],g[H]=g[G],g[G]=s,w[0+o]=d-G+1,w[M+o]=w[O+(h=(h<0?-h:h)%i)],C[w[O+h]=o]=h)}for(w[E+s]=B,T=ee(T+(a=Math.max(a,B)),a,w,A,i),p=P;p<k;p++)if(!(0<=w[N+(o=g[p])]))for(o=w[O+(h=C[o])],w[O+h]=-1;-1!==o&&-1!==w[M+o];o=w[M+o],T++){for(l=w[0+o],m=w[$+o],z=x[o]+1;z<=x[o]+l-1;z++)w[A+g[z]]=T;var J=o;for(Z=w[M+o];-1!==Z;){var Y=w[0+Z]===l&&w[$+Z]===m;for(z=x[Z]+1;Y&&z<=x[Z]+l-1;z++)w[A+g[z]]!==T&&(Y=0);Y?(x[Z]=csFlip(o),w[N+o]+=w[N+Z],w[N+Z]=0,w[$+Z]=-1,Z=w[M+Z],w[M+J]=Z):Z=w[M+(J=Z)]}}for(p=z=P;p<k;p++)(L=-w[N+(o=g[p])])<=0||(w[N+o]=L,y=w[E+o]+B-L,-1!==w[S+(y=Math.min(y,i-D-L))]&&(C[w[S+y]]=o),w[M+o]=w[S+y],C[o]=-1,w[S+y]=o,_=Math.min(_,y),w[E+o]=y,g[z++]=o);w[N+s]=R,0==(w[0+s]=z-P)&&(x[s]=-1,w[A+s]=0),0!==I&&(v=z)}for(o=0;o<i;o++)x[o]=csFlip(x[o]);for(Z=0;Z<=i;Z++)w[S+Z]=-1;for(Z=i;0<=Z;Z--)0<w[N+Z]||(w[M+Z]=w[S+x[Z]],w[S+x[Z]]=Z);for(F=i;0<=F;F--)w[N+F]<=0||-1!==x[F]&&(w[M+F]=w[S+x[F]],w[S+x[F]]=F);for(o=s=0;o<=i;o++)-1===x[o]&&(s=csTdfs(o,s,w,S,M,b,A));return b.splice(b.length-1,1),b};function ee(e,t,r,n,i){if(e<2||e+t<0){for(var a=0;a<i;a++)0!==r[n+a]&&(r[n+a]=1);e=2}return e}function te(e,t){return e!==t}});function csLeaf(e,t,r,n,i,a,o){var s,u,c,l=0;if(e<=t||r[n+t]<=r[i+e])return-1;r[i+e]=r[n+t];n=r[a+e];if(r[a+e]=t,-1===n)l=1,c=e;else{for(l=2,c=n;c!==r[o+c];c=r[o+c]);for(s=n;s!==c;s=u)u=r[o+s],r[o+s]=c}return{jleaf:l,q:c}}var name$10="csCounts",dependencies$10=["transpose"],createCsCounts=factory(name$10,dependencies$10,e=>{var $=e["transpose"];return function(e,t,r,n){if(!e||!t||!r)return null;for(var i,a,o,s,u,c=e._size,l=c[0],p=c[1],m=4*p+(n?p+l+1:0),f=[],d=p,h=2*p,y=3*p,g=4*p,x=5*p+1,v=0;v<m;v++)f[v]=-1;var b=[],e=$(e),w=e._index,N=e._ptr;for(v=0;v<p;v++)for(b[i=r[v]]=-1===f[y+i]?1:0;-1!==i&&-1===f[y+i];i=t[i])f[y+i]=v;if(n){for(v=0;v<p;v++)f[r[v]]=v;for(M=0;M<l;M++){for(v=p,s=N[M],u=N[M+1],o=s;o<u;o++)v=Math.min(v,f[w[o]]);f[x+M]=f[g+v],f[g+v]=M}}for(M=0;M<p;M++)f[0+M]=M;for(v=0;v<p;v++){for(-1!==t[i=r[v]]&&b[t[i]]--,a=n?f[g+v]:i;-1!==a;a=n?f[x+a]:-1)for(o=N[a];o<N[a+1];o++){var M,S=csLeaf(M=w[o],i,f,y,d,h,0);1<=S.jleaf&&b[i]++,2===S.jleaf&&b[S.q]--}-1!==t[i]&&(f[0+i]=t[i])}for(i=0;i<p;i++)-1!==t[i]&&(b[t[i]]+=b[i]);return b}}),name$$="csSqr",dependencies$$=["add","multiply","transpose"],createCsSqr=factory(name$$,dependencies$$,e=>{var{add:t,multiply:r,transpose:e}=e,s=createCsAmd({add:t,multiply:r,transpose:e}),u=createCsCounts({transpose:e});return function(e,t,r){var n,i=t._ptr,a=t._size[1],o={};if(o.q=s(e,t),e&&!o.q)return null;if(r){e=e?csPermute(t,null,o.q,0):t;o.parent=csEtree(e,1);t=csPost(o.parent,a);if(o.cp=u(e,o.parent,t,1),e&&o.parent&&o.cp&&function(e,t){var r=e._ptr,n=e._index,e=e._size,i=e[0],a=e[1];t.pinv=[],t.leftmost=[];var o,s,u,c,l,p=t.parent,m=t.pinv,f=t.leftmost,d=[],h=i,y=i+a,g=i+2*a;for(s=0;s<a;s++)d[h+s]=-1,d[y+s]=-1,d[g+s]=0;for(o=0;o<i;o++)f[o]=-1;for(s=a-1;0<=s;s--)for(c=r[s],l=r[s+1],u=c;u<l;u++)f[n[u]]=s;for(o=i-1;0<=o;o--)(m[o]=-1)!==(s=f[o])&&(0==d[g+s]++&&(d[y+s]=o),d[0+o]=d[h+s],d[h+s]=o);for(t.lnz=0,t.m2=i,s=0;s<a;s++){var x;o=d[h+s],t.lnz++,o<0&&(o=t.m2++),m[o]=s,--g[s]<=0||(t.lnz+=d[g+s],-1!==(x=p[s])&&(0===d[g+x]&&(d[y+x]=d[y+s]),d[0+d[y+s]]=d[h+x],d[h+x]=d[0+o],d[g+x]+=d[g+s]))}for(o=0;o<i;o++)m[o]<0&&(m[o]=s++);return!0}(e,o))for(n=o.unz=0;n<a;n++)o.unz+=o.cp[n]}else o.unz=4*i[a]+a,o.lnz=o.unz;return o}});function csMarked(e,t){return e[t]<0}function csMark(e,t){e[t]=csFlip(e[t])}function csUnflip(e){return e<0?csFlip(e):e}function csDfs(e,t,r,n,i){var a,o=t._index,s=t._ptr,u=t._size[1],c=0;for(n[0]=e;0<=c;){e=n[c];var l=i?i[e]:e;csMarked(s,e)||(csMark(s,e),n[u+c]=l<0?0:csUnflip(s[l]));for(var p=1,m=n[u+c],f=l<0?0:csUnflip(s[l+1]);m<f;m++)if(!csMarked(s,a=o[m])){n[u+c]=m,n[++c]=a,p=0;break}p&&(c--,n[--r]=e)}return r}function csReach(e,t,r,n,i){for(var a=e._ptr,o=e._size,s=t._index,t=t._ptr,u=o[1],c=u,o=t[r],l=t[r+1],p=o;p<l;p++){var m=s[p];csMarked(a,m)||(c=csDfs(m,e,c,n,i))}for(p=c;p<u;p++)csMark(a,n[p]);return c}var name$_="csSpsolve",dependencies$_=["divideScalar","multiply","subtract"],createCsSpsolve=factory(name$_,dependencies$_,e=>{var{divideScalar:N,multiply:M,subtract:S}=e;return function(e,t,r,n,i,a,o){for(var s,u,c,l=e._values,p=e._index,m=e._ptr,f=e._size[1],d=t._values,h=t._index,y=t._ptr,t=csReach(e,t,r,n,a),g=t;g<f;g++)i[n[g]]=0;for(s=y[r],u=y[r+1],g=s;g<u;g++)i[h[g]]=d[g];for(var x=t;x<f;x++){var v=n[x],b=a?a[v]:v;if(!(b<0))for(s=m[b],u=m[b+1],i[v]=N(i[v],l[o?s:u-1]),g=o?s+1:s,c=o?u:u-1;g<c;g++){var w=p[g];i[w]=S(i[w],M(l[g],i[v]))}}return t}}),name$Z="csLu",dependencies$Z=["abs","divideScalar","multiply","subtract","larger","largerEq","SparseMatrix"],createCsLu=factory(name$Z,dependencies$Z,e=>{var{abs:E,divideScalar:A,multiply:O,subtract:e,larger:C,largerEq:T,SparseMatrix:D}=e,_=createCsSpsolve({divideScalar:A,multiply:O,subtract:e});return function(e,t,r){if(!e)return null;var n,i=e._size[1],a=100,o=100;t&&(n=t.q,a=t.lnz||a,o=t.unz||o);var s=[],u=[],c=[],l=new D({values:s,index:u,ptr:c,size:[i,i]}),p=[],m=[],f=[],t=new D({values:p,index:m,ptr:f,size:[i,i]}),d=[],h=[],y=[];for(v=0;v<i;v++)h[v]=0,d[v]=-1,c[v+1]=0;for(var a=0,o=0,g=0;g<i;g++){c[g]=a,f[g]=o;for(var x,v,b=n?n[g]:g,w=_(l,e,b,y,h,d,1),N=-1,M=-1,S=w;S<i;S++)d[v=y[S]]<0?(x=E(h[v]),C(x,M)&&(M=x,N=v)):(m[o]=d[v],p[o++]=h[v]);if(-1===N||M<=0)return null;var $=h[N=d[b]<0&&T(E(h[b]),O(M,r))?b:N];for(m[o]=g,p[o++]=$,d[N]=g,u[a]=N,s[a++]=1,S=w;S<i;S++)d[v=y[S]]<0&&(u[a]=v,s[a++]=A(h[v],$)),h[v]=0}for(c[i]=a,f[i]=o,S=0;S<a;S++)u[S]=d[u[S]];return s.splice(a,s.length-a),u.splice(a,u.length-a),p.splice(o,p.length-o),m.splice(o,m.length-o),{L:l,U:t,pinv:d}}}),name$Y="slu",dependencies$Y=["typed","abs","add","multiply","transpose","divideScalar","subtract","larger","largerEq","SparseMatrix"],createSlu=factory(name$Y,dependencies$Y,e=>{var{typed:t,abs:r,add:n,multiply:i,transpose:a,divideScalar:o,subtract:s,larger:u,largerEq:c,SparseMatrix:e}=e,l=createCsSqr({add:n,multiply:i,transpose:a}),p=createCsLu({abs:r,divideScalar:o,multiply:i,subtract:s,larger:u,largerEq:c,SparseMatrix:e});return t(name$Y,{"SparseMatrix, number, number":function(e,t,r){if(!isInteger$1(t)||t<0||3<t)throw new Error("Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]");if(r<0||1<r)throw new Error("Partial pivoting threshold must be a number from 0 to 1");t=l(t,e,!1),r=p(e,t,r);return{L:r.L,U:r.U,p:r.pinv,q:t.q,toString:function(){return"L: "+this.L.toString()+"\nU: "+this.U.toString()+"\np: "+this.p.toString()+(this.q?"\nq: "+this.q.toString():"")+"\n"}}}})});function csIpvec(e,t){var r,n=t.length,i=[];if(e)for(r=0;r<n;r++)i[e[r]]=t[r];else for(r=0;r<n;r++)i[r]=t[r];return i}var name$X="lusolve",dependencies$X=["typed","matrix","lup","slu","usolve","lsolve","DenseMatrix"],createLusolve=factory(name$X,dependencies$X,e=>{var{typed:t,matrix:r,lup:n,slu:i,usolve:a,lsolve:o,DenseMatrix:e}=e,s=createSolveValidation({DenseMatrix:e});return t(name$X,{"Array, Array | Matrix":function(e,t){e=r(e);e=n(e);return c(e.L,e.U,e.p,null,t).valueOf()},"DenseMatrix, Array | Matrix":function(e,t){e=n(e);return c(e.L,e.U,e.p,null,t)},"SparseMatrix, Array | Matrix":function(e,t){e=n(e);return c(e.L,e.U,e.p,null,t)},"SparseMatrix, Array | Matrix, number, number":function(e,t,r,n){n=i(e,r,n);return c(n.L,n.U,n.p,n.q,t)},"Object, Array | Matrix":function(e,t){return c(e.L,e.U,e.p,e.q,t)}});function u(e){if(isMatrix(e))return e;if(isArray(e))return r(e);throw new TypeError("Invalid Matrix LU decomposition")}function c(e,t,r,n,i){e=u(e),t=u(t),r&&((i=s(e,i,!0))._data=csIpvec(r,i._data));i=o(e,i),i=a(t,i);return n&&(i._data=csIpvec(n,i._data)),i}}),name$W="Help",dependencies$W=["parse"],createHelpClass=factory(name$W,dependencies$W,e=>{var o=e["parse"];function n(e){if(!(this instanceof n))throw new SyntaxError("Constructor must be called with the new operator");if(!e)throw new Error('Argument "doc" missing');this.doc=e}return n.prototype.type="Help",n.prototype.isHelp=!0,n.prototype.toString=function(){var e=this.doc||{},t="\n";if(e.name&&(t+="Name: "+e.name+"\n\n"),e.category&&(t+="Category: "+e.category+"\n\n"),e.description&&(t+="Description:\n    "+e.description+"\n\n"),e.syntax&&(t+="Syntax:\n    "+e.syntax.join("\n    ")+"\n\n"),e.examples){t+="Examples:\n";for(var r={},n=0;n<e.examples.length;n++){var i=e.examples[n];t+="    "+i+"\n";var a=void 0;try{a=o(i).compile().evaluate(r)}catch(e){a=e}void 0===a||isHelp(a)||(t+="        "+format$1(a,{precision:14})+"\n")}t+="\n"}return e.seealso&&e.seealso.length&&(t+="See also: "+e.seealso.join(", ")+"\n"),t},n.prototype.toJSON=function(){var e=clone$1(this.doc);return e.mathjs="Help",e},n.fromJSON=function(t){var r={};return Object.keys(t).filter(e=>"mathjs"!==e).forEach(e=>{r[e]=t[e]}),new n(r)},n.prototype.valueOf=n.prototype.toString,n},{isClass:!0}),name$V="Chain",dependencies$V=["?on","math"],createChainClass=factory(name$V,dependencies$V,e=>{var{on:t,math:e}=e;function i(e){if(!(this instanceof i))throw new SyntaxError("Constructor must be called with the new operator");isChain(e)?this.value=e.value:this.value=e}function a(e,t){lazy(i.prototype,e,function(){var e=t();if("function"==typeof e)return o(e)})}function o(r){return function(){for(var e=[this.value],t=0;t<arguments.length;t++)e[t+1]=arguments[t];return new i(r.apply(r,e))}}i.prototype.type="Chain",i.prototype.isChain=!0,i.prototype.done=function(){return this.value},i.prototype.valueOf=function(){return this.value},i.prototype.toString=function(){return format$1(this.value)},i.prototype.toJSON=function(){return{mathjs:"Chain",value:this.value}},i.fromJSON=function(e){return new i(e.value)},i.createProxy=function(t,e){if("string"==typeof t)n=t,"function"==typeof(e=e)&&(i.prototype[n]=o(e));else for(var r in t)!function(e){hasOwnProperty$1(t,e)&&void 0===s[e]&&a(e,()=>t[e])}(r);var n};var s={expression:!0,docs:!0,type:!0,classes:!0,json:!0,error:!0,isChain:!0};return i.createProxy(e),t&&t("import",function(e,t,r){r||a(e,t)}),i},{isClass:!0}),bignumberDocs={name:"bignumber",category:"Construction",syntax:["bignumber(x)"],description:"Create a big number from a number or string.",examples:["0.1 + 0.2","bignumber(0.1) + bignumber(0.2)",'bignumber("7.2")','bignumber("7.2e500")',"bignumber([0.1, 0.2, 0.3])"],seealso:["boolean","complex","fraction","index","matrix","string","unit"]},typeOfDocs={name:"typeOf",category:"Utils",syntax:["typeOf(x)"],description:"Get the type of a variable.",examples:["typeOf(3.5)","typeOf(2 - 4i)","typeOf(45 deg)",'typeOf("hello world")'],seealso:["getMatrixDataType"]},isZeroDocs={name:"isZero",category:"Utils",syntax:["isZero(x)"],description:"Test whether a value is zero.",examples:["isZero(2)","isZero(0)","isZero(-4)","isZero([3, 0, -2, 0])"],seealso:["isInteger","isNumeric","isNegative","isPositive"]},isPrimeDocs={name:"isPrime",category:"Utils",syntax:["isPrime(x)"],description:"Test whether a value is prime: has no divisors other than itself and one.",examples:["isPrime(3)","isPrime(-2)","isPrime([2, 17, 100])"],seealso:["isInteger","isNumeric","isNegative","isZero"]},isPositiveDocs={name:"isPositive",category:"Utils",syntax:["isPositive(x)"],description:"Test whether a value is positive: larger than zero.",examples:["isPositive(2)","isPositive(0)","isPositive(-4)","isPositive([3, 0.5, -2])"],seealso:["isInteger","isNumeric","isNegative","isZero"]},isNumericDocs={name:"isNumeric",category:"Utils",syntax:["isNumeric(x)"],description:"Test whether a value is a numeric value. Returns true when the input is a number, BigNumber, Fraction, or boolean.",examples:["isNumeric(2)",'isNumeric("2")','hasNumericValue("2")',"isNumeric(0)","isNumeric(bignumber(500))","isNumeric(fraction(0.125))","isNumeric(2 + 3i)",'isNumeric([2.3, "foo", false])'],seealso:["isInteger","isZero","isNegative","isPositive","isNaN","hasNumericValue"]},hasNumericValueDocs={name:"hasNumericValue",category:"Utils",syntax:["hasNumericValue(x)"],description:"Test whether a value is an numeric value. In case of a string, true is returned if the string contains a numeric value.",examples:["hasNumericValue(2)",'hasNumericValue("2")','isNumeric("2")',"hasNumericValue(0)","hasNumericValue(bignumber(500))","hasNumericValue(fraction(0.125))","hasNumericValue(2 + 3i)",'hasNumericValue([2.3, "foo", false])'],seealso:["isInteger","isZero","isNegative","isPositive","isNaN","isNumeric"]},isNegativeDocs={name:"isNegative",category:"Utils",syntax:["isNegative(x)"],description:"Test whether a value is negative: smaller than zero.",examples:["isNegative(2)","isNegative(0)","isNegative(-4)","isNegative([3, 0.5, -2])"],seealso:["isInteger","isNumeric","isPositive","isZero"]},isIntegerDocs={name:"isInteger",category:"Utils",syntax:["isInteger(x)"],description:"Test whether a value is an integer number.",examples:["isInteger(2)","isInteger(3.5)","isInteger([3, 0.5, -2])"],seealso:["isNegative","isNumeric","isPositive","isZero"]},isNaNDocs={name:"isNaN",category:"Utils",syntax:["isNaN(x)"],description:"Test whether a value is NaN (not a number)",examples:["isNaN(2)","isNaN(0 / 0)","isNaN(NaN)","isNaN(Infinity)"],seealso:["isNegative","isNumeric","isPositive","isZero"]},formatDocs={name:"format",category:"Utils",syntax:["format(value)","format(value, precision)"],description:"Format a value of any type as string.",examples:["format(2.3)","format(3 - 4i)","format([])","format(pi, 3)"],seealso:["print"]},binDocs={name:"bin",category:"Utils",syntax:["bin(value)"],description:"Format a number as binary",examples:["bin(2)"],seealso:["oct","hex"]},octDocs={name:"oct",category:"Utils",syntax:["oct(value)"],description:"Format a number as octal",examples:["oct(56)"],seealso:["bin","hex"]},hexDocs={name:"hex",category:"Utils",syntax:["hex(value)"],description:"Format a number as hexadecimal",examples:["hex(240)"],seealso:["bin","oct"]},cloneDocs={name:"clone",category:"Utils",syntax:["clone(x)"],description:"Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices",examples:["clone(3.5)","clone(2 - 4i)","clone(45 deg)","clone([1, 2; 3, 4])",'clone("hello world")'],seealso:[]},toDocs={name:"to",category:"Units",syntax:["x to unit","to(x, unit)"],description:"Change the unit of a value.",examples:["5 inch to cm","3.2kg to g","16 bytes in bits"],seealso:[]},tanhDocs={name:"tanh",category:"Trigonometry",syntax:["tanh(x)"],description:"Compute the hyperbolic tangent of x in radians.",examples:["tanh(0.5)","sinh(0.5) / cosh(0.5)"],seealso:["sinh","cosh"]},tanDocs={name:"tan",category:"Trigonometry",syntax:["tan(x)"],description:"Compute the tangent of x in radians.",examples:["tan(0.5)","sin(0.5) / cos(0.5)","tan(pi / 4)","tan(45 deg)"],seealso:["atan","sin","cos"]},sinhDocs={name:"sinh",category:"Trigonometry",syntax:["sinh(x)"],description:"Compute the hyperbolic sine of x in radians.",examples:["sinh(0.5)"],seealso:["cosh","tanh"]},sechDocs={name:"sech",category:"Trigonometry",syntax:["sech(x)"],description:"Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)",examples:["sech(2)","1 / cosh(2)"],seealso:["coth","csch","cosh"]},secDocs={name:"sec",category:"Trigonometry",syntax:["sec(x)"],description:"Compute the secant of x in radians. Defined as 1/cos(x)",examples:["sec(2)","1 / cos(2)"],seealso:["cot","csc","cos"]},cschDocs={name:"csch",category:"Trigonometry",syntax:["csch(x)"],description:"Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)",examples:["csch(2)","1 / sinh(2)"],seealso:["sech","coth","sinh"]},cscDocs={name:"csc",category:"Trigonometry",syntax:["csc(x)"],description:"Compute the cosecant of x in radians. Defined as 1/sin(x)",examples:["csc(2)","1 / sin(2)"],seealso:["sec","cot","sin"]},cothDocs={name:"coth",category:"Trigonometry",syntax:["coth(x)"],description:"Compute the hyperbolic cotangent of x in radians.",examples:["coth(2)","1 / tanh(2)"],seealso:["sech","csch","tanh"]},cotDocs={name:"cot",category:"Trigonometry",syntax:["cot(x)"],description:"Compute the cotangent of x in radians. Defined as 1/tan(x)",examples:["cot(2)","1 / tan(2)"],seealso:["sec","csc","tan"]},coshDocs={name:"cosh",category:"Trigonometry",syntax:["cosh(x)"],description:"Compute the hyperbolic cosine of x in radians.",examples:["cosh(0.5)"],seealso:["sinh","tanh","coth"]},cosDocs={name:"cos",category:"Trigonometry",syntax:["cos(x)"],description:"Compute the cosine of x in radians.",examples:["cos(2)","cos(pi / 4) ^ 2","cos(180 deg)","cos(60 deg)","sin(0.2)^2 + cos(0.2)^2"],seealso:["acos","sin","tan"]},atan2Docs={name:"atan2",category:"Trigonometry",syntax:["atan2(y, x)"],description:"Computes the principal value of the arc tangent of y/x in radians.",examples:["atan2(2, 2) / pi","angle = 60 deg in rad","x = cos(angle)","y = sin(angle)","atan2(y, x)"],seealso:["sin","cos","tan"]},atanhDocs={name:"atanh",category:"Trigonometry",syntax:["atanh(x)"],description:"Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.",examples:["atanh(0.5)"],seealso:["acosh","asinh"]},atanDocs={name:"atan",category:"Trigonometry",syntax:["atan(x)"],description:"Compute the inverse tangent of a value in radians.",examples:["atan(0.5)","atan(tan(0.5))"],seealso:["tan","acos","asin"]},asinhDocs={name:"asinh",category:"Trigonometry",syntax:["asinh(x)"],description:"Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.",examples:["asinh(0.5)"],seealso:["acosh","atanh"]},asinDocs={name:"asin",category:"Trigonometry",syntax:["asin(x)"],description:"Compute the inverse sine of a value in radians.",examples:["asin(0.5)","asin(sin(0.5))"],seealso:["sin","acos","atan"]},asechDocs={name:"asech",category:"Trigonometry",syntax:["asech(x)"],description:"Calculate the inverse secant of a value.",examples:["asech(0.5)"],seealso:["acsch","acoth"]},asecDocs={name:"asec",category:"Trigonometry",syntax:["asec(x)"],description:"Calculate the inverse secant of a value.",examples:["asec(0.5)","asec(sec(0.5))","asec(2)"],seealso:["acos","acot","acsc"]},acschDocs={name:"acsch",category:"Trigonometry",syntax:["acsch(x)"],description:"Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.",examples:["acsch(0.5)"],seealso:["asech","acoth"]},acscDocs={name:"acsc",category:"Trigonometry",syntax:["acsc(x)"],description:"Calculate the inverse cotangent of a value.",examples:["acsc(2)","acsc(csc(0.5))","acsc(0.5)"],seealso:["csc","asin","asec"]},acothDocs={name:"acoth",category:"Trigonometry",syntax:["acoth(x)"],description:"Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.",examples:["acoth(2)","acoth(0.5)"],seealso:["acsch","asech"]},acotDocs={name:"acot",category:"Trigonometry",syntax:["acot(x)"],description:"Calculate the inverse cotangent of a value.",examples:["acot(0.5)","acot(cot(0.5))","acot(2)"],seealso:["cot","atan"]},acoshDocs={name:"acosh",category:"Trigonometry",syntax:["acosh(x)"],description:"Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.",examples:["acosh(1.5)"],seealso:["cosh","asinh","atanh"]},acosDocs={name:"acos",category:"Trigonometry",syntax:["acos(x)"],description:"Compute the inverse cosine of a value in radians.",examples:["acos(0.5)","acos(cos(2.3))"],seealso:["cos","atan","asin"]},sumDocs={name:"sum",category:"Statistics",syntax:["sum(a, b, c, ...)","sum(A)"],description:"Compute the sum of all values.",examples:["sum(2, 3, 4, 1)","sum([2, 3, 4, 1])","sum([2, 5; 4, 3])"],seealso:["max","mean","median","min","prod","std","sum","variance"]},stdDocs={name:"std",category:"Statistics",syntax:["std(a, b, c, ...)","std(A)","std(A, normalization)"],description:'Compute the standard deviation of all values, defined as std(A) = sqrt(variance(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',examples:["std(2, 4, 6)","std([2, 4, 6, 8])",'std([2, 4, 6, 8], "uncorrected")','std([2, 4, 6, 8], "biased")',"std([1, 2, 3; 4, 5, 6])"],seealso:["max","mean","min","median","prod","sum","variance"]},quantileSeqDocs={name:"quantileSeq",category:"Statistics",syntax:["quantileSeq(A, prob[, sorted])","quantileSeq(A, [prob1, prob2, ...][, sorted])","quantileSeq(A, N[, sorted])"],description:"Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.",examples:["quantileSeq([3, -1, 5, 7], 0.5)","quantileSeq([3, -1, 5, 7], [1/3, 2/3])","quantileSeq([3, -1, 5, 7], 2)","quantileSeq([-1, 3, 5, 7], 0.5, true)"],seealso:["mean","median","min","max","prod","std","sum","variance"]},prodDocs={name:"prod",category:"Statistics",syntax:["prod(a, b, c, ...)","prod(A)"],description:"Compute the product of all values.",examples:["prod(2, 3, 4)","prod([2, 3, 4])","prod([2, 5; 4, 3])"],seealso:["max","mean","min","median","min","std","sum","variance"]},modeDocs={name:"mode",category:"Statistics",syntax:["mode(a, b, c, ...)","mode(A)","mode(A, a, b, B, c, ...)"],description:"Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.",examples:["mode(2, 1, 4, 3, 1)","mode([1, 2.7, 3.2, 4, 2.7])","mode(1, 4, 6, 1, 6)"],seealso:["max","mean","min","median","prod","std","sum","variance"]},minDocs={name:"min",category:"Statistics",syntax:["min(a, b, c, ...)","min(A)","min(A, dim)"],description:"Compute the minimum value of a list of values.",examples:["min(2, 3, 4, 1)","min([2, 3, 4, 1])","min([2, 5; 4, 3])","min([2, 5; 4, 3], 1)","min([2, 5; 4, 3], 2)","min(2.7, 7.1, -4.5, 2.0, 4.1)","max(2.7, 7.1, -4.5, 2.0, 4.1)"],seealso:["max","mean","median","prod","std","sum","variance"]},medianDocs={name:"median",category:"Statistics",syntax:["median(a, b, c, ...)","median(A)"],description:"Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.",examples:["median(5, 2, 7)","median([3, -1, 5, 7])"],seealso:["max","mean","min","prod","std","sum","variance","quantileSeq"]},meanDocs={name:"mean",category:"Statistics",syntax:["mean(a, b, c, ...)","mean(A)","mean(A, dim)"],description:"Compute the arithmetic mean of a list of values.",examples:["mean(2, 3, 4, 1)","mean([2, 3, 4, 1])","mean([2, 5; 4, 3])","mean([2, 5; 4, 3], 1)","mean([2, 5; 4, 3], 2)","mean([1.0, 2.7, 3.2, 4.0])"],seealso:["max","median","min","prod","std","sum","variance"]},maxDocs={name:"max",category:"Statistics",syntax:["max(a, b, c, ...)","max(A)","max(A, dim)"],description:"Compute the maximum value of a list of values.",examples:["max(2, 3, 4, 1)","max([2, 3, 4, 1])","max([2, 5; 4, 3])","max([2, 5; 4, 3], 1)","max([2, 5; 4, 3], 2)","max(2.7, 7.1, -4.5, 2.0, 4.1)","min(2.7, 7.1, -4.5, 2.0, 4.1)"],seealso:["mean","median","min","prod","std","sum","variance"]},madDocs={name:"mad",category:"Statistics",syntax:["mad(a, b, c, ...)","mad(A)"],description:"Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.",examples:["mad(10, 20, 30)","mad([1, 2, 3])"],seealso:["mean","median","std","abs"]},erfDocs={name:"erf",category:"Special",syntax:["erf(x)"],description:"Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x",examples:["erf(0.2)","erf(-0.5)","erf(4)"],seealso:[]},setUnionDocs={name:"setUnion",category:"Set",syntax:["setUnion(set1, set2)"],description:"Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setUnion([1, 2, 3, 4], [3, 4, 5, 6])","setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],seealso:["setIntersect","setDifference"]},setSymDifferenceDocs={name:"setSymDifference",category:"Set",syntax:["setSymDifference(set1, set2)"],description:"Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])","setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],seealso:["setUnion","setIntersect","setDifference"]},setSizeDocs={name:"setSize",category:"Set",syntax:["setSize(set)","setSize(set, unique)"],description:'Count the number of elements of a (multi)set. When the second parameter "unique" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',examples:["setSize([1, 2, 2, 4])","setSize([1, 2, 2, 4], true)"],seealso:["setUnion","setIntersect","setDifference"]},setPowersetDocs={name:"setPowerset",category:"Set",syntax:["setPowerset(set)"],description:"Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.",examples:["setPowerset([1, 2, 3])"],seealso:["setCartesian"]},setMultiplicityDocs={name:"setMultiplicity",category:"Set",syntax:["setMultiplicity(element, set)"],description:"Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.",examples:["setMultiplicity(1, [1, 2, 2, 4])","setMultiplicity(2, [1, 2, 2, 4])"],seealso:["setDistinct","setSize"]},setIsSubsetDocs={name:"setIsSubset",category:"Set",syntax:["setIsSubset(set1, set2)"],description:"Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setIsSubset([1, 2], [3, 4, 5, 6])","setIsSubset([3, 4], [3, 4, 5, 6])"],seealso:["setUnion","setIntersect","setDifference"]},setIntersectDocs={name:"setIntersect",category:"Set",syntax:["setIntersect(set1, set2)"],description:"Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setIntersect([1, 2, 3, 4], [3, 4, 5, 6])","setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],seealso:["setUnion","setDifference"]},setDistinctDocs={name:"setDistinct",category:"Set",syntax:["setDistinct(set)"],description:"Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.",examples:["setDistinct([1, 1, 1, 2, 2, 3])"],seealso:["setMultiplicity"]},setDifferenceDocs={name:"setDifference",category:"Set",syntax:["setDifference(set1, set2)"],description:"Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setDifference([1, 2, 3, 4], [3, 4, 5, 6])","setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],seealso:["setUnion","setIntersect","setSymDifference"]},setCartesianDocs={name:"setCartesian",category:"Set",syntax:["setCartesian(set1, set2)"],description:"Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays and the values will be sorted in ascending order before the operation.",examples:["setCartesian([1, 2], [3, 4])"],seealso:["setUnion","setIntersect","setDifference","setPowerset"]},unequalDocs={name:"unequal",category:"Relational",syntax:["x != y","unequal(x, y)"],description:"Check unequality of two values. Returns true if the values are unequal, and false if they are equal.",examples:["2+2 != 3","2+2 != 4","a = 3.2","b = 6-2.8","a != b","50cm != 0.5m","5 cm != 2 inch"],seealso:["equal","smaller","larger","smallerEq","largerEq","compare","deepEqual"]},smallerEqDocs={name:"smallerEq",category:"Relational",syntax:["x <= y","smallerEq(x, y)"],description:"Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.",examples:["2 <= 1+1","2 < 1+1","a = 3.2","b = 6-2.8","(a <= b)"],seealso:["equal","unequal","larger","smaller","largerEq","compare"]},smallerDocs={name:"smaller",category:"Relational",syntax:["x < y","smaller(x, y)"],description:"Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.",examples:["2 < 3","5 < 2*2","a = 3.3","b = 6-2.8","(a < b)","5 cm < 2 inch"],seealso:["equal","unequal","larger","smallerEq","largerEq","compare"]},largerEqDocs={name:"largerEq",category:"Relational",syntax:["x >= y","largerEq(x, y)"],description:"Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.",examples:["2 >= 1+1","2 > 1+1","a = 3.2","b = 6-2.8","(a >= b)"],seealso:["equal","unequal","smallerEq","smaller","compare"]},largerDocs={name:"larger",category:"Relational",syntax:["x > y","larger(x, y)"],description:"Check if value x is larger than y. Returns true if x is larger than y, and false if not.",examples:["2 > 3","5 > 2*2","a = 3.3","b = 6-2.8","(a > b)","(b < a)","5 cm > 2 inch"],seealso:["equal","unequal","smaller","smallerEq","largerEq","compare"]},equalTextDocs={name:"equalText",category:"Relational",syntax:["equalText(x, y)"],description:"Check equality of two strings. Comparison is case sensitive. Returns true if the values are equal, and false if not.",examples:['equalText("Hello", "Hello")','equalText("a", "A")','equal("2e3", "2000")','equalText("2e3", "2000")','equalText("B", ["A", "B", "C"])'],seealso:["compare","compareNatural","compareText","equal"]},equalDocs={name:"equal",category:"Relational",syntax:["x == y","equal(x, y)"],description:"Check equality of two values. Returns true if the values are equal, and false if not.",examples:["2+2 == 3","2+2 == 4","a = 3.2","b = 6-2.8","a == b","50cm == 0.5m"],seealso:["unequal","smaller","larger","smallerEq","largerEq","compare","deepEqual","equalText"]},deepEqualDocs={name:"deepEqual",category:"Relational",syntax:["deepEqual(x, y)"],description:"Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.",examples:["deepEqual([1,3,4], [1,3,4])","deepEqual([1,3,4], [1,3])"],seealso:["equal","unequal","smaller","larger","smallerEq","largerEq","compare"]},compareTextDocs={name:"compareText",category:"Relational",syntax:["compareText(x, y)"],description:"Compare two strings lexically. Comparison is case sensitive. Returns 1 when x > y, -1 when x < y, and 0 when x == y.",examples:['compareText("B", "A")','compareText("A", "B")','compareText("A", "A")','compareText("2", "10")','compare("2", "10")',"compare(2, 10)",'compareNatural("2", "10")','compareText("B", ["A", "B", "C"])'],seealso:["compare","compareNatural"]},compareNaturalDocs={name:"compareNatural",category:"Relational",syntax:["compareNatural(x, y)"],description:"Compare two values of any type in a deterministic, natural way. Returns 1 when x > y, -1 when x < y, and 0 when x == y.",examples:["compareNatural(2, 3)","compareNatural(3, 2)","compareNatural(2, 2)","compareNatural(5cm, 40mm)",'compareNatural("2", "10")',"compareNatural(2 + 3i, 2 + 4i)","compareNatural([1, 2, 4], [1, 2, 3])","compareNatural([1, 5], [1, 2, 3])","compareNatural([1, 2], [1, 2])","compareNatural({a: 2}, {a: 4})"],seealso:["equal","unequal","smaller","smallerEq","largerEq","compare","compareText"]},compareDocs={name:"compare",category:"Relational",syntax:["compare(x, y)"],description:"Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.",examples:["compare(2, 3)","compare(3, 2)","compare(2, 2)","compare(5cm, 40mm)","compare(2, [1, 2, 3])"],seealso:["equal","unequal","smaller","smallerEq","largerEq","compareNatural","compareText"]},randomIntDocs={name:"randomInt",category:"Probability",syntax:["randomInt(max)","randomInt(min, max)","randomInt(size)","randomInt(size, max)","randomInt(size, min, max)"],description:"Return a random integer number",examples:["randomInt(10, 20)","randomInt([2, 3], 10)"],seealso:["pickRandom","random"]},randomDocs={name:"random",category:"Probability",syntax:["random()","random(max)","random(min, max)","random(size)","random(size, max)","random(size, min, max)"],description:"Return a random number.",examples:["random()","random(10, 20)","random([2, 3])"],seealso:["pickRandom","randomInt"]},pickRandomDocs={name:"pickRandom",category:"Probability",syntax:["pickRandom(array)","pickRandom(array, number)","pickRandom(array, weights)","pickRandom(array, number, weights)","pickRandom(array, weights, number)"],description:"Pick a random entry from a given array.",examples:["pickRandom(0:10)","pickRandom([1, 3, 1, 6])","pickRandom([1, 3, 1, 6], 2)","pickRandom([1, 3, 1, 6], [2, 3, 2, 1])","pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])","pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)"],seealso:["random","randomInt"]},permutationsDocs={name:"permutations",category:"Probability",syntax:["permutations(n)","permutations(n, k)"],description:"Compute the number of permutations of n items taken k at a time",examples:["permutations(5)","permutations(5, 3)"],seealso:["combinations","combinationsWithRep","factorial"]},multinomialDocs={name:"multinomial",category:"Probability",syntax:["multinomial(A)"],description:"Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.",examples:["multinomial([1, 2, 1])"],seealso:["combinations","factorial"]},kldivergenceDocs={name:"kldivergence",category:"Probability",syntax:["kldivergence(x, y)"],description:"Calculate the Kullback-Leibler (KL) divergence  between two distributions.",examples:["kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])"],seealso:[]},gammaDocs={name:"gamma",category:"Probability",syntax:["gamma(n)"],description:"Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.",examples:["gamma(4)","3!","gamma(1/2)","sqrt(pi)"],seealso:["factorial"]},factorialDocs={name:"factorial",category:"Probability",syntax:["n!","factorial(n)"],description:"Compute the factorial of a value",examples:["5!","5 * 4 * 3 * 2 * 1","3!"],seealso:["combinations","combinationsWithRep","permutations","gamma"]},combinationsDocs={name:"combinations",category:"Probability",syntax:["combinations(n, k)"],description:"Compute the number of combinations of n items taken k at a time",examples:["combinations(7, 5)"],seealso:["combinationsWithRep","permutations","factorial"]},combinationsWithRepDocs={name:"combinationsWithRep",category:"Probability",syntax:["combinationsWithRep(n, k)"],description:"Compute the number of combinations of n items taken k at a time with replacements.",examples:["combinationsWithRep(7, 5)"],seealso:["combinations","permutations","factorial"]},zerosDocs={name:"zeros",category:"Matrix",syntax:["zeros(m)","zeros(m, n)","zeros(m, n, p, ...)","zeros([m])","zeros([m, n])","zeros([m, n, p, ...])"],description:"Create a matrix containing zeros.",examples:["zeros(3)","zeros(3, 5)","a = [1, 2, 3; 4, 5, 6]","zeros(size(a))"],seealso:["concat","det","diag","identity","inv","ones","range","size","squeeze","subset","trace","transpose"]},transposeDocs={name:"transpose",category:"Matrix",syntax:["x'","transpose(x)"],description:"Transpose a matrix",examples:["a = [1, 2, 3; 4, 5, 6]","a'","transpose(a)"],seealso:["concat","det","diag","identity","inv","ones","range","size","squeeze","subset","trace","zeros"]},traceDocs={name:"trace",category:"Matrix",syntax:["trace(A)"],description:"Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.",examples:["A = [1, 2, 3; -1, 2, 3; 2, 0, 3]","trace(A)"],seealso:["concat","det","diag","identity","inv","ones","range","size","squeeze","subset","transpose","zeros"]},subsetDocs={name:"subset",category:"Matrix",syntax:["value(index)","value(index) = replacement","subset(value, [index])","subset(value, [index], replacement)"],description:"Get or set a subset of a matrix or string. Indexes are one-based. Both the ranges lower-bound and upper-bound are included.",examples:["d = [1, 2; 3, 4]","e = []","e[1, 1:2] = [5, 6]","e[2, :] = [7, 8]","f = d * e","f[2, 1]","f[:, 1]"],seealso:["concat","det","diag","identity","inv","ones","range","size","squeeze","trace","transpose","zeros"]},squeezeDocs={name:"squeeze",category:"Matrix",syntax:["squeeze(x)"],description:"Remove inner and outer singleton dimensions from a matrix.",examples:["a = zeros(3,2,1)","size(squeeze(a))","b = zeros(1,1,3)","size(squeeze(b))"],seealso:["concat","det","diag","identity","inv","ones","range","size","subset","trace","transpose","zeros"]},sortDocs={name:"sort",category:"Matrix",syntax:["sort(x)","sort(x, compare)"],description:'Sort the items in a matrix. Compare can be a string "asc", "desc", "natural", or a custom sort function.',examples:["sort([5, 10, 1])",'sort(["C", "B", "A", "D"])',"sortByLength(a, b) = size(a)[1] - size(b)[1]",'sort(["Langdon", "Tom", "Sara"], sortByLength)','sort(["10", "1", "2"], "natural")'],seealso:["map","filter","forEach"]},sizeDocs={name:"size",category:"Matrix",syntax:["size(x)"],description:"Calculate the size of a matrix.",examples:["size(2.3)",'size("hello world")',"a = [1, 2; 3, 4; 5, 6]","size(a)","size(1:6)"],seealso:["concat","count","det","diag","identity","inv","ones","range","squeeze","subset","trace","transpose","zeros"]},diffDocs={name:"diff",category:"Matrix",syntax:["diff(arr)","diff(arr, dim)"],description:["Create a new matrix or array with the difference of the passed matrix or array.","Dim parameter is optional and used to indicant the dimension of the array/matrix to apply the difference","If no dimension parameter is passed it is assumed as dimension 0","Dimension is zero-based in javascript and one-based in the parser","Arrays must be 'rectangular' meaning arrays like [1, 2]","If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays"],examples:["diff([1, 2, 4, 7, 0])","diff([1, 2, 4, 7, 0], 0)","diff(matrix([1, 2, 4, 7, 0]))","diff([[1, 2], [3, 4]])","diff([[1, 2], [3, 4]], 0)","diff([[1, 2], [3, 4]], 1)","diff([[1, 2], [3, 4]], bignumber(1))","diff(matrix([[1, 2], [3, 4]]), 1)","diff([[1, 2], matrix([3, 4])], 1)"],seealso:["subtract","partitionSelect"]},reshapeDocs={name:"reshape",category:"Matrix",syntax:["reshape(x, sizes)"],description:"Reshape a multi dimensional array to fit the specified dimensions.",examples:["reshape([1, 2, 3, 4, 5, 6], [2, 3])","reshape([[1, 2], [3, 4]], [1, 4])","reshape([[1, 2], [3, 4]], [4])"],seealso:["size","squeeze","resize"]},resizeDocs={name:"resize",category:"Matrix",syntax:["resize(x, size)","resize(x, size, defaultValue)"],description:"Resize a matrix.",examples:["resize([1,2,3,4,5], [3])","resize([1,2,3], [5])","resize([1,2,3], [5], -1)","resize(2, [2, 3])",'resize("hello", [8], "!")'],seealso:["size","subset","squeeze","reshape"]},rangeDocs={name:"range",category:"Type",syntax:["start:end","start:step:end","range(start, end)","range(start, end, step)","range(string)"],description:"Create a range. Lower bound of the range is included, upper bound is excluded.",examples:["1:5","3:-1:-3","range(3, 7)","range(0, 12, 2)",'range("4:10")',"a = [1, 2, 3, 4; 5, 6, 7, 8]","a[1:2, 1:2]"],seealso:["concat","det","diag","identity","inv","ones","size","squeeze","subset","trace","transpose","zeros"]},partitionSelectDocs={name:"partitionSelect",category:"Matrix",syntax:["partitionSelect(x, k)","partitionSelect(x, k, compare)"],description:"Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.",examples:["partitionSelect([5, 10, 1], 2)",'partitionSelect(["C", "B", "A", "D"], 1)'],seealso:["sort"]},onesDocs={name:"ones",category:"Matrix",syntax:["ones(m)","ones(m, n)","ones(m, n, p, ...)","ones([m])","ones([m, n])","ones([m, n, p, ...])"],description:"Create a matrix containing ones.",examples:["ones(3)","ones(3, 5)","ones([2,3]) * 4.5","a = [1, 2, 3; 4, 5, 6]","ones(size(a))"],seealso:["concat","det","diag","identity","inv","range","size","squeeze","subset","trace","transpose","zeros"]},mapDocs={name:"map",category:"Matrix",syntax:["map(x, callback)"],description:"Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.",examples:["map([1, 2, 3], square)"],seealso:["filter","forEach"]},kronDocs={name:"kron",category:"Matrix",syntax:["kron(x, y)"],description:"Calculates the kronecker product of 2 matrices or vectors.",examples:["kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])","kron([1,1], [2,3,4])"],seealso:["multiply","dot","cross"]},invDocs={name:"inv",category:"Matrix",syntax:["inv(x)"],description:"Calculate the inverse of a matrix",examples:["inv([1, 2; 3, 4])","inv(4)","1 / 4"],seealso:["concat","det","diag","identity","ones","range","size","squeeze","subset","trace","transpose","zeros"]},forEachDocs={name:"forEach",category:"Matrix",syntax:["forEach(x, callback)"],description:"Iterates over all elements of a matrix/array, and executes the given callback function.",examples:["forEach([1, 2, 3], function(val) { console.log(val) })"],seealso:["map","sort","filter"]},flattenDocs={name:"flatten",category:"Matrix",syntax:["flatten(x)"],description:"Flatten a multi dimensional matrix into a single dimensional matrix.",examples:["a = [1, 2, 3; 4, 5, 6]","size(a)","b = flatten(a)","size(b)"],seealso:["concat","resize","size","squeeze"]},filterDocs={name:"filter",category:"Matrix",syntax:["filter(x, test)"],description:"Filter items in a matrix.",examples:["isPositive(x) = x > 0","filter([6, -2, -1, 4, 3], isPositive)","filter([6, -2, 0, 1, 0], x != 0)"],seealso:["sort","map","forEach"]},identityDocs={name:"identity",category:"Matrix",syntax:["identity(n)","identity(m, n)","identity([m, n])"],description:"Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.",examples:["identity(3)","identity(3, 5)","a = [1, 2, 3; 4, 5, 6]","identity(size(a))"],seealso:["concat","det","diag","inv","ones","range","size","squeeze","subset","trace","transpose","zeros"]},getMatrixDataTypeDocs={name:"getMatrixDataType",category:"Matrix",syntax:["getMatrixDataType(x)"],description:'Find the data type of all elements in a matrix or array, for example "number" if all items are a number and "Complex" if all values are complex numbers. If a matrix contains more than one data type, it will return "mixed".',examples:["getMatrixDataType([1, 2, 3])","getMatrixDataType([[5 cm], [2 inch]])",'getMatrixDataType([1, "text"])',"getMatrixDataType([1, bignumber(4)])"],seealso:["matrix","sparse","typeOf"]},dotDocs={name:"dot",category:"Matrix",syntax:["dot(A, B)","A * B"],description:"Calculate the dot product of two vectors. The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn",examples:["dot([2, 4, 1], [2, 2, 3])","[2, 4, 1] * [2, 2, 3]"],seealso:["multiply","cross"]},diagDocs={name:"diag",category:"Matrix",syntax:["diag(x)","diag(x, k)"],description:"Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.",examples:["diag(1:3)","diag(1:3, 1)","a = [1, 2, 3; 4, 5, 6; 7, 8, 9]","diag(a)"],seealso:["concat","det","identity","inv","ones","range","size","squeeze","subset","trace","transpose","zeros"]},detDocs={name:"det",category:"Matrix",syntax:["det(x)"],description:"Calculate the determinant of a matrix",examples:["det([1, 2; 3, 4])","det([-2, 2, 3; -1, 1, 3; 2, 0, -1])"],seealso:["concat","diag","identity","inv","ones","range","size","squeeze","subset","trace","transpose","zeros"]},ctransposeDocs={name:"ctranspose",category:"Matrix",syntax:["x'","ctranspose(x)"],description:"Complex Conjugate and Transpose a matrix",examples:["a = [1, 2, 3; 4, 5, 6]","a'","ctranspose(a)"],seealso:["concat","det","diag","identity","inv","ones","range","size","squeeze","subset","trace","zeros"]},crossDocs={name:"cross",category:"Matrix",syntax:["cross(A, B)"],description:"Calculate the cross product for two vectors in three dimensional space.",examples:["cross([1, 1, 0],  [0, 1, 1])","cross([3, -3, 1], [4, 9, 2])","cross([2, 3, 4],  [5, 6, 7])"],seealso:["multiply","dot"]},concatDocs={name:"concat",category:"Matrix",syntax:["concat(A, B, C, ...)","concat(A, B, C, ..., dim)"],description:"Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.",examples:["A = [1, 2; 5, 6]","B = [3, 4; 7, 8]","concat(A, B)","concat(A, B, 1)","concat(A, B, 2)"],seealso:["det","diag","identity","inv","ones","range","size","squeeze","subset","trace","transpose","zeros"]},countDocs={name:"count",category:"Matrix",syntax:["count(x)"],description:"Count the number of elements of a matrix, array or string.",examples:["a = [1, 2; 3, 4; 5, 6]","count(a)","size(a)",'count("hello world")'],seealso:["size"]},xorDocs={name:"xor",category:"Logical",syntax:["x xor y","xor(x, y)"],description:"Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.",examples:["true xor false","false xor false","true xor true","0 xor 4"],seealso:["not","and","or"]},orDocs={name:"or",category:"Logical",syntax:["x or y","or(x, y)"],description:"Logical or. Test if at least one value is defined with a nonzero/nonempty value.",examples:["true or false","false or false","0 or 4"],seealso:["not","and","xor"]},notDocs={name:"not",category:"Logical",syntax:["not x","not(x)"],description:"Logical not. Flips the boolean value of given argument.",examples:["not true","not false","not 2","not 0"],seealso:["and","or","xor"]},andDocs={name:"and",category:"Logical",syntax:["x and y","and(x, y)"],description:"Logical and. Test whether two values are both defined with a nonzero/nonempty value.",examples:["true and false","true and true","2 and 4"],seealso:["not","or","xor"]},intersectDocs={name:"intersect",category:"Geometry",syntax:["intersect(expr1, expr2, expr3, expr4)","intersect(expr1, expr2, expr3)"],description:"Computes the intersection point of lines and/or planes.",examples:["intersect([0, 0], [10, 10], [10, 0], [0, 10])","intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])"],seealso:[]},distanceDocs={name:"distance",category:"Geometry",syntax:["distance([x1, y1], [x2, y2])","distance([[x1, y1], [x2, y2]])"],description:"Calculates the Euclidean distance between two points.",examples:["distance([0,0], [4,4])","distance([[0,0], [4,4]])"],seealso:[]},helpDocs={name:"help",category:"Expression",syntax:["help(object)","help(string)"],description:"Display documentation on a function or data type.",examples:["help(sqrt)",'help("complex")'],seealso:[]},evaluateDocs={name:"evaluate",category:"Expression",syntax:["evaluate(expression)","evaluate([expr1, expr2, expr3, ...])"],description:"Evaluate an expression or an array with expressions.",examples:['evaluate("2 + 3")','evaluate("sqrt(" + 4 + ")")'],seealso:[]},imDocs={name:"im",category:"Complex",syntax:["im(x)"],description:"Get the imaginary part of a complex number.",examples:["im(2 + 3i)","re(2 + 3i)","im(-5.2i)","im(2.4)"],seealso:["re","conj","abs","arg"]},reDocs={name:"re",category:"Complex",syntax:["re(x)"],description:"Get the real part of a complex number.",examples:["re(2 + 3i)","im(2 + 3i)","re(-5.2i)","re(2.4)"],seealso:["im","conj","abs","arg"]},conjDocs={name:"conj",category:"Complex",syntax:["conj(x)"],description:"Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.",examples:["conj(2 + 3i)","conj(2 - 3i)","conj(-5.2i)"],seealso:["re","im","abs","arg"]},argDocs={name:"arg",category:"Complex",syntax:["arg(x)"],description:"Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).",examples:["arg(2 + 2i)","atan2(3, 2)","arg(2 + 3i)"],seealso:["re","im","conj","abs"]},typedDocs={name:"typed",category:"Core",syntax:["typed(signatures)","typed(name, signatures)"],description:"Create a typed function.",examples:['double = typed({ "number, number": f(x)=x+x })',"double(2)",'double("hello")'],seealso:[]},importDocs={name:"import",category:"Core",syntax:["import(functions)","import(functions, options)"],description:"Import functions or constants from an object.",examples:["import({myFn: f(x)=x^2, myConstant: 32 })","myFn(2)","myConstant"],seealso:[]},configDocs={name:"config",category:"Core",syntax:["config()","config(options)"],description:"Get configuration or change configuration.",examples:["config()","1/3 + 1/4",'config({number: "Fraction"})',"1/3 + 1/4"],seealso:[]},stirlingS2Docs={name:"stirlingS2",category:"Combinatorics",syntax:["stirlingS2(n, k)"],description:"he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.",examples:["stirlingS2(5, 3)"],seealso:["bellNumbers"]},compositionDocs={name:"composition",category:"Combinatorics",syntax:["composition(n, k)"],description:"The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.",examples:["composition(5, 3)"],seealso:["combinations"]},catalanDocs={name:"catalan",category:"Combinatorics",syntax:["catalan(n)"],description:"The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.",examples:["catalan(3)","catalan(8)"],seealso:["bellNumbers"]},bellNumbersDocs={name:"bellNumbers",category:"Combinatorics",syntax:["bellNumbers(n)"],description:"The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.",examples:["bellNumbers(3)","bellNumbers(8)"],seealso:["stirlingS2"]},rightLogShiftDocs={name:"rightLogShift",category:"Bitwise",syntax:["x >>> y","rightLogShift(x, y)"],description:"Bitwise right logical shift of a value x by y number of bits.",examples:["8 >>> 1","4 << 1","-12 >>> 2"],seealso:["bitAnd","bitNot","bitOr","bitXor","leftShift","rightArithShift"]},rightArithShiftDocs={name:"rightArithShift",category:"Bitwise",syntax:["x >> y","rightArithShift(x, y)"],description:"Bitwise right arithmetic shift of a value x by y number of bits.",examples:["8 >> 1","4 << 1","-12 >> 2"],seealso:["bitAnd","bitNot","bitOr","bitXor","leftShift","rightLogShift"]},leftShiftDocs={name:"leftShift",category:"Bitwise",syntax:["x << y","leftShift(x, y)"],description:"Bitwise left logical shift of a value x by y number of bits.",examples:["4 << 1","8 >> 1"],seealso:["bitAnd","bitNot","bitOr","bitXor","rightArithShift","rightLogShift"]},bitXorDocs={name:"bitXor",category:"Bitwise",syntax:["bitXor(x, y)"],description:"Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.",examples:["bitOr(1, 2)","bitXor([2, 3, 4], 4)"],seealso:["bitAnd","bitNot","bitOr","leftShift","rightArithShift","rightLogShift"]},bitOrDocs={name:"bitOr",category:"Bitwise",syntax:["x | y","bitOr(x, y)"],description:"Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.",examples:["5 | 3","bitOr([1, 2, 3], 4)"],seealso:["bitAnd","bitNot","bitXor","leftShift","rightArithShift","rightLogShift"]},bitNotDocs={name:"bitNot",category:"Bitwise",syntax:["~x","bitNot(x)"],description:"Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.",examples:["~1","~2","bitNot([2, -3, 4])"],seealso:["bitAnd","bitOr","bitXor","leftShift","rightArithShift","rightLogShift"]},bitAndDocs={name:"bitAnd",category:"Bitwise",syntax:["x & y","bitAnd(x, y)"],description:"Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0",examples:["5 & 3","bitAnd(53, 131)","[1, 12, 31] & 42"],seealso:["bitNot","bitOr","bitXor","leftShift","rightArithShift","rightLogShift"]},xgcdDocs={name:"xgcd",category:"Arithmetic",syntax:["xgcd(a, b)"],description:"Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.",examples:["xgcd(8, 12)","gcd(8, 12)","xgcd(36163, 21199)"],seealso:["gcd","lcm"]},unaryPlusDocs={name:"unaryPlus",category:"Operators",syntax:["+x","unaryPlus(x)"],description:"Converts booleans and strings to numbers.",examples:["+true",'+"2"'],seealso:["add","subtract","unaryMinus"]},unaryMinusDocs={name:"unaryMinus",category:"Operators",syntax:["-x","unaryMinus(x)"],description:"Inverse the sign of a value. Converts booleans and strings to numbers.",examples:["-4.5","-(-5.6)",'-"22"'],seealso:["add","subtract","unaryPlus"]},squareDocs={name:"square",category:"Arithmetic",syntax:["square(x)"],description:"Compute the square of a value. The square of x is x * x.",examples:["square(3)","sqrt(9)","3^2","3 * 3"],seealso:["multiply","pow","sqrt","cube"]},sqrtmDocs={name:"sqrtm",category:"Arithmetic",syntax:["sqrtm(x)"],description:"Calculate the principal square root of a square matrix. The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.",examples:["sqrtm([[1, 2], [3, 4]])"],seealso:["sqrt","abs","square","multiply"]},sqrtDocs={name:"sqrt",category:"Arithmetic",syntax:["sqrt(x)"],description:"Compute the square root value. If x = y * y, then y is the square root of x.",examples:["sqrt(25)","5 * 5","sqrt(-1)"],seealso:["square","sqrtm","multiply","nthRoot","nthRoots","pow"]},signDocs={name:"sign",category:"Arithmetic",syntax:["sign(x)"],description:"Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.",examples:["sign(3.5)","sign(-4.2)","sign(0)"],seealso:["abs"]},roundDocs={name:"round",category:"Arithmetic",syntax:["round(x)","round(x, n)"],description:"round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.",examples:["round(3.2)","round(3.8)","round(-4.2)","round(-4.8)","round(pi, 3)","round(123.45678, 2)"],seealso:["ceil","floor","fix"]},powDocs={name:"pow",category:"Operators",syntax:["x ^ y","pow(x, y)"],description:"Calculates the power of x to y, x^y.",examples:["2^3","2*2*2","1 + e ^ (pi * i)"],seealso:["multiply","nthRoot","nthRoots","sqrt"]},nthRootsDocs={name:"nthRoots",category:"Arithmetic",syntax:["nthRoots(A)","nthRoots(A, root)"],description:'Calculate the nth roots of a value. An nth root of a positive real number A, is a positive real solution of the equation "x^root = A". This function returns an array of complex values.',examples:["nthRoots(1)","nthRoots(1, 3)"],seealso:["sqrt","pow","nthRoot"]},nthRootDocs={name:"nthRoot",category:"Arithmetic",syntax:["nthRoot(a)","nthRoot(a, root)"],description:'Calculate the nth root of a value. The principal nth root of a positive real number A, is the positive real solution of the equation "x^root = A".',examples:["4 ^ 3","nthRoot(64, 3)","nthRoot(9, 2)","sqrt(9)"],seealso:["nthRoots","pow","sqrt"]},normDocs={name:"norm",category:"Arithmetic",syntax:["norm(x)","norm(x, p)"],description:"Calculate the norm of a number, vector or matrix.",examples:["abs(-3.5)","norm(-3.5)","norm(3 - 4i)","norm([1, 2, -3], Infinity)","norm([1, 2, -3], -Infinity)","norm([3, 4], 2)","norm([[1, 2], [3, 4]], 1)",'norm([[1, 2], [3, 4]], "inf")','norm([[1, 2], [3, 4]], "fro")']},multiplyDocs={name:"multiply",category:"Operators",syntax:["x * y","multiply(x, y)"],description:"multiply two values.",examples:["a = 2.1 * 3.4","a / 3.4","2 * 3 + 4","2 * (3 + 4)","3 * 2.1 km"],seealso:["divide"]},modDocs={name:"mod",category:"Operators",syntax:["x % y","x mod y","mod(x, y)"],description:"Calculates the modulus, the remainder of an integer division.",examples:["7 % 3","11 % 2","10 mod 4","isOdd(x) = x % 2","isOdd(2)","isOdd(3)"],seealso:["divide"]},log10Docs={name:"log10",category:"Arithmetic",syntax:["log10(x)"],description:"Compute the 10-base logarithm of a value.",examples:["log10(0.00001)","log10(10000)","10 ^ 4","log(10000) / log(10)","log(10000, 10)"],seealso:["exp","log"]},log1pDocs={name:"log1p",category:"Arithmetic",syntax:["log1p(x)","log1p(x, base)"],description:"Calculate the logarithm of a `value+1`",examples:["log1p(2.5)","exp(log1p(1.4))","pow(10, 4)","log1p(9999, 10)","log1p(9999) / log(10)"],seealso:["exp","log","log2","log10"]},log2Docs={name:"log2",category:"Arithmetic",syntax:["log2(x)"],description:"Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.",examples:["log2(0.03125)","log2(16)","log2(16) / log2(2)","pow(2, 4)"],seealso:["exp","log1p","log","log10"]},logDocs={name:"log",category:"Arithmetic",syntax:["log(x)","log(x, base)"],description:"Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).",examples:["log(3.5)","a = log(2.4)","exp(a)","10 ^ 4","log(10000, 10)","log(10000) / log(10)","b = log(1024, 2)","2 ^ b"],seealso:["exp","log1p","log2","log10"]},lcmDocs={name:"lcm",category:"Arithmetic",syntax:["lcm(x, y)"],description:"Compute the least common multiple.",examples:["lcm(4, 6)","lcm(6, 21)","lcm(6, 21, 5)"],seealso:["gcd"]},hypotDocs={name:"hypot",category:"Arithmetic",syntax:["hypot(a, b, c, ...)","hypot([a, b, c, ...])"],description:"Calculate the hypotenusa of a list with values. ",examples:["hypot(3, 4)","sqrt(3^2 + 4^2)","hypot(-2)","hypot([3, 4, 5])"],seealso:["abs","norm"]},gcdDocs={name:"gcd",category:"Arithmetic",syntax:["gcd(a, b)","gcd(a, b, c, ...)"],description:"Compute the greatest common divisor.",examples:["gcd(8, 12)","gcd(-4, 6)","gcd(25, 15, -10)"],seealso:["lcm","xgcd"]},floorDocs={name:"floor",category:"Arithmetic",syntax:["floor(x)"],description:"Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.",examples:["floor(3.2)","floor(3.8)","floor(-4.2)"],seealso:["ceil","fix","round"]},fixDocs={name:"fix",category:"Arithmetic",syntax:["fix(x)"],description:"Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.",examples:["fix(3.2)","fix(3.8)","fix(-4.2)","fix(-4.8)"],seealso:["ceil","floor","round"]},expm1Docs={name:"expm1",category:"Arithmetic",syntax:["expm1(x)"],description:"Calculate the value of subtracting 1 from the exponential value.",examples:["expm1(2)","pow(e, 2) - 1","log(expm1(2) + 1)"],seealso:["exp","pow","log"]},expmDocs={name:"expm",category:"Arithmetic",syntax:["exp(x)"],description:"Compute the matrix exponential, expm(A) = e^A. The matrix must be square. Not to be confused with exp(a), which performs element-wise exponentiation.",examples:["expm([[0,2],[0,0]])"],seealso:["exp"]},eigsDocs={name:"eigs",category:"Matrix",syntax:["eigs(x)"],description:"Calculate the eigenvalues and eigenvectors of a real symmetric matrix",examples:["eigs([[5, 2.3], [2.3, 1]])"],seealso:["inv"]},expDocs={name:"exp",category:"Arithmetic",syntax:["exp(x)"],description:"Calculate the exponent of a value.",examples:["exp(1.3)","e ^ 1.3","log(exp(1.3))","x = 2.4","(exp(i*x) == cos(x) + i*sin(x))   # Euler's formula"],seealso:["expm","expm1","pow","log"]},dotMultiplyDocs={name:"dotMultiply",category:"Operators",syntax:["x .* y","dotMultiply(x, y)"],description:"Multiply two values element wise.",examples:["a = [1, 2, 3; 4, 5, 6]","b = [2, 1, 1; 3, 2, 5]","a .* b"],seealso:["multiply","divide","dotDivide"]},dotDivideDocs={name:"dotDivide",category:"Operators",syntax:["x ./ y","dotDivide(x, y)"],description:"Divide two values element wise.",examples:["a = [1, 2, 3; 4, 5, 6]","b = [2, 1, 1; 3, 2, 5]","a ./ b"],seealso:["multiply","dotMultiply","divide"]},divideDocs={name:"divide",category:"Operators",syntax:["x / y","divide(x, y)"],description:"Divide two values.",examples:["a = 2 / 3","a * 3","4.5 / 2","3 + 4 / 2","(3 + 4) / 2","18 km / 4.5"],seealso:["multiply"]},cubeDocs={name:"cube",category:"Arithmetic",syntax:["cube(x)"],description:"Compute the cube of a value. The cube of x is x * x * x.",examples:["cube(2)","2^3","2 * 2 * 2"],seealso:["multiply","square","pow"]},ceilDocs={name:"ceil",category:"Arithmetic",syntax:["ceil(x)"],description:"Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.",examples:["ceil(3.2)","ceil(3.8)","ceil(-4.2)"],seealso:["floor","fix","round"]},cbrtDocs={name:"cbrt",category:"Arithmetic",syntax:["cbrt(x)","cbrt(x, allRoots)"],description:"Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned",examples:["cbrt(64)","cube(4)","cbrt(-8)","cbrt(2 + 3i)","cbrt(8i)","cbrt(8i, true)","cbrt(27 m^3)"],seealso:["square","sqrt","cube","multiply"]},addDocs={name:"add",category:"Operators",syntax:["x + y","add(x, y)"],description:"Add two values.",examples:["a = 2.1 + 3.6","a - 3.6","3 + 2i","3 cm + 2 inch",'"2.3" + "4"'],seealso:["subtract"]},absDocs={name:"abs",category:"Arithmetic",syntax:["abs(x)"],description:"Compute the absolute value.",examples:["abs(3.5)","abs(-4.2)"],seealso:["sign"]},qrDocs={name:"qr",category:"Algebra",syntax:["qr(A)"],description:"Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.",examples:["qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])"],seealso:["lup","slu","matrix"]},usolveDocs={name:"usolve",category:"Algebra",syntax:["x=usolve(U, b)"],description:"Finds one solution of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.",examples:["x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])"],seealso:["usolveAll","lup","lusolve","lsolve","matrix","sparse"]},usolveAllDocs={name:"usolveAll",category:"Algebra",syntax:["x=usolve(U, b)"],description:"Finds all solutions of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.",examples:["x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])"],seealso:["usolve","lup","lusolve","lsolve","matrix","sparse"]},sluDocs={name:"slu",category:"Algebra",syntax:["slu(A, order, threshold)"],description:"Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U",examples:["slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)"],seealso:["lusolve","lsolve","usolve","matrix","sparse","lup","qr"]},rationalizeDocs={name:"rationalize",category:"Algebra",syntax:["rationalize(expr)","rationalize(expr, scope)","rationalize(expr, scope, detailed)"],description:"Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.",examples:['rationalize("2x/y - y/(x+1)")','rationalize("2x/y - y/(x+1)", true)'],seealso:["simplify"]},simplifyDocs={name:"simplify",category:"Algebra",syntax:["simplify(expr)","simplify(expr, rules)"],description:"Simplify an expression tree.",examples:['simplify("3 + 2 / 4")','simplify("2x + x")','f = parse("x * (x + 2 + x)")',"simplified = simplify(f)","simplified.evaluate({x: 2})"],seealso:["derivative","parse","evaluate"]},lupDocs={name:"lup",category:"Algebra",syntax:["lup(m)"],description:"Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U",examples:["lup([[2, 1], [1, 4]])","lup(matrix([[2, 1], [1, 4]]))","lup(sparse([[2, 1], [1, 4]]))"],seealso:["lusolve","lsolve","usolve","matrix","sparse","slu","qr"]},lsolveDocs={name:"lsolve",category:"Algebra",syntax:["x=lsolve(L, b)"],description:"Finds one solution of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.",examples:["a = [-2, 3; 2, 1]","b = [11, 9]","x = lsolve(a, b)"],seealso:["lsolveAll","lup","lusolve","usolve","matrix","sparse"]},lsolveAllDocs={name:"lsolveAll",category:"Algebra",syntax:["x=lsolveAll(L, b)"],description:"Finds all solutions of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.",examples:["a = [-2, 3; 2, 1]","b = [11, 9]","x = lsolve(a, b)"],seealso:["lsolve","lup","lusolve","usolve","matrix","sparse"]},derivativeDocs={name:"derivative",category:"Algebra",syntax:["derivative(expr, variable)","derivative(expr, variable, {simplify: boolean})"],description:"Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.",examples:['derivative("2x^3", "x")','derivative("2x^3", "x", {simplify: false})','derivative("2x^2 + 3x + 4", "x")','derivative("sin(2x)", "x")','f = parse("x^2 + x")','x = parse("x")',"df = derivative(f, x)","df.evaluate({x: 3})"],seealso:["simplify","parse","evaluate"]},versionDocs={name:"version",category:"Constants",syntax:["version"],description:"A string with the version number of math.js",examples:["version"],seealso:[]},trueDocs={name:"true",category:"Constants",syntax:["true"],description:"Boolean value true",examples:["true"],seealso:["false"]},tauDocs={name:"tau",category:"Constants",syntax:["tau"],description:"Tau is the ratio constant of a circle's circumference to radius, equal to 2 * pi, approximately 6.2832.",examples:["tau","2 * pi"],seealso:["pi"]},SQRT2Docs={name:"SQRT2",category:"Constants",syntax:["SQRT2"],description:"Returns the square root of 2, approximately equal to 1.414",examples:["SQRT2","sqrt(2)"],seealso:[]},SQRT12Docs={name:"SQRT1_2",category:"Constants",syntax:["SQRT1_2"],description:"Returns the square root of 1/2, approximately equal to 0.707",examples:["SQRT1_2","sqrt(1/2)"],seealso:[]},phiDocs={name:"phi",category:"Constants",syntax:["phi"],description:"Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...",examples:["phi"],seealso:[]},piDocs={name:"pi",category:"Constants",syntax:["pi"],description:"The number pi is a mathematical constant that is the ratio of a circle's circumference to its diameter, and is approximately equal to 3.14159",examples:["pi","sin(pi/2)"],seealso:["tau"]},nullDocs={name:"null",category:"Constants",syntax:["null"],description:"Value null",examples:["null"],seealso:["true","false"]},NaNDocs={name:"NaN",category:"Constants",syntax:["NaN"],description:"Not a number",examples:["NaN","0 / 0"],seealso:[]},LOG10EDocs={name:"LOG10E",category:"Constants",syntax:["LOG10E"],description:"Returns the base-10 logarithm of E, approximately equal to 0.434",examples:["LOG10E","log(e, 10)"],seealso:[]},LOG2EDocs={name:"LOG2E",category:"Constants",syntax:["LOG2E"],description:"Returns the base-2 logarithm of E, approximately equal to 1.442",examples:["LOG2E","log(e, 2)"],seealso:[]},LN10Docs={name:"LN10",category:"Constants",syntax:["LN10"],description:"Returns the natural logarithm of 10, approximately equal to 2.302",examples:["LN10","log(10)"],seealso:[]},LN2Docs={name:"LN2",category:"Constants",syntax:["LN2"],description:"Returns the natural logarithm of 2, approximately equal to 0.693",examples:["LN2","log(2)"],seealso:[]},InfinityDocs={name:"Infinity",category:"Constants",syntax:["Infinity"],description:"Infinity, a number which is larger than the maximum number that can be handled by a floating point number.",examples:["Infinity","1 / 0"],seealso:[]},iDocs={name:"i",category:"Constants",syntax:["i"],description:"Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.",examples:["i","i * i","sqrt(-1)"],seealso:[]},falseDocs={name:"false",category:"Constants",syntax:["false"],description:"Boolean value false",examples:["false"],seealso:["true"]},eDocs={name:"e",category:"Constants",syntax:["e"],description:"Euler's number, the base of the natural logarithm. Approximately equal to 2.71828",examples:["e","e ^ 2","exp(2)","log(e)"],seealso:["exp"]},unitDocs={name:"unit",category:"Construction",syntax:["value unit","unit(value, unit)","unit(string)"],description:"Create a unit.",examples:["5.5 mm","3 inch",'unit(7.1, "kilogram")','unit("23 deg")'],seealso:["bignumber","boolean","complex","index","matrix","number","string"]},stringDocs={name:"string",category:"Construction",syntax:['"text"',"string(x)"],description:"Create a string or convert a value to a string",examples:['"Hello World!"',"string(4.2)","string(3 + 2i)"],seealso:["bignumber","boolean","complex","index","matrix","number","unit"]},splitUnitDocs={name:"splitUnit",category:"Construction",syntax:["splitUnit(unit: Unit, parts: Unit[])"],description:"Split a unit in an array of units whose sum is equal to the original unit.",examples:['splitUnit(1 m, ["feet", "inch"])'],seealso:["unit","createUnit"]},sparseDocs={name:"sparse",category:"Construction",syntax:["sparse()","sparse([a1, b1, ...; a1, b2, ...])",'sparse([a1, b1, ...; a1, b2, ...], "number")'],description:"Create a sparse matrix.",examples:["sparse()","sparse([3, 4; 5, 6])",'sparse([3, 0; 5, 0], "number")'],seealso:["bignumber","boolean","complex","index","number","string","unit","matrix"]},numberDocs={name:"number",category:"Construction",syntax:["x","number(x)","number(unit, valuelessUnit)"],description:"Create a number or convert a string or boolean into a number.",examples:["2","2e3","4.05","number(2)",'number("7.2")',"number(true)","number([true, false, true, true])",'number(unit("52cm"), "m")'],seealso:["bignumber","boolean","complex","fraction","index","matrix","string","unit"]},matrixDocs={name:"matrix",category:"Construction",syntax:["[]","[a1, b1, ...; a2, b2, ...]","matrix()",'matrix("dense")',"matrix([...])"],description:"Create a matrix.",examples:["[]","[1, 2, 3]","[1, 2, 3; 4, 5, 6]","matrix()","matrix([3, 4])",'matrix([3, 4; 5, 6], "sparse")','matrix([3, 4; 5, 6], "sparse", "number")'],seealso:["bignumber","boolean","complex","index","number","string","unit","sparse"]},matrixFromFunctionDocs={name:"matrixFromFunction",category:"Matrix",syntax:["math.matrixFromFunction(size, fn)","math.matrixFromFunction(size, fn, format)","math.matrixFromFunction(size, fn, format, datatype)","math.matrixFromFunction(size, format, fn)","math.matrixFromFunction(size, format, datatype, fn)"],description:"Create a matrix by evaluating a generating function at each index.",examples:["f(I) = I[1] - I[2]","matrixFromFunction([3,3], f)","g(I) = I[1] - I[2] == 1 ? 4 : 0",'matrixFromFunction([100, 100], "sparse", g)',"matrixFromFunction([5], random)"],seealso:["matrix","matrixFromRows","matrixFromColumns","zeros"]},matrixFromRowsDocs={name:"matrixFromRows",category:"Matrix",syntax:["math.matrixFromRows(...arr)","math.matrixFromRows(row1, row2)","math.matrixFromRows(row1, row2, row3)"],description:"Create a dense matrix from vectors as individual rows.",examples:["matrixFromRows([1, 2, 3], [[4],[5],[6]])"],seealso:["matrix","matrixFromColumns","matrixFromFunction","zeros"]},matrixFromColumnsDocs={name:"matrixFromColumns",category:"Matrix",syntax:["math.matrixFromColumns(...arr)","math.matrixFromColumns(row1, row2)","math.matrixFromColumns(row1, row2, row3)"],description:"Create a dense matrix from vectors as individual columns.",examples:["matrixFromColumns([1, 2, 3], [[4],[5],[6]])"],seealso:["matrix","matrixFromRows","matrixFromFunction","zeros"]},indexDocs={name:"index",category:"Construction",syntax:["[start]","[start:end]","[start:step:end]","[start1, start 2, ...]","[start1:end1, start2:end2, ...]","[start1:step1:end1, start2:step2:end2, ...]"],description:"Create an index to get or replace a subset of a matrix",examples:["[]","[1, 2, 3]","A = [1, 2, 3; 4, 5, 6]","A[1, :]","A[1, 2] = 50","A[0:2, 0:2] = ones(2, 2)"],seealso:["bignumber","boolean","complex","matrix,","number","range","string","unit"]},fractionDocs={name:"fraction",category:"Construction",syntax:["fraction(num)","fraction(num,den)"],description:"Create a fraction from a number or from a numerator and denominator.",examples:["fraction(0.125)","fraction(1, 3) + fraction(2, 5)"],seealso:["bignumber","boolean","complex","index","matrix","string","unit"]},createUnitDocs={name:"createUnit",category:"Construction",syntax:["createUnit(definitions)","createUnit(name, definition)"],description:"Create a user-defined unit and register it with the Unit type.",examples:['createUnit("foo")','createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})','createUnit("mph", "1 mile/hour")'],seealso:["unit","splitUnit"]},complexDocs={name:"complex",category:"Construction",syntax:["complex()","complex(re, im)","complex(string)"],description:"Create a complex number.",examples:["complex()","complex(2, 3)",'complex("7 - 2i")'],seealso:["bignumber","boolean","index","matrix","number","string","unit"]},booleanDocs={name:"boolean",category:"Construction",syntax:["x","boolean(x)"],description:"Convert a string or number into a boolean.",examples:["boolean(0)","boolean(1)","boolean(3)",'boolean("true")','boolean("false")',"boolean([1, 0, 1, 1])"],seealso:["bignumber","complex","index","matrix","number","string","unit"]},dotPowDocs={name:"dotPow",category:"Operators",syntax:["x .^ y","dotPow(x, y)"],description:"Calculates the power of x to y element wise.",examples:["a = [1, 2, 3; 4, 5, 6]","a .^ 2"],seealso:["pow"]},lusolveDocs={name:"lusolve",category:"Algebra",syntax:["x=lusolve(A, b)","x=lusolve(lu, b)"],description:"Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.",examples:["a = [-2, 3; 2, 1]","b = [11, 9]","x = lusolve(a, b)"],seealso:["lup","slu","lsolve","usolve","matrix","sparse"]},subtractDocs={name:"subtract",category:"Operators",syntax:["x - y","subtract(x, y)"],description:"subtract two values.",examples:["a = 5.3 - 2","a + 2","2/3 - 1/6","2 * 3 - 3","2.1 km - 500m"],seealso:["add"]},varianceDocs={name:"variance",category:"Statistics",syntax:["variance(a, b, c, ...)","variance(A)","variance(A, normalization)"],description:'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',examples:["variance(2, 4, 6)","variance([2, 4, 6, 8])",'variance([2, 4, 6, 8], "uncorrected")','variance([2, 4, 6, 8], "biased")',"variance([1, 2, 3; 4, 5, 6])"],seealso:["max","mean","min","median","min","prod","std","sum"]},sinDocs={name:"sin",category:"Trigonometry",syntax:["sin(x)"],description:"Compute the sine of x in radians.",examples:["sin(2)","sin(pi / 4) ^ 2","sin(90 deg)","sin(30 deg)","sin(0.2)^2 + cos(0.2)^2"],seealso:["asin","cos","tan"]},numericDocs={name:"numeric",category:"Utils",syntax:["numeric(x)"],description:"Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.",examples:['numeric("4")','numeric("4", "number")','numeric("4", "BigNumber")','numeric("4", "Fraction)','numeric(4, "Fraction")','numeric(fraction(2, 5), "number)'],seealso:["number","fraction","bignumber","string","format"]},columnDocs={name:"column",category:"Matrix",syntax:["column(x, index)"],description:"Return a column from a matrix or array.",examples:["A = [[1, 2], [3, 4]]","column(A, 1)","column(A, 2)"],seealso:["row","matrixFromColumns"]},rowDocs={name:"row",category:"Matrix",syntax:["row(x, index)"],description:"Return a row from a matrix or array.",examples:["A = [[1, 2], [3, 4]]","row(A, 1)","row(A, 2)"],seealso:["column","matrixFromRows"]},rotationMatrixDocs={name:"rotationMatrix",category:"Matrix",syntax:["rotationMatrix(theta)","rotationMatrix(theta, v)","rotationMatrix(theta, v, format)"],description:"Returns a 2-D rotation matrix (2x2) for a given angle (in radians). Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.",examples:["rotationMatrix(pi / 2)",'rotationMatrix(unit("45deg"), [0, 0, 1])','rotationMatrix(1, matrix([0, 0, 1]), "sparse")'],seealso:["cos","sin"]},rotateDocs={name:"rotate",category:"Matrix",syntax:["rotate(w, theta)","rotate(w, theta, v)"],description:"Returns a 2-D rotation matrix (2x2) for a given angle (in radians). Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.",examples:["rotate([1, 0], math.pi / 2)",'rotate(matrix([1, 0]), unit("35deg"))','rotate([1, 0, 0], unit("90deg"), [0, 0, 1])','rotate(matrix([1, 0, 0]), unit("90deg"), matrix([0, 0, 1]))'],seealso:["matrix","rotationMatrix"]},embeddedDocs={bignumber:bignumberDocs,boolean:booleanDocs,complex:complexDocs,createUnit:createUnitDocs,fraction:fractionDocs,index:indexDocs,matrix:matrixDocs,number:numberDocs,sparse:sparseDocs,splitUnit:splitUnitDocs,string:stringDocs,unit:unitDocs,e:eDocs,E:eDocs,false:falseDocs,i:iDocs,Infinity:InfinityDocs,LN2:LN2Docs,LN10:LN10Docs,LOG2E:LOG2EDocs,LOG10E:LOG10EDocs,NaN:NaNDocs,null:nullDocs,pi:piDocs,PI:piDocs,phi:phiDocs,SQRT1_2:SQRT12Docs,SQRT2:SQRT2Docs,tau:tauDocs,true:trueDocs,version:versionDocs,speedOfLight:{description:"Speed of light in vacuum",examples:["speedOfLight"]},gravitationConstant:{description:"Newtonian constant of gravitation",examples:["gravitationConstant"]},planckConstant:{description:"Planck constant",examples:["planckConstant"]},reducedPlanckConstant:{description:"Reduced Planck constant",examples:["reducedPlanckConstant"]},magneticConstant:{description:"Magnetic constant (vacuum permeability)",examples:["magneticConstant"]},electricConstant:{description:"Electric constant (vacuum permeability)",examples:["electricConstant"]},vacuumImpedance:{description:"Characteristic impedance of vacuum",examples:["vacuumImpedance"]},coulomb:{description:"Coulomb's constant",examples:["coulomb"]},elementaryCharge:{description:"Elementary charge",examples:["elementaryCharge"]},bohrMagneton:{description:"Borh magneton",examples:["bohrMagneton"]},conductanceQuantum:{description:"Conductance quantum",examples:["conductanceQuantum"]},inverseConductanceQuantum:{description:"Inverse conductance quantum",examples:["inverseConductanceQuantum"]},magneticFluxQuantum:{description:"Magnetic flux quantum",examples:["magneticFluxQuantum"]},nuclearMagneton:{description:"Nuclear magneton",examples:["nuclearMagneton"]},klitzing:{description:"Von Klitzing constant",examples:["klitzing"]},bohrRadius:{description:"Borh radius",examples:["bohrRadius"]},classicalElectronRadius:{description:"Classical electron radius",examples:["classicalElectronRadius"]},electronMass:{description:"Electron mass",examples:["electronMass"]},fermiCoupling:{description:"Fermi coupling constant",examples:["fermiCoupling"]},fineStructure:{description:"Fine-structure constant",examples:["fineStructure"]},hartreeEnergy:{description:"Hartree energy",examples:["hartreeEnergy"]},protonMass:{description:"Proton mass",examples:["protonMass"]},deuteronMass:{description:"Deuteron Mass",examples:["deuteronMass"]},neutronMass:{description:"Neutron mass",examples:["neutronMass"]},quantumOfCirculation:{description:"Quantum of circulation",examples:["quantumOfCirculation"]},rydberg:{description:"Rydberg constant",examples:["rydberg"]},thomsonCrossSection:{description:"Thomson cross section",examples:["thomsonCrossSection"]},weakMixingAngle:{description:"Weak mixing angle",examples:["weakMixingAngle"]},efimovFactor:{description:"Efimov factor",examples:["efimovFactor"]},atomicMass:{description:"Atomic mass constant",examples:["atomicMass"]},avogadro:{description:"Avogadro's number",examples:["avogadro"]},boltzmann:{description:"Boltzmann constant",examples:["boltzmann"]},faraday:{description:"Faraday constant",examples:["faraday"]},firstRadiation:{description:"First radiation constant",examples:["firstRadiation"]},loschmidt:{description:"Loschmidt constant at T=273.15 K and p=101.325 kPa",examples:["loschmidt"]},gasConstant:{description:"Gas constant",examples:["gasConstant"]},molarPlanckConstant:{description:"Molar Planck constant",examples:["molarPlanckConstant"]},molarVolume:{description:"Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa",examples:["molarVolume"]},sackurTetrode:{description:"Sackur-Tetrode constant at T=1 K and p=101.325 kPa",examples:["sackurTetrode"]},secondRadiation:{description:"Second radiation constant",examples:["secondRadiation"]},stefanBoltzmann:{description:"Stefan-Boltzmann constant",examples:["stefanBoltzmann"]},wienDisplacement:{description:"Wien displacement law constant",examples:["wienDisplacement"]},molarMass:{description:"Molar mass constant",examples:["molarMass"]},molarMassC12:{description:"Molar mass constant of carbon-12",examples:["molarMassC12"]},gravity:{description:"Standard acceleration of gravity (standard acceleration of free-fall on Earth)",examples:["gravity"]},planckLength:{description:"Planck length",examples:["planckLength"]},planckMass:{description:"Planck mass",examples:["planckMass"]},planckTime:{description:"Planck time",examples:["planckTime"]},planckCharge:{description:"Planck charge",examples:["planckCharge"]},planckTemperature:{description:"Planck temperature",examples:["planckTemperature"]},derivative:derivativeDocs,lsolve:lsolveDocs,lsolveAll:lsolveAllDocs,lup:lupDocs,lusolve:lusolveDocs,simplify:simplifyDocs,rationalize:rationalizeDocs,slu:sluDocs,usolve:usolveDocs,usolveAll:usolveAllDocs,qr:qrDocs,abs:absDocs,add:addDocs,cbrt:cbrtDocs,ceil:ceilDocs,cube:cubeDocs,divide:divideDocs,dotDivide:dotDivideDocs,dotMultiply:dotMultiplyDocs,dotPow:dotPowDocs,exp:expDocs,expm:expmDocs,expm1:expm1Docs,fix:fixDocs,floor:floorDocs,gcd:gcdDocs,hypot:hypotDocs,lcm:lcmDocs,log:logDocs,log2:log2Docs,log1p:log1pDocs,log10:log10Docs,mod:modDocs,multiply:multiplyDocs,norm:normDocs,nthRoot:nthRootDocs,nthRoots:nthRootsDocs,pow:powDocs,round:roundDocs,sign:signDocs,sqrt:sqrtDocs,sqrtm:sqrtmDocs,square:squareDocs,subtract:subtractDocs,unaryMinus:unaryMinusDocs,unaryPlus:unaryPlusDocs,xgcd:xgcdDocs,bitAnd:bitAndDocs,bitNot:bitNotDocs,bitOr:bitOrDocs,bitXor:bitXorDocs,leftShift:leftShiftDocs,rightArithShift:rightArithShiftDocs,rightLogShift:rightLogShiftDocs,bellNumbers:bellNumbersDocs,catalan:catalanDocs,composition:compositionDocs,stirlingS2:stirlingS2Docs,config:configDocs,import:importDocs,typed:typedDocs,arg:argDocs,conj:conjDocs,re:reDocs,im:imDocs,evaluate:evaluateDocs,help:helpDocs,distance:distanceDocs,intersect:intersectDocs,and:andDocs,not:notDocs,or:orDocs,xor:xorDocs,concat:concatDocs,count:countDocs,cross:crossDocs,column:columnDocs,ctranspose:ctransposeDocs,det:detDocs,diag:diagDocs,diff:diffDocs,dot:dotDocs,getMatrixDataType:getMatrixDataTypeDocs,identity:identityDocs,filter:filterDocs,flatten:flattenDocs,forEach:forEachDocs,inv:invDocs,eigs:eigsDocs,kron:kronDocs,matrixFromFunction:matrixFromFunctionDocs,matrixFromRows:matrixFromRowsDocs,matrixFromColumns:matrixFromColumnsDocs,map:mapDocs,ones:onesDocs,partitionSelect:partitionSelectDocs,range:rangeDocs,resize:resizeDocs,reshape:reshapeDocs,rotate:rotateDocs,rotationMatrix:rotationMatrixDocs,row:rowDocs,size:sizeDocs,sort:sortDocs,squeeze:squeezeDocs,subset:subsetDocs,trace:traceDocs,transpose:transposeDocs,zeros:zerosDocs,combinations:combinationsDocs,combinationsWithRep:combinationsWithRepDocs,factorial:factorialDocs,gamma:gammaDocs,kldivergence:kldivergenceDocs,multinomial:multinomialDocs,permutations:permutationsDocs,pickRandom:pickRandomDocs,random:randomDocs,randomInt:randomIntDocs,compare:compareDocs,compareNatural:compareNaturalDocs,compareText:compareTextDocs,deepEqual:deepEqualDocs,equal:equalDocs,equalText:equalTextDocs,larger:largerDocs,largerEq:largerEqDocs,smaller:smallerDocs,smallerEq:smallerEqDocs,unequal:unequalDocs,setCartesian:setCartesianDocs,setDifference:setDifferenceDocs,setDistinct:setDistinctDocs,setIntersect:setIntersectDocs,setIsSubset:setIsSubsetDocs,setMultiplicity:setMultiplicityDocs,setPowerset:setPowersetDocs,setSize:setSizeDocs,setSymDifference:setSymDifferenceDocs,setUnion:setUnionDocs,erf:erfDocs,mad:madDocs,max:maxDocs,mean:meanDocs,median:medianDocs,min:minDocs,mode:modeDocs,prod:prodDocs,quantileSeq:quantileSeqDocs,std:stdDocs,sum:sumDocs,variance:varianceDocs,acos:acosDocs,acosh:acoshDocs,acot:acotDocs,acoth:acothDocs,acsc:acscDocs,acsch:acschDocs,asec:asecDocs,asech:asechDocs,asin:asinDocs,asinh:asinhDocs,atan:atanDocs,atanh:atanhDocs,atan2:atan2Docs,cos:cosDocs,cosh:coshDocs,cot:cotDocs,coth:cothDocs,csc:cscDocs,csch:cschDocs,sec:secDocs,sech:sechDocs,sin:sinDocs,sinh:sinhDocs,tan:tanDocs,tanh:tanhDocs,to:toDocs,clone:cloneDocs,format:formatDocs,bin:binDocs,oct:octDocs,hex:hexDocs,isNaN:isNaNDocs,isInteger:isIntegerDocs,isNegative:isNegativeDocs,isNumeric:isNumericDocs,hasNumericValue:hasNumericValueDocs,isPositive:isPositiveDocs,isPrime:isPrimeDocs,isZero:isZeroDocs,typeOf:typeOfDocs,numeric:numericDocs},name$U="help",dependencies$U=["typed","mathWithTransform","Help"],createHelp=factory(name$U,dependencies$U,e=>{var{typed:e,mathWithTransform:i,Help:a}=e;return e(name$U,{any:function(e){var t,r=e;if("string"!=typeof e)for(t in i)if(hasOwnProperty$1(i,t)&&e===i[t]){r=t;break}var n=getSafeProperty(embeddedDocs,r);if(n)return new a(n);n="function"==typeof r?r.name:r;throw new Error('No documentation found on "'+n+'"')}})}),name$T="chain",dependencies$T=["typed","Chain"],createChain=factory(name$T,dependencies$T,e=>{var{typed:e,Chain:t}=e;return e(name$T,{"":function(){return new t},any:function(e){return new t(e)}})}),name$S="det",dependencies$S=["typed","matrix","subtract","multiply","unaryMinus","lup"],createDet=factory(name$S,dependencies$S,e=>{var{typed:e,matrix:n,subtract:l,multiply:p,unaryMinus:m,lup:f}=e;return e(name$S,{any:function(e){return clone$1(e)},"Array | Matrix":function(e){var t=isMatrix(e)?e.size():Array.isArray(e)?(e=n(e)).size():[];switch(t.length){case 0:return clone$1(e);case 1:if(1===t[0])return clone$1(e.valueOf()[0]);throw new RangeError("Matrix must be square (size: "+format$1(t)+")");case 2:var r=t[0];if(r===t[1])return function(e,t){{if(1===t)return clone$1(e[0][0]);if(2===t)return l(p(e[0][0],e[1][1]),p(e[1][0],e[0][1]));for(var r=f(e),n=r.U[0][0],i=1;i<t;i++)n=p(n,r.U[i][i]);for(var a=0,o=0,s=[];;){for(;s[o];)o++;if(t<=o)break;for(var u=o,c=0;!s[r.p[u]];)s[r.p[u]]=!0,u=r.p[u],c++;c%2==0&&a++}return a%2==0?n:m(n)}}(e.clone().valueOf(),r);throw new RangeError("Matrix must be square (size: "+format$1(t)+")");default:throw new RangeError("Matrix must be two dimensional (size: "+format$1(t)+")")}}})}),name$R="inv",dependencies$R=["typed","matrix","divideScalar","addScalar","multiply","unaryMinus","det","identity","abs"],createInv=factory(name$R,dependencies$R,e=>{var{typed:e,matrix:i,divideScalar:g,addScalar:x,multiply:v,unaryMinus:b,det:w,identity:N,abs:M}=e;return e(name$R,{"Array | Matrix":function(e){var t=isMatrix(e)?e.size():arraySize(e);switch(t.length){case 1:if(1===t[0])return isMatrix(e)?i([g(1,e.valueOf()[0])]):[g(1,e[0])];throw new RangeError("Matrix must be square (size: "+format$1(t)+")");case 2:var r=t[0],n=t[1];if(r===n)return isMatrix(e)?i(a(e.valueOf(),r,n),e.storage()):a(e,r,n);throw new RangeError("Matrix must be square (size: "+format$1(t)+")");default:throw new RangeError("Matrix must be two dimensional (size: "+format$1(t)+")")}},any:function(e){return g(1,e)}});function a(e,t,r){var n,i,a;if(1===t){if(0===(o=e[0][0]))throw Error("Cannot calculate inverse, determinant is zero");return[[g(1,o)]]}if(2===t){var o=w(e);if(0===o)throw Error("Cannot calculate inverse, determinant is zero");return[[g(e[1][1],o),g(b(e[0][1]),o)],[g(b(e[1][0]),o),g(e[0][0],o)]]}var s=e.concat();for(m=0;m<t;m++)s[m]=s[m].concat();for(var u=N(t).valueOf(),c=0;c<r;c++){for(var l=M(s[c][c]),p=c,m=c+1;m<t;)M(s[m][c])>l&&(l=M(s[m][c]),p=m),m++;if(0===l)throw Error("Cannot calculate inverse, determinant is zero");(m=p)!==c&&(a=s[c],s[c]=s[m],s[m]=a,a=u[c],u[c]=u[m],u[m]=a);var f=s[c],d=u[c];for(m=0;m<t;m++){var h=s[m],y=u[m];if(m!==c){if(0!==h[c]){for(i=g(b(h[c]),f[c]),n=c;n<r;n++)h[n]=x(h[n],v(i,f[n]));for(n=0;n<r;n++)y[n]=x(y[n],v(i,d[n]))}}else{for(i=f[c],n=c;n<r;n++)h[n]=g(h[n],i);for(n=0;n<r;n++)y[n]=g(y[n],i)}}}return u}});function createComplexEigs(e){var{addScalar:N,subtract:M,flatten:S,multiply:$,multiplyScalar:E,divideScalar:A,sqrt:O,abs:C,bignumber:T,diag:D,inv:_,qr:I,usolve:R,usolveAll:B,equal:q,complex:F,larger:z,smaller:P,matrixFromColumns:c,dot:n}=e;function k(e,t){for(var r=0;r<e.length;r++)e[r].push(...Array(t-e[r].length).fill(0));for(var n=e.length;n<t;n++)e.push(Array(t).fill(0)),e[n][n]=1;return e}function U(e,t){for(var r of t)e=M(e,$(A(n(r,e),n(r,r)),r));return e}function L(e){return C(O(n(e,e)))}function j(e,t){var r="Complex"===t,r="BigNumber"===t?T(1):r?F(1):1;return $(A(r,L(e)),e)}return function(e,t,r,n,i){var a=function(e,t,r,n){var i,a="BigNumber"===r,r="Complex"===r,o=a?T(0):r?F(0):0,s=a?T(1):r?F(1):1,u=a?T(10):2,c=E(u,u);n&&(i=Array(t).fill(s));var l=!1;for(;!l;){l=!0;for(var p=0;p<t;p++){for(var m,f=o,d=o,h=0;h<t;h++)p!==h&&(m=C(e[p][h]),f=N(f,m),d=N(d,m));if(!q(f,0)&&!q(d,0)){for(var y=s,g=f,x=A(d,u),v=E(d,u);P(g,x);)g=E(g,c),y=E(y,u);for(;z(g,v);)g=A(g,c),y=A(y,u);if(P(A(N(g,d),y),E(N(f,d),.95))){l=!1;for(var b=A(1,y),w=0;w<t;w++)p!==w&&(e[p][w]=E(e[p][w],y),e[w][p]=E(e[w][p],b));n&&(i[p]=E(i[p],y))}}}}return D(i)}(e,t,n,i=void 0===i?!0:i);!function(e,t,r,n,i,a){var o="BigNumber"===n,n="Complex"===n,s=o?T(0):n?F(0):0;o&&(r=T(r));for(var u=0;u<t-2;u++){for(var c=0,l=s,p=u+1;p<t;p++){var m=e[p][u];P(C(l),C(m))&&(l=m,c=p)}if(!P(C(l),r)){if(c!==u+1){var f=e[c];e[c]=e[u+1],e[u+1]=f;for(var d=0;d<t;d++){var h=e[d][c];e[d][c]=e[d][u+1],e[d][u+1]=h}i&&(f=a[c],a[c]=a[u+1],a[u+1]=f)}for(var y=u+2;y<t;y++){var g=A(e[y][u],l);if(0!==g){for(var x=0;x<t;x++)e[y][x]=M(e[y][x],E(g,e[u+1][x]));for(var v=0;v<t;v++)e[v][u+1]=N(e[v][u+1],E(g,e[v][y]));if(i)for(var b=0;b<t;b++)a[y][b]=M(a[y][b],E(g,a[u+1][b]))}}}}}(e,t,r,n,i,a);var o,{values:s,C:u}=function(e,t,r,n,i){var a="BigNumber"===n,o="Complex"===n,s=a?T(1):o?F(1):1;a&&(r=T(r));var u=clone$1(e),c=[],l=t,p=[],m=i?D(Array(t).fill(s)):void 0,f=i?D(Array(l).fill(s)):void 0,d=0;for(;d<=100;){d+=1;for(var h=0;h<l;h++)u[h][h]=M(u[h][h],0);var{Q:y,R:g}=I(u);u=$(g,y);for(var x=0;x<l;x++)u[x][x]=N(u[x][x],0);if(i&&(f=$(f,y)),1===l||P(C(u[l-1][l-2]),r)){d=0,c.push(u[l-1][l-1]),i&&(p.unshift([[1]]),k(f,t),m=$(m,f),1<l&&(f=D(Array(l-1).fill(s)))),--l,u.pop();for(var v=0;v<l;v++)u[v].pop()}else if(2===l||P(C(u[l-2][l-3]),r)){d=0;y=function(e,t,r,n){var i=N(e,n),t=M(E(e,n),E(t,r)),r=E(i,.5),t=E(O(M(E(i,i),E(4,t))),.5);return[N(r,t),M(r,t)]}(u[l-2][l-2],u[l-2][l-1],u[l-1][l-2],u[l-1][l-1]);c.push(...y),i&&(p.unshift(function(e,t,r,n,i,a,o,s){var u="BigNumber"===s,c="Complex"===s,s=u?T(0):c?F(0):0,c=u?T(1):c?F(1):1;if(P(C(r),o))return[[c,s],[s,c]];if(z(C(M(i,a)),o))return[[M(i,n),M(a,n)],[r,r]];e=M(e,i),t=M(t,i),r=M(r,i),i=M(n,i);return P(C(t),o)?[[e,c],[r,s]]:[[t,s],[i,c]]}(u[l-2][l-2],u[l-2][l-1],u[l-1][l-2],u[l-1][l-1],y[0],y[1],r,n)),k(f,t),m=$(m,f),2<l&&(f=D(Array(l-2).fill(s)))),l-=2,u.pop(),u.pop();for(var b=0;b<l;b++)u[b].pop(),u[b].pop()}if(0===l)break}if(c.sort((e,t)=>+M(C(e),C(t))),100<d){var w=Error("The eigenvalues failed to converge. Only found these eigenvalues: "+c.join(", "));throw w.values=c,w.vectors=[],w}w=i?$(m,function(e,t){for(var r=[],n=0;n<t;n++)r[n]=Array(t).fill(0);var i,a=0;for(i of e){for(var o=i.length,s=0;s<o;s++)for(var u=0;u<o;u++)r[a+s][a+u]=i[s][u];a+=o}return r}(p,t)):void 0;return{values:c,C:w}}(e,t,r,n,i),u=$(_(a),u);return i&&(o=function(e,t,r,n,i,a){var o,s=_(r),u=$(s,e,r),c="BigNumber"===a,s="Complex"===a,e=c?T(0):s?F(0):0,s=c?T(1):s?F(1):1,l=[],p=[];for(o of n){var m=function(e,t,r){for(var n=0;n<e.length;n++)if(r(e[n],t))return n;return-1}(l,o,q);-1===m?(l.push(o),p.push(1)):p[m]+=1}for(var f=[],d=l.length,h=Array(t).fill(e),y=D(Array(t).fill(s)),g=[],x=0;x<d;x++){var v=l[x],b=M(u,$(v,y)),w=B(b,h);for((w=w.map(e=>$(r,e))).shift();w.length<p[x];){var N=function(e,t,r,n,i){var a,o="BigNumber"===i?T(1e3):1e3,s=0;for(;;){if(a=function(e,t,r){var n="BigNumber"===r,i="Complex"===r,e=Array(e).fill(0).map(e=>2*Math.random()-1);n&&(e=e.map(e=>T(e)));i&&(e=e.map(e=>F(e)));return j(e=U(e,t),r)}(t,r,i),a=R(e,a),z(L(a),o))break;if(5<=++s)return null}s=0;for(;;){var u=R(e,a);if(P(L(U(a,[u])),n))break;if(10<=++s)return null;a=j(u)}return a}(b,t,w,i,a);if(null==N){g.push(v);break}w.push(N)}f.push(...w.map(e=>S(e)))}if(0===g.length)return f;s=new Error("Failed to find eigenvectors for the following eigenvalues: "+g.join(", "));throw s.values=n,s.vectors=f,s}(e,t,u,s,r,n),o=c(...o)),{values:s,vectors:o}}}function createRealSymmetric(e){var{config:m,addScalar:d,subtract:h,abs:f,atan:y,cos:g,sin:x,multiplyScalar:v,inv:b,bignumber:w,multiply:N,add:M}=e;function S(e){for(var t=e.length,r=0,n=[0,1],i=0;i<t;i++)for(var a=i+1;a<t;a++)Math.abs(r)<Math.abs(e[i][a])&&(r=Math.abs(e[i][a]),n=[i,a]);return[n,r]}function $(e){for(var t=e.length,r=0,n=[0,1],i=0;i<t;i++)for(var a=i+1;a<t;a++)f(r)<f(e[i][a])&&(r=f(e[i][a]),n=[i,a]);return[n,r]}function E(e,t){for(var r=e.length,n=Array(r),i=Array(r),a=0;a<r;a++)i[a]=Array(r);for(var o=0;o<r;o++){for(var s=0,u=e[0],c=0;c<e.length;c++)f(e[c])<f(u)&&(u=e[s=c]);n[o]=e.splice(s,1)[0];for(var l=0;l<r;l++)i[l][o]=t[l][s],t[l].splice(s,1)}return{values:n,vectors:i}}function A(e,t){for(var r=new Array(e),n=0;n<e;n++)r[n]=t;return r}return function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:m.epsilon,n=3<arguments.length?arguments[3]:void 0;if("number"===n)return function(e,t){for(var r,n=e.length,i=Math.abs(t/n),a=new Array(n),o=0;o<n;o++)a[o]=A(n,0),a[o][o]=1;var s=S(e);for(;Math.abs(s[1])>=Math.abs(i);){var u=s[0][0],c=s[0][1];r=function(e,t,r){var n=t-e;return Math.abs(n)<=m.epsilon?Math.PI/4:.5*Math.atan(2*r/(t-e))}(e[u][u],e[c][c],e[u][c]),e=function(e,t,r,n){for(var i=e.length,a=Math.cos(t),o=Math.sin(t),s=a*a,u=o*o,c=A(i,0),l=A(i,0),t=s*e[r][r]-2*a*o*e[r][n]+u*e[n][n],s=u*e[r][r]+2*a*o*e[r][n]+s*e[n][n],p=0;p<i;p++)c[p]=a*e[r][p]-o*e[n][p],l[p]=o*e[r][p]+a*e[n][p];e[r][r]=t,e[n][n]=s,e[r][n]=0;for(var m=e[n][r]=0;m<i;m++)m!==r&&m!==n&&(e[r][m]=c[m],e[m][r]=c[m],e[n][m]=l[m],e[m][n]=l[m]);return e}(e,r,u,c),a=function(e,t,r,n){for(var i=e.length,a=Math.cos(t),o=Math.sin(t),s=A(i,0),u=A(i,0),c=0;c<i;c++)s[c]=a*e[c][r]-o*e[c][n],u[c]=o*e[c][r]+a*e[c][n];for(var l=0;l<i;l++)e[l][r]=s[l],e[l][n]=u[l];return e}(a,r,u,c),s=S(e)}for(var l=A(n,0),p=0;p<n;p++)l[p]=e[p][p];return E(clone$1(l),clone$1(a))}(e,r);if("BigNumber"===n)return function(e,t){for(var r,n=e.length,i=f(t/n),a=new Array(n),o=0;o<n;o++)a[o]=A(n,0),a[o][o]=1;var s=$(e);for(;f(s[1])>=f(i);){var u=s[0][0],c=s[0][1];r=function(e,t,r){e=h(t,e);return f(e)<=m.epsilon?w(-1).acos().div(4):v(.5,y(N(2,r,b(e))))}(e[u][u],e[c][c],e[u][c]),e=function(e,t,r,n){for(var i=e.length,a=w(g(t)),o=w(x(t)),s=v(a,a),u=v(o,o),c=A(i,w(0)),l=A(i,w(0)),p=N(w(2),a,o,e[r][n]),t=d(h(v(s,e[r][r]),p),v(u,e[n][n])),s=M(v(u,e[r][r]),p,v(s,e[n][n])),m=0;m<i;m++)c[m]=h(v(a,e[r][m]),v(o,e[n][m])),l[m]=d(v(o,e[r][m]),v(a,e[n][m]));e[r][r]=t,e[n][n]=s,e[r][n]=w(0),e[n][r]=w(0);for(var f=0;f<i;f++)f!==r&&f!==n&&(e[r][f]=c[f],e[f][r]=c[f],e[n][f]=l[f],e[f][n]=l[f]);return e}(e,r,u,c),a=function(e,t,r,n){for(var i=e.length,a=g(t),o=x(t),s=A(i,w(0)),u=A(i,w(0)),c=0;c<i;c++)s[c]=h(v(a,e[c][r]),v(o,e[c][n])),u[c]=d(v(o,e[c][r]),v(a,e[c][n]));for(var l=0;l<i;l++)e[l][r]=s[l],e[l][n]=u[l];return e}(a,r,u,c),s=$(e)}for(var l=A(n,0),p=0;p<n;p++)l[p]=e[p][p];return E(clone$1(l),clone$1(a))}(e,r);throw TypeError("Unsupported data type: "+n)}}var name$Q="eigs",dependencies$Q=["config","typed","matrix","addScalar","equal","subtract","abs","atan","cos","sin","multiplyScalar","divideScalar","inv","bignumber","multiply","add","larger","column","flatten","number","complex","sqrt","diag","qr","usolve","usolveAll","im","re","smaller","matrixFromColumns","dot"],createEigs=factory(name$Q,dependencies$Q,e=>{var{config:a,typed:t,matrix:r,addScalar:n,subtract:o,equal:i,abs:s,atan:u,cos:c,sin:l,multiplyScalar:p,divideScalar:m,inv:f,bignumber:h,multiply:d,add:y,larger:g,column:x,flatten:v,number:b,complex:w,sqrt:N,diag:M,qr:S,usolve:$,usolveAll:E,im:A,re:O,smaller:C,matrixFromColumns:T,dot:e}=e,D=createRealSymmetric({config:a,addScalar:n,subtract:o,column:x,flatten:v,equal:i,abs:s,atan:u,cos:c,sin:l,multiplyScalar:p,inv:f,bignumber:h,complex:w,multiply:d,add:y}),_=createComplexEigs({config:a,addScalar:n,subtract:o,multiply:d,multiplyScalar:p,flatten:v,divideScalar:m,sqrt:N,abs:s,bignumber:h,diag:M,qr:S,inv:f,usolve:$,usolveAll:E,equal:i,complex:w,larger:g,smaller:C,matrixFromColumns:T,dot:e});return t("eigs",{Array:function(e){return I(r(e))},"Array, number|BigNumber":function(e,t){return I(r(e),t)},Matrix:function(e){var{values:t,vectors:e}=I(e);return{values:r(t),vectors:r(e)}},"Matrix, number|BigNumber":function(e,t){var{values:e,vectors:t}=I(e,t);return{values:r(e),vectors:r(t)}}});function I(e,t){void 0===t&&(t=a.epsilon);var r=e.size();if(2!==r.length||r[0]!==r[1])throw new RangeError("Matrix must be square (size: "+format$1(r)+")");var n=e.toArray(),i=r[0];if(function(e,t,r){for(var n=0;n<t;n++)for(var i=0;i<t;i++)if(g(h(s(A(e[n][i]))),r))return!1;return!0}(n,i,t)&&(function(e,t){for(var r=0;r<t;r++)for(var n=0;n<t;n++)e[r][n]=O(e[r][n])}(n,i),function(e,t,r){for(var n=0;n<t;n++)for(var i=n;i<t;i++)if(g(h(s(o(e[n][i],e[i][n]))),r))return!1;return!0}(n,i,t))){r=R(e,n,i);return D(n,i,t,r)}e=R(e,n,i);return _(n,i,t,e)}function R(e,t,r){e=e.datatype();if("number"===e||"BigNumber"===e||"Complex"===e)return e;for(var n=!1,i=!1,a=!1,o=0;o<r;o++)for(var s=0;s<r;s++){var u=t[o][s];if(isNumber(u)||isFraction(u))n=!0;else if(isBigNumber(u))i=!0;else{if(!isComplex(u))throw TypeError("Unsupported type in Matrix: "+typeOf$1(u));a=!0}}if(i&&a&&console.warn("Complex BigNumbers not supported, this operation will lose precission."),a){for(var c=0;c<r;c++)for(var l=0;l<r;l++)t[c][l]=w(t[c][l]);return"Complex"}if(i){for(var p=0;p<r;p++)for(var m=0;m<r;m++)t[p][m]=h(t[p][m]);return"BigNumber"}if(n){for(var f=0;f<r;f++)for(var d=0;d<r;d++)t[f][d]=b(t[f][d]);return"number"}throw TypeError("Matrix contains unsupported types only.")}}),name$P="expm",dependencies$P=["typed","abs","add","identity","inv","multiply"],createExpm=factory(name$P,dependencies$P,e=>{var{typed:e,abs:d,add:h,identity:y,inv:g,multiply:x}=e;return e(name$P,{Matrix:function(e){var t=e.size();if(2!==t.length||t[0]!==t[1])throw new RangeError("Matrix must be square (size: "+format$1(t)+")");for(var r=t[0],t=function(e,t){for(var r=0;r<30;r++)for(var n=0;n<=r;n++){var i=r-n;if(function(e,t,r){for(var n=1,i=2;i<=t;i++)n*=i;for(var a=n,o=t+1;o<=2*t;o++)a*=o;var s=a*(2*t+1);return 8*Math.pow(e/Math.pow(2,r),2*t)*n*n/(a*s)}(e,n,i)<t)return{q:n,j:i}}throw new Error("Could not find acceptable parameters to compute the matrix exponential (try increasing maxSearchSize in expm.js)")}(function(e){for(var t=e.size()[0],r=0,n=0;n<t;n++){for(var i=0,a=0;a<t;a++)i+=d(e.get([n,a]));r=Math.max(i,r)}return r}(e),1e-15),n=t.q,i=t.j,a=x(e,Math.pow(2,-i)),o=y(r),s=y(r),u=1,c=a,l=-1,p=1;p<=n;p++)1<p&&(c=x(c,a),l=-l),o=h(o,x(u=u*(n-p+1)/((2*n-p+1)*p),c)),s=h(s,x(u*l,c));for(var m=x(g(s),o),f=0;f<i;f++)m=x(m,m);return isSparseMatrix(e)?e.createSparseMatrix(m):m}})}),name$O="sqrtm",dependencies$O=["typed","abs","add","multiply","sqrt","subtract","inv","size","max","identity"],createSqrtm=factory(name$O,dependencies$O,e=>{var{typed:e,abs:a,add:o,multiply:s,sqrt:r,subtract:u,inv:c,size:l,max:p,identity:m}=e;return e(name$O,{"Array | Matrix":function(e){var t=isMatrix(e)?e.size():arraySize(e);switch(t.length){case 1:if(1===t[0])return r(e);throw new RangeError("Matrix must be square (size: "+format$1(t)+")");case 2:if(t[0]===t[1])return function(e){var t=0,r=e,n=m(l(e));do{var i=r,r=s(.5,o(i,c(n))),n=s(.5,o(n,c(i)));if(1e-6<(i=p(a(u(r,i))))&&1e3<++t)throw new Error("computing square root of matrix: iterative method could not converge")}while(1e-6<i);return r}(e);throw new RangeError("Matrix must be square (size: "+format$1(t)+")");default:throw new RangeError("Matrix must be at most two dimensional (size: "+format$1(t)+")")}}})}),name$N="divide",dependencies$N=["typed","matrix","multiply","equalScalar","divideScalar","inv"],createDivide=factory(name$N,dependencies$N,e=>{var{typed:t,matrix:r,multiply:n,equalScalar:e,divideScalar:i,inv:a}=e,o=createAlgorithm11({typed:t,equalScalar:e}),s=createAlgorithm14({typed:t});return t("divide",extend({"Array | Matrix, Array | Matrix":function(e,t){return n(e,a(t))},"DenseMatrix, any":function(e,t){return s(e,t,i,!1)},"SparseMatrix, any":function(e,t){return o(e,t,i,!1)},"Array, any":function(e,t){return s(r(e),t,i,!1).valueOf()},"any, Array | Matrix":function(e,t){return n(e,a(t))}},i.signatures))}),name$M="distance",dependencies$M=["typed","addScalar","subtract","divideScalar","multiplyScalar","unaryMinus","sqrt","abs"],createDistance=factory(name$M,dependencies$M,e=>{var{typed:e,addScalar:c,subtract:l,multiplyScalar:p,divideScalar:m,unaryMinus:i,sqrt:f,abs:a}=e;return e(name$M,{"Array, Array, Array":function(e,t,r){if(2!==e.length||2!==t.length||2!==r.length)throw new TypeError("Invalid Arguments: Try again");if(!o(e))throw new TypeError("Array with 2 numbers or BigNumbers expected for first argument");if(!o(t))throw new TypeError("Array with 2 numbers or BigNumbers expected for second argument");if(!o(r))throw new TypeError("Array with 2 numbers or BigNumbers expected for third argument");var n=m(l(r[1],r[0]),l(t[1],t[0])),r=p(p(n,n),t[0]),n=i(p(n,t[0])),t=e[1];return d(e[0],e[1],r,n,t)},"Object, Object, Object":function(e,t,r){if(2!==Object.keys(e).length||2!==Object.keys(t).length||2!==Object.keys(r).length)throw new TypeError("Invalid Arguments: Try again");if(!o(e))throw new TypeError("Values of pointX and pointY should be numbers or BigNumbers");if(!o(t))throw new TypeError("Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers");if(!o(r))throw new TypeError("Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers");if("pointX"in e&&"pointY"in e&&"lineOnePtX"in t&&"lineOnePtY"in t&&"lineTwoPtX"in r&&"lineTwoPtY"in r){var n=m(l(r.lineTwoPtY,r.lineTwoPtX),l(t.lineOnePtY,t.lineOnePtX)),r=p(p(n,n),t.lineOnePtX),n=i(p(n,t.lineOnePtX)),t=e.pointX;return d(e.pointX,e.pointY,r,n,t)}throw new TypeError("Key names do not match")},"Array, Array":function(e,t){if(2===e.length&&3===t.length){if(!o(e))throw new TypeError("Array with 2 numbers or BigNumbers expected for first argument");if(!r(t))throw new TypeError("Array with 3 numbers or BigNumbers expected for second argument");return d(e[0],e[1],t[0],t[1],t[2])}if(3===e.length&&6===t.length){if(!r(e))throw new TypeError("Array with 3 numbers or BigNumbers expected for first argument");if(!s(t))throw new TypeError("Array with 6 numbers or BigNumbers expected for second argument");return h(e[0],e[1],e[2],t[0],t[1],t[2],t[3],t[4],t[5])}if(e.length===t.length&&0<e.length){if(!n(e))throw new TypeError("All values of an array should be numbers or BigNumbers");if(!n(t))throw new TypeError("All values of an array should be numbers or BigNumbers");return y(e,t)}throw new TypeError("Invalid Arguments: Try again")},"Object, Object":function(e,t){if(2===Object.keys(e).length&&3===Object.keys(t).length){if(!o(e))throw new TypeError("Values of pointX and pointY should be numbers or BigNumbers");if(!r(t))throw new TypeError("Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers");if("pointX"in e&&"pointY"in e&&"xCoeffLine"in t&&"yCoeffLine"in t&&"constant"in t)return d(e.pointX,e.pointY,t.xCoeffLine,t.yCoeffLine,t.constant);throw new TypeError("Key names do not match")}if(3===Object.keys(e).length&&6===Object.keys(t).length){if(!r(e))throw new TypeError("Values of pointX, pointY and pointZ should be numbers or BigNumbers");if(!s(t))throw new TypeError("Values of x0, y0, z0, a, b and c should be numbers or BigNumbers");if("pointX"in e&&"pointY"in e&&"x0"in t&&"y0"in t&&"z0"in t&&"a"in t&&"b"in t&&"c"in t)return h(e.pointX,e.pointY,e.pointZ,t.x0,t.y0,t.z0,t.a,t.b,t.c);throw new TypeError("Key names do not match")}if(2===Object.keys(e).length&&2===Object.keys(t).length){if(!o(e))throw new TypeError("Values of pointOneX and pointOneY should be numbers or BigNumbers");if(!o(t))throw new TypeError("Values of pointTwoX and pointTwoY should be numbers or BigNumbers");if("pointOneX"in e&&"pointOneY"in e&&"pointTwoX"in t&&"pointTwoY"in t)return y([e.pointOneX,e.pointOneY],[t.pointTwoX,t.pointTwoY]);throw new TypeError("Key names do not match")}if(3!==Object.keys(e).length||3!==Object.keys(t).length)throw new TypeError("Invalid Arguments: Try again");if(!r(e))throw new TypeError("Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers");if(!r(t))throw new TypeError("Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers");if("pointOneX"in e&&"pointOneY"in e&&"pointOneZ"in e&&"pointTwoX"in t&&"pointTwoY"in t&&"pointTwoZ"in t)return y([e.pointOneX,e.pointOneY,e.pointOneZ],[t.pointTwoX,t.pointTwoY,t.pointTwoZ]);throw new TypeError("Key names do not match")},Array:function(e){if(!function(e){if(2===e[0].length&&t(e[0][0])&&t(e[0][1])){if(e.some(e=>2!==e.length||!t(e[0])||!t(e[1])))return!1}else{if(!(3===e[0].length&&t(e[0][0])&&t(e[0][1])&&t(e[0][2])))return!1;if(e.some(e=>3!==e.length||!t(e[0])||!t(e[1])||!t(e[2])))return!1}return!0}(e))throw new TypeError("Incorrect array format entered for pairwise distance calculation");return function(e){for(var t=[],r=[],n=[],i=0;i<e.length-1;i++)for(var a=i+1;a<e.length;a++)2===e[0].length?(r=[e[i][0],e[i][1]],n=[e[a][0],e[a][1]]):3===e[0].length&&(r=[e[i][0],e[i][1],e[i][2]],n=[e[a][0],e[a][1],e[a][2]]),t.push(y(r,n));return t}(e)}});function t(e){return"number"==typeof e||isBigNumber(e)}function o(e){return t((e=e.constructor!==Array?u(e):e)[0])&&t(e[1])}function r(e){return t((e=e.constructor!==Array?u(e):e)[0])&&t(e[1])&&t(e[2])}function n(e){return(e=!Array.isArray(e)?u(e):e).every(t)}function s(e){return t((e=e.constructor!==Array?u(e):e)[0])&&t(e[1])&&t(e[2])&&t(e[3])&&t(e[4])&&t(e[5])}function u(e){for(var t=Object.keys(e),r=[],n=0;n<t.length;n++)r.push(e[t[n]]);return r}function d(e,t,r,n,i){i=a(c(c(p(r,e),p(n,t)),i)),n=f(c(p(r,r),p(n,n)));return m(i,n)}function h(e,t,r,n,i,a,o,s,u){t=[l(p(l(i,t),u),p(l(a,r),s)),l(p(l(a,r),o),p(l(n,e),u)),l(p(l(n,e),s),p(l(i,t),o))],t=f(c(c(p(t[0],t[0]),p(t[1],t[1])),p(t[2],t[2]))),u=f(c(c(p(o,o),p(s,s)),p(u,u)));return m(t,u)}function y(e,t){for(var r,n=e.length,i=0,a=0;a<n;a++)r=l(e[a],t[a]),i=c(p(r,r),i);return f(i)}}),name$L="intersect",dependencies$L=["typed","config","abs","add","addScalar","matrix","multiply","multiplyScalar","divideScalar","subtract","smaller","equalScalar","flatten"],createIntersect=factory(name$L,dependencies$L,e=>{var{typed:e,config:g,abs:x,add:v,addScalar:b,matrix:i,multiply:w,multiplyScalar:N,divideScalar:M,subtract:S,smaller:$,equalScalar:E,flatten:t}=e;return e("intersect",{"Array, Array, Array":n,"Array, Array, Array, Array":a,"Matrix, Matrix, Matrix":function(e,t,r){r=n(e.valueOf(),t.valueOf(),r.valueOf());return null===r?null:i(r)},"Matrix, Matrix, Matrix, Matrix":function(e,t,r,n){n=a(e.valueOf(),t.valueOf(),r.valueOf(),n.valueOf());return null===n?null:i(n)}});function n(e,t,r){if(e=A(e),t=A(t),r=A(r),!C(e))throw new TypeError("Array with 3 numbers or BigNumbers expected for first argument");if(!C(t))throw new TypeError("Array with 3 numbers or BigNumbers expected for second argument");if(!(4===(m=r).length&&f(m[0])&&f(m[1])&&f(m[2])&&f(m[3])))throw new TypeError("Array with 4 numbers expected as third argument");var n,i,a,o,s,u,c,l,p,m;return n=e[0],i=e[1],a=e[2],o=t[0],s=t[1],u=t[2],c=r[0],l=r[1],p=r[2],m=r[3],e=N(n,c),t=N(o,c),r=N(i,l),c=N(s,l),l=N(a,p),p=N(u,p),m=S(S(S(m,e),r),l),l=S(S(S(b(b(t,c),p),e),r),l),l=M(m,l),n=b(n,N(l,S(o,n))),i=b(i,N(l,S(s,i))),a=b(a,N(l,S(u,a))),[n,i,a]}function a(e,t,r,n){if(e=A(e),t=A(t),r=A(r),n=A(n),2===e.length){if(!O(e))throw new TypeError("Array with 2 numbers or BigNumbers expected for first argument");if(!O(t))throw new TypeError("Array with 2 numbers or BigNumbers expected for second argument");if(!O(r))throw new TypeError("Array with 2 numbers or BigNumbers expected for third argument");if(!O(n))throw new TypeError("Array with 2 numbers or BigNumbers expected for fourth argument");return function(e,t,r,n){var i=e,a=r,o=S(i,t),s=S(a,n),e=S(N(o[0],s[1]),N(s[0],o[1]));if($(x(e),g.epsilon))return null;r=N(s[0],i[1]),t=N(s[1],i[0]),n=N(s[0],a[1]),a=N(s[1],a[0]),e=M(b(S(S(r,t),n),a),e);return v(w(o,e),i)}(e,t,r,n)}if(3!==e.length)throw new TypeError("Arrays with two or thee dimensional points expected");if(!C(e))throw new TypeError("Array with 3 numbers or BigNumbers expected for first argument");if(!C(t))throw new TypeError("Array with 3 numbers or BigNumbers expected for second argument");if(!C(r))throw new TypeError("Array with 3 numbers or BigNumbers expected for third argument");if(!C(n))throw new TypeError("Array with 3 numbers or BigNumbers expected for fourth argument");return i=e[0],a=e[1],o=e[2],s=t[0],u=t[1],c=t[2],l=r[0],p=r[1],m=r[2],f=n[0],d=n[1],h=n[2],y=T(i,l,f,l,a,p,d,p,o,m,h,m),e=T(f,l,s,i,d,p,u,a,h,m,c,o),t=T(i,l,s,i,a,p,u,a,o,m,c,o),r=T(f,l,f,l,d,p,d,p,h,m,h,m),n=T(s,i,s,i,u,a,u,a,c,o,c,o),n=M(S(N(y,e),N(t,r)),S(N(n,r),N(e,e))),r=M(b(y,N(n,e)),r),i=b(i,N(n,S(s,i))),a=b(a,N(n,S(u,a))),o=b(o,N(n,S(c,o))),l=b(l,N(r,S(f,l))),p=b(p,N(r,S(d,p))),m=b(m,N(r,S(h,m))),E(i,l)&&E(a,p)&&E(o,m)?[i,a,o]:null;var i,a,o,s,u,c,l,p,m,f,d,h,y}function A(e){return 1===e.length?e[0]:1<e.length&&Array.isArray(e[0])&&e.every(e=>Array.isArray(e)&&1===e.length)?t(e):e}function f(e){return"number"==typeof e||isBigNumber(e)}function O(e){return 2===e.length&&f(e[0])&&f(e[1])}function C(e){return 3===e.length&&f(e[0])&&f(e[1])&&f(e[2])}function T(e,t,r,n,i,a,o,s,u,c,l,p){n=N(S(e,t),S(r,n)),s=N(S(i,a),S(o,s)),p=N(S(u,c),S(l,p));return b(b(n,s),p)}}),name$K="sum",dependencies$K=["typed","config","add","numeric"],createSum=factory(name$K,dependencies$K,e=>{var{typed:e,config:t,add:n,numeric:i}=e;return e(name$K,{"Array | Matrix":r,"Array | Matrix, number | BigNumber":function(e,t){try{return reduce(e,t,n)}catch(e){throw improveErrorMessage(e,"sum")}},"...":function(e){if(containsCollections(e))throw new TypeError("Scalar values expected in function sum");return r(e)}});function r(e){var r;return deepForEach(e,function(t){try{r=void 0===r?t:n(r,t)}catch(e){throw improveErrorMessage(e,"sum",t)}}),r="string"==typeof(r=void 0===r?i(0,t.number):r)?i(r,t.number):r}}),name$J="mean",dependencies$J=["typed","add","divide"],createMean=factory(name$J,dependencies$J,e=>{var{typed:e,add:i,divide:a}=e;return e(name$J,{"Array | Matrix":t,"Array | Matrix, number | BigNumber":function(e,t){try{var r=reduce(e,t,i),n=Array.isArray(e)?arraySize(e):e.size();return a(r,n[t])}catch(e){throw improveErrorMessage(e,"mean")}},"...":function(e){if(containsCollections(e))throw new TypeError("Scalar values expected in function mean");return t(e)}});function t(e){var r,n=0;if(deepForEach(e,function(t){try{r=void 0===r?t:i(r,t),n++}catch(e){throw improveErrorMessage(e,"mean",t)}}),0===n)throw new Error("Cannot calculate the mean of an empty array");return a(r,n)}}),name$I="median",dependencies$I=["typed","add","divide","compare","partitionSelect"],createMedian=factory(name$I,dependencies$I,e=>{var{typed:e,add:r,divide:n,compare:s,partitionSelect:u}=e;function t(e){try{var t=(e=flatten$1(e.valueOf())).length;if(0===t)throw new Error("Cannot calculate median of an empty array");if(t%2==0){for(var r=t/2-1,n=u(e,1+r),i=e[r],a=0;a<r;++a)0<s(e[a],i)&&(i=e[a]);return l(i,n)}var o=u(e,(t-1)/2);return c(o)}catch(e){throw improveErrorMessage(e,"median")}}var c=e({"number | BigNumber | Complex | Unit":function(e){return e}}),l=e({"number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit":function(e,t){return n(r(e,t),2)}});return e(name$I,{"Array | Matrix":t,"Array | Matrix, number | BigNumber":function(e,t){throw new Error("median(A, dim) is not yet supported")},"...":function(e){if(containsCollections(e))throw new TypeError("Scalar values expected in function median");return t(e)}})}),name$H="mad",dependencies$H=["typed","abs","map","median","subtract"],createMad=factory(name$H,dependencies$H,e=>{var{typed:e,abs:r,map:n,median:i,subtract:a}=e;return e(name$H,{"Array | Matrix":t,"...":t});function t(e){if(0===(e=flatten$1(e.valueOf())).length)throw new Error("Cannot calculate median absolute deviation (mad) of an empty array");try{var t=i(e);return i(n(e,function(e){return r(a(e,t))}))}catch(e){throw e instanceof TypeError&&-1!==e.message.indexOf("median")?new TypeError(e.message.replace("median","mad")):improveErrorMessage(e,"mad")}}}),DEFAULT_NORMALIZATION="unbiased",name$G="variance",dependencies$G=["typed","add","subtract","multiply","divide","apply","isNaN"],createVariance=factory(name$G,dependencies$G,e=>{var{typed:e,add:o,subtract:s,multiply:u,divide:c,apply:n,isNaN:l}=e;return e(name$G,{"Array | Matrix":function(e){return i(e,DEFAULT_NORMALIZATION)},"Array | Matrix, string":i,"Array | Matrix, number | BigNumber":function(e,t){return r(e,t,DEFAULT_NORMALIZATION)},"Array | Matrix, number | BigNumber, string":r,"...":function(e){return i(e,DEFAULT_NORMALIZATION)}});function i(e,t){var r=0;if(0===e.length)throw new SyntaxError("Function variance requires one or more parameters (0 provided)");if(deepForEach(e,function(t){try{i=void 0===i?t:o(i,t),r++}catch(e){throw improveErrorMessage(e,"variance",t)}}),0===r)throw new Error("Cannot calculate variance of an empty array");var n=c(i,r),i=void 0;if(deepForEach(e,function(e){e=s(e,n);i=void 0===i?u(e,e):o(i,u(e,e))}),l(i))return i;switch(t){case"uncorrected":return c(i,r);case"biased":return c(i,r+1);case"unbiased":var a=isBigNumber(i)?i.mul(0):0;return 1===r?a:c(i,r-1);default:throw new Error('Unknown normalization "'+t+'". Choose "unbiased" (default), "uncorrected", or "biased".')}}function r(e,t,r){try{if(0===e.length)throw new SyntaxError("Function variance requires one or more parameters (0 provided)");return n(e,t,e=>i(e,r))}catch(e){throw improveErrorMessage(e,"variance")}}}),name$F="quantileSeq",dependencies$F=["typed","add","multiply","partitionSelect","compare"],createQuantileSeq=factory(name$F,dependencies$F,e=>{var{typed:e,add:y,multiply:g,partitionSelect:x,compare:v}=e;function d(e,t,r){var n=flatten$1(e),i=n.length;if(0===i)throw new Error("Cannot calculate quantile of an empty sequence");if(isNumber(t)){var a=t*(i-1),o=a%1;if(0==o){e=r?n[a]:x(n,a);return b(e),e}var s=Math.floor(a);if(r)c=n[s],u=n[s+1];else for(var u=x(n,s+1),c=n[s],l=0;l<s;++l)0<v(n[l],c)&&(c=n[l]);return b(c),b(u),y(g(c,1-o),g(u,o))}if((i=t.times(i-1)).isInteger()){var i=i.toNumber(),p=r?n[i]:x(n,i);return b(p),p}var p=i.floor(),i=i.minus(p),m=p.toNumber();if(r)d=n[m],f=n[m+1];else for(var f=x(n,m+1),d=n[m],h=0;h<m;++h)0<v(n[h],d)&&(d=n[h]);b(d),b(f);r=new i.constructor(1);return y(g(d,r.minus(i)),g(f,i))}var b=e({"number | BigNumber | Unit":function(e){return e}});return function(e,t,r){var n,i;if(arguments.length<2||3<arguments.length)throw new SyntaxError("Function quantileSeq requires two or three parameters");if(isCollection(e)){if("boolean"!=typeof(r=r||!1))throw new TypeError("Unexpected type of argument in function quantileSeq");if(n=e.valueOf(),isNumber(t)){if(t<0)throw new Error("N/prob must be non-negative");if(t<=1)return d(n,t,r);if(1<t){if(!isInteger$1(t))throw new Error("N must be a positive integer");for(var a=t+1,o=new Array(t),s=0;s<t;)o[s]=d(n,++s/a,r);return o}}if(isBigNumber(t)){var u=t.constructor;if(t.isNegative())throw new Error("N/prob must be non-negative");if(i=new u(1),t.lte(i))return new u(d(n,t,r));if(t.gt(i)){if(!t.isInteger())throw new Error("N must be a positive integer");var c=t.toNumber();if(4294967295<c)throw new Error("N must be less than or equal to 2^32-1, as that is the maximum length of an Array");var l=new u(c+1);o=new Array(c);for(var p=0;p<c;)o[p]=new u(d(n,new u(++p).div(l),r));return o}}if(Array.isArray(t)){o=new Array(t.length);for(var m=0;m<o.length;++m){var f=t[m];if(isNumber(f)){if(f<0||1<f)throw new Error("Probability must be between 0 and 1, inclusive")}else{if(!isBigNumber(f))throw new TypeError("Unexpected type of argument in function quantileSeq");if(i=new f.constructor(1),f.isNegative()||f.gt(i))throw new Error("Probability must be between 0 and 1, inclusive")}o[m]=d(n,f,r)}return o}throw new TypeError("Unexpected type of argument in function quantileSeq")}throw new TypeError("Unexpected type of argument in function quantileSeq")}}),name$E="std",dependencies$E=["typed","sqrt","variance"],createStd=factory(name$E,dependencies$E,e=>{var{typed:e,sqrt:r,variance:n}=e;return e(name$E,{"Array | Matrix":t,"Array | Matrix, string":t,"Array | Matrix, number | BigNumber":t,"Array | Matrix, number | BigNumber, string":t,"...":function(e){return t(e)}});function t(e,t){if(0===e.length)throw new SyntaxError("Function std requires one or more parameters (0 provided)");try{return r(n.apply(null,arguments))}catch(e){throw e instanceof TypeError&&-1!==e.message.indexOf(" variance")?new TypeError(e.message.replace(" variance"," std")):e}}}),name$D="combinations",dependencies$D=["typed"],createCombinations=factory(name$D,dependencies$D,e=>{var e=e["typed"];return e(name$D,{"number, number":combinationsNumber,"BigNumber, BigNumber":function(e,t){var r,n,i=e.constructor,a=e.minus(t),o=new i(1);if(!isPositiveInteger$2(e)||!isPositiveInteger$2(t))throw new TypeError("Positive integer value expected in function combinations");if(t.gt(e))throw new TypeError("k must be less than n in function combinations");if(r=o,t.lt(a))for(n=o;n.lte(a);n=n.plus(o))r=r.times(t.plus(n)).dividedBy(n);else for(n=o;n.lte(t);n=n.plus(o))r=r.times(a.plus(n)).dividedBy(n);return r}})});function isPositiveInteger$2(e){return e.isInteger()&&e.gte(0)}var name$C="combinationsWithRep",dependencies$C=["typed"],createCombinationsWithRep=factory(name$C,dependencies$C,e=>{var e=e["typed"];return e(name$C,{"number, number":function(e,t){if(!isInteger$1(e)||e<0)throw new TypeError("Positive integer value expected in function combinationsWithRep");if(!isInteger$1(t)||t<0)throw new TypeError("Positive integer value expected in function combinationsWithRep");if(e<1)throw new TypeError("k must be less than or equal to n + k - 1");return t<e-1?product(e,e+t-1)/product(1,t):product(t+1,e+t-1)/product(1,e-1)},"BigNumber, BigNumber":function(e,t){var r,n,i=new e.constructor(1),a=e.minus(i);if(!isPositiveInteger$1(e)||!isPositiveInteger$1(t))throw new TypeError("Positive integer value expected in function combinationsWithRep");if(e.lt(i))throw new TypeError("k must be less than or equal to n + k - 1 in function combinationsWithRep");if(r=i,t.lt(a))for(n=i;n.lte(a);n=n.plus(i))r=r.times(t.plus(n)).dividedBy(n);else for(n=i;n.lte(t);n=n.plus(i))r=r.times(a.plus(n)).dividedBy(n);return r}})});function isPositiveInteger$1(e){return e.isInteger()&&e.gte(0)}var name$B="gamma",dependencies$B=["typed","config","multiplyScalar","pow","BigNumber","Complex"],createGamma=factory(name$B,dependencies$B,e=>{var{typed:e,config:o,multiplyScalar:u,pow:c,BigNumber:s,Complex:l}=e;return e(name$B,{number:gammaNumber,Complex:function(e){if(0===e.im)return this(e.re);e=new l(e.re-1,e.im);for(var t=new l(gammaP[0],0),r=1;r<gammaP.length;++r){var n=e.re+r,i=n*n+e.im*e.im;0!=i?(t.re+=gammaP[r]*n/i,t.im+=-(gammaP[r]*e.im)/i):t.re=gammaP[r]<0?-1/0:1/0}var a=new l(e.re+gammaG+.5,e.im),o=Math.sqrt(2*Math.PI);e.re+=.5;var s=c(a,e);0===s.im?s.re*=o:(0===s.re||(s.re*=o),s.im*=o);o=Math.exp(-a.re);return a.re=o*Math.cos(-a.im),a.im=o*Math.sin(-a.im),u(u(s,a),t)},BigNumber:function(e){if(e.isInteger())return e.isNegative()||e.isZero()?new s(1/0):function e(t){if(t<8)return new s([1,1,2,6,24,120,720,5040][t]);var r=o.precision+(0|Math.log(t.toNumber()));r=s.clone({precision:r});if(t%2==1)return t.times(e(new s(t-1)));var n=t;var i=new r(t);var a=t.toNumber();for(;2<n;)a+=n-=2,i=i.times(a);return new s(i.toPrecision(s.precision))}(e.minus(1));if(!e.isFinite())return new s(e.isNegative()?NaN:1/0);throw new Error("Integer BigNumber expected")},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$A="factorial",dependencies$A=["typed","gamma"],createFactorial=factory(name$A,dependencies$A,e=>{var{typed:e,gamma:t}=e;return e(name$A,{number:function(e){if(e<0)throw new Error("Value must be non-negative");return t(e+1)},BigNumber:function(e){if(e.isNegative())throw new Error("Value must be non-negative");return t(e.plus(1))},"Array | Matrix":function(e){return deepMap(e,this)}})}),name$z="kldivergence",dependencies$z=["typed","matrix","divide","sum","multiply","dotDivide","log","isNumeric"],createKldivergence=factory(name$z,dependencies$z,e=>{var{typed:e,matrix:r,divide:i,sum:a,multiply:o,dotDivide:s,log:u,isNumeric:c}=e;return e(name$z,{"Array, Array":function(e,t){return n(r(e),r(t))},"Matrix, Array":function(e,t){return n(e,r(t))},"Array, Matrix":function(e,t){return n(r(e),t)},"Matrix, Matrix":n});function n(e,t){var r=t.size().length,n=e.size().length;if(1<r)throw new Error("first object must be one dimensional");if(1<n)throw new Error("second object must be one dimensional");if(r!==n)throw new Error("Length of two vectors must be equal");if(0===a(e))throw new Error("Sum of elements in first object must be non zero");if(0===a(t))throw new Error("Sum of elements in second object must be non zero");e=i(e,a(e)),t=i(t,a(t)),t=a(o(e,u(s(e,t))));return c(t)?t:Number.NaN}}),name$y="multinomial",dependencies$y=["typed","add","divide","multiply","factorial","isInteger","isPositive"],createMultinomial=factory(name$y,dependencies$y,e=>{var{typed:e,add:n,divide:i,multiply:a,factorial:o,isInteger:s,isPositive:u}=e;return e(name$y,{"Array | Matrix":function(e){var t=0,r=1;return deepForEach(e,function(e){if(!s(e)||!u(e))throw new TypeError("Positive integer value expected in function multinomial");t=n(t,e),r=a(r,o(e))}),i(o(t),r)}})}),name$x="permutations",dependencies$x=["typed","factorial"],createPermutations=factory(name$x,dependencies$x,e=>{var{typed:t,factorial:e}=e;return t(name$x,{"number | BigNumber":e,"number, number":function(e,t){if(!isInteger$1(e)||e<0)throw new TypeError("Positive integer value expected in function permutations");if(!isInteger$1(t)||t<0)throw new TypeError("Positive integer value expected in function permutations");if(e<t)throw new TypeError("second argument k must be less than or equal to first argument n");return product(e-t+1,e)},"BigNumber, BigNumber":function(e,t){if(!isPositiveInteger(e)||!isPositiveInteger(t))throw new TypeError("Positive integer value expected in function permutations");if(t.gt(e))throw new TypeError("second argument k must be less than or equal to first argument n");for(var r=e.mul(0).add(1),n=e.minus(t).plus(1);n.lte(e);n=n.plus(1))r=r.times(n);return r}})});function isPositiveInteger(e){return e.isInteger()&&e.gte(0)}var alea=createCommonjsModule(function(e){!function(e,t){function i(e){var n,t=this,r=(n=4022871197,function(e){e=String(e);for(var t=0;t<e.length;t++){var r=.02519603282416938*(n+=e.charCodeAt(t));r-=n=r>>>0,n=(r*=n)>>>0,n+=4294967296*(r-=n)}return 2.3283064365386963e-10*(n>>>0)});t.next=function(){var e=2091639*t.s0+2.3283064365386963e-10*t.c;return t.s0=t.s1,t.s1=t.s2,t.s2=e-(t.c=0|e)},t.c=1,t.s0=r(" "),t.s1=r(" "),t.s2=r(" "),t.s0-=r(e),t.s0<0&&(t.s0+=1),t.s1-=r(e),t.s1<0&&(t.s1+=1),t.s2-=r(e),t.s2<0&&(t.s2+=1)}function a(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function r(e,t){var r=new i(e),t=t&&t.state,n=r.next;return n.int32=function(){return 4294967296*r.next()|0},n.double=function(){return n()+11102230246251565e-32*(2097152*n()|0)},n.quick=n,t&&("object"==typeof t&&a(t,r),n.state=function(){return a(r,{})}),n}e&&e.exports?e.exports=r:t&&t.amd?t(function(){return r}):this.alea=r}(e,!1)}),xor128=createCommonjsModule(function(e){!function(e,t){function n(e){var t=this,r="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:r+=e;for(var n=0;n<r.length+64;n++)t.x^=0|r.charCodeAt(n),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function r(e,t){var r=new n(e),e=t&&t.state,t=function(){return(r.next()>>>0)/4294967296};return t.double=function(){do{var e=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},t.int32=r.next,t.quick=t,e&&("object"==typeof e&&i(e,r),t.state=function(){return i(r,{})}),t}e&&e.exports?e.exports=r:t&&t.amd?t(function(){return r}):this.xor128=r}(e,!1)}),xorwow=createCommonjsModule(function(e){!function(e,t){function n(e){var t=this,r="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,e===((t.v=0)|e)?t.x=e:r+=e;for(var n=0;n<r.length+64;n++)t.x^=0|r.charCodeAt(n),n==r.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function r(e,t){var r=new n(e),e=t&&t.state,t=function(){return(r.next()>>>0)/4294967296};return t.double=function(){do{var e=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},t.int32=r.next,t.quick=t,e&&("object"==typeof e&&i(e,r),t.state=function(){return i(r,{})}),t}e&&e.exports?e.exports=r:t&&t.amd?t(function(){return r}):this.xorwow=r}(e,!1)}),xorshift7=createCommonjsModule(function(e){!function(e,t){function n(e){var i=this;i.next=function(){var e=i.x,t=i.i,r=e[t],n=(r^=r>>>7)^r<<24;return n^=(r=e[t+1&7])^r>>>10,n^=(r=e[t+3&7])^r>>>3,n^=(r=e[t+4&7])^r<<7,r=e[t+7&7],e[t]=n^=(r^=r<<13)^r<<9,i.i=t+1&7,n},function(e,t){var r,n=[];if(t===(0|t))n[0]=t;else for(t=""+t,r=0;r<t.length;++r)n[7&r]=n[7&r]<<15^t.charCodeAt(r)+n[r+1&7]<<13;for(;n.length<8;)n.push(0);for(r=0;r<8&&0===n[r];++r);for(8==r&&(n[7]=-1),e.x=n,e.i=0,r=256;0<r;--r)e.next()}(i,e)}function i(e,t){return t.x=e.x.slice(),t.i=e.i,t}function r(e,t){var r=new n(e=null==e?+new Date:e),e=t&&t.state,t=function(){return(r.next()>>>0)/4294967296};return t.double=function(){do{var e=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},t.int32=r.next,t.quick=t,e&&(e.x&&i(e,r),t.state=function(){return i(r,{})}),t}e&&e.exports?e.exports=r:t&&t.amd?t(function(){return r}):this.xorshift7=r}(e,!1)}),xor4096=createCommonjsModule(function(e){!function(e,t){function n(e){var a=this;a.next=function(){var e,t,r=a.w,n=a.X,i=a.i;return a.w=r=r+1640531527|0,t=n[i+34&127],e=n[i=i+1&127],t^=t<<13,e^=e<<17,t=n[i]=(t^=t>>>15)^(e^=e>>>12),a.i=i,t+(r^r>>>16)|0},function(e,t){var r,n,i,a,o,s=[],u=128;for(t===(0|t)?(n=t,t=null):(t+="\0",n=0,u=Math.max(u,t.length)),i=0,a=-32;a<u;++a)t&&(n^=t.charCodeAt((a+32)%t.length)),0===a&&(o=n),n^=n<<10,n^=n>>>15,n^=n<<4,n^=n>>>13,0<=a&&(i=0==(r=s[127&a]^=n+(o=o+1640531527|0))?i+1:0);for(128<=i&&(s[127&(t&&t.length||0)]=-1),i=127,a=512;0<a;--a)n=s[i+34&127],r=s[i=i+1&127],n^=n<<13,r^=r<<17,s[i]=(n^=n>>>15)^(r^=r>>>12);e.w=o,e.X=s,e.i=i}(a,e)}function i(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function r(e,t){var r=new n(e=null==e?+new Date:e),e=t&&t.state,t=function(){return(r.next()>>>0)/4294967296};return t.double=function(){do{var e=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},t.int32=r.next,t.quick=t,e&&(e.X&&i(e,r),t.state=function(){return i(r,{})}),t}e&&e.exports?e.exports=r:t&&t.amd?t(function(){return r}):this.xor4096=r}(e,!1)}),tychei=createCommonjsModule(function(e){!function(e,t){function n(e){var i=this,t="";i.next=function(){var e=(e=i.b)<<25^e>>>7^(t=i.c),t=t-(r=i.d)|0,r=r<<24^r>>>8^(n=i.a),n=n-e|0;return i.b=e=e<<20^e>>>12^t,i.c=t=t-r|0,i.d=r<<16^t>>>16^n,i.a=n-e|0},i.a=0,i.b=0,i.c=-1640531527,i.d=1367130551,e===Math.floor(e)?(i.a=e/4294967296|0,i.b=0|e):t+=e;for(var r=0;r<t.length+20;r++)i.b^=0|t.charCodeAt(r),i.next()}function i(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function r(e,t){var r=new n(e),e=t&&t.state,t=function(){return(r.next()>>>0)/4294967296};return t.double=function(){do{var e=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},t.int32=r.next,t.quick=t,e&&("object"==typeof e&&i(e,r),t.state=function(){return i(r,{})}),t}e&&e.exports?e.exports=r:t&&t.amd?t(function(){return r}):this.tychei=r}(e,!1)}),seedrandom$1=createCommonjsModule(function(t){!function(a,o,s){var u,c=256,l=s.pow(c,6),p=s.pow(2,52),m=2*p,f=c-1;function e(e,t,r){var n=[],e=y(function e(t,r){var n,i=[],a=typeof t;if(r&&"object"==a)for(n in t)try{i.push(e(t[n],r-1))}catch(e){}return i.length?i:"string"==a?t:t+"\0"}((t=1==t?{entropy:!0}:t||{}).entropy?[e,g(o)]:null==e?function(){try{return u&&(t=u.randomBytes)?t=t(c):(t=new Uint8Array(c),(a.crypto||a.msCrypto).getRandomValues(t)),g(t)}catch(e){var t=a.navigator,t=t&&t.plugins;return[+new Date,a,t,a.screen,g(o)]}}():e,3),n),i=new d(n),n=function(){for(var e=i.g(6),t=l,r=0;e<p;)e=(e+r)*c,t*=c,r=i.g(1);for(;m<=e;)e/=2,t/=2,r>>>=1;return(e+r)/t};return n.int32=function(){return 0|i.g(4)},n.quick=function(){return i.g(4)/4294967296},n.double=n,y(g(i.S),o),(t.pass||r||function(e,t,r,n){return n&&(n.S&&h(n,i),e.state=function(){return h(i,{})}),r?(s.random=e,t):e})(n,e,"global"in t?t.global:this==s,t.state)}function d(e){var t,r=e.length,o=this,n=0,i=o.i=o.j=0,a=o.S=[];for(r||(e=[r++]);n<c;)a[n]=n++;for(n=0;n<c;n++)a[n]=a[i=f&i+e[n%r]+(t=a[n])],a[i]=t;(o.g=function(e){for(var t,r=0,n=o.i,i=o.j,a=o.S;e--;)t=a[n=f&n+1],r=r*c+a[f&(a[n]=a[i=f&i+t])+(a[i]=t)];return o.i=n,o.j=i,r})(c)}function h(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function y(e,t){for(var r,n=e+"",i=0;i<n.length;)t[f&i]=f&(r^=19*t[f&i])+n.charCodeAt(i++);return g(t)}function g(e){return String.fromCharCode.apply(0,e)}if(y(s.random(),o),t.exports){t.exports=e;try{u=require$$0__default.default}catch(e){}}else s.seedrandom=e}("undefined"!=typeof self?self:commonjsGlobal,[],Math)});seedrandom$1.alea=alea,seedrandom$1.xor128=xor128,seedrandom$1.xorwow=xorwow,seedrandom$1.xorshift7=xorshift7,seedrandom$1.xor4096=xor4096,seedrandom$1.tychei=tychei;var seedrandom=seedrandom$1,singletonRandom=seedrandom(Date.now());function createRng(e){var t,r;return t=null===(r=e)?singletonRandom:seedrandom(String(r)),function(){return t()}}var name$w="pickRandom",dependencies$w=["typed","config","?on"],createPickRandom=factory(name$w,dependencies$w,e=>{var{typed:t,config:r,on:e}=e,h=createRng(r.randomSeed);return e&&e("config",function(e,t){e.randomSeed!==t.randomSeed&&(h=createRng(e.randomSeed))}),t(name$w,{"Array | Matrix":function(e){return n(e,{})},"Array | Matrix, Object":n,"Array | Matrix, number":function(e,t){return n(e,{number:t})},"Array | Matrix, Array | Matrix":function(e,t){return n(e,{weights:t})},"Array | Matrix, Array | Matrix, number":function(e,t,r){return n(e,{number:r,weights:t})},"Array | Matrix, number, Array | Matrix":function(e,t,r){return n(e,{number:t,weights:r})}});function n(e,t){var{number:r,weights:n,elementWise:i=!0}=t,a=void 0===r;a&&(r=1);t=isMatrix(e)?e.create:isMatrix(n)?n.create:null;e=e.valueOf(),n=n&&n.valueOf(),!0===i&&(e=flatten$1(e),n=flatten$1(n));var o=0;if(void 0!==n){if(n.length!==e.length)throw new Error("Weights must have the same length as possibles");for(var s=0,u=n.length;s<u;s++){if(!isNumber(n[s])||n[s]<0)throw new Error("Weights must be an array of positive numbers");o+=n[s]}}for(var c,l=e.length,p=[];p.length<r;){if(void 0===n)c=e[Math.floor(h()*l)];else for(var m=h()*o,f=0,d=e.length;f<d;f++)if((m-=n[f])<0){c=e[f];break}p.push(c)}return a?p[0]:t?t(p):p}});function randomMatrix(e,t){var r=[];if(1<(e=e.slice(0)).length)for(var n=0,i=e.shift();n<i;n++)r.push(randomMatrix(e,t));else for(var a=0,o=e.shift();a<o;a++)r.push(t());return r}var name$v="random",dependencies$v=["typed","config","?on"],createRandom=factory(name$v,dependencies$v,e=>{var{typed:t,config:r,on:e}=e,n=createRng(r.randomSeed);return e&&e("config",function(e,t){e.randomSeed!==t.randomSeed&&(n=createRng(e.randomSeed))}),t(name$v,{"":()=>a(0,1),number:e=>a(0,e),"number, number":(e,t)=>a(e,t),"Array | Matrix":e=>i(e,0,1),"Array | Matrix, number":(e,t)=>i(e,0,t),"Array | Matrix, number, number":(e,t,r)=>i(e,t,r)});function i(e,t,r){var n=randomMatrix(e.valueOf(),()=>a(t,r));return isMatrix(e)?e.create(n):n}function a(e,t){return e+n()*(t-e)}}),name$u="randomInt",dependencies$u=["typed","config","?on"],createRandomInt=factory(name$u,dependencies$u,e=>{var{typed:t,config:r,on:e}=e,n=createRng(r.randomSeed);return e&&e("config",function(e,t){e.randomSeed!==t.randomSeed&&(n=createRng(e.randomSeed))}),t(name$u,{"":()=>a(0,1),number:e=>a(0,e),"number, number":(e,t)=>a(e,t),"Array | Matrix":e=>i(e,0,1),"Array | Matrix, number":(e,t)=>i(e,0,t),"Array | Matrix, number, number":(e,t,r)=>i(e,t,r)});function i(e,t,r){var n=randomMatrix(e.valueOf(),()=>a(t,r));return isMatrix(e)?e.create(n):n}function a(e,t){return Math.floor(e+n()*(t-e))}}),name$t="stirlingS2",dependencies$t=["typed","addScalar","subtract","multiplyScalar","divideScalar","pow","factorial","combinations","isNegative","isInteger","larger"],createStirlingS2=factory(name$t,dependencies$t,e=>{var{typed:e,addScalar:u,subtract:c,multiplyScalar:l,divideScalar:p,pow:m,factorial:f,combinations:d,isNegative:h,isInteger:y,larger:g}=e;return e(name$t,{"number | BigNumber, number | BigNumber":function(e,t){if(!y(e)||h(e)||!y(t)||h(t))throw new TypeError("Non-negative integer value expected in function stirlingS2");if(g(t,e))throw new TypeError("k must be less than or equal to n in function stirlingS2");for(var r=f(t),n=0,i=0;i<=t;i++)var a=m(-1,c(t,i)),o=d(t,i),s=m(i,e),n=u(n,l(l(o,s),a));return p(n,r)}})}),name$s="bellNumbers",dependencies$s=["typed","addScalar","isNegative","isInteger","stirlingS2"],createBellNumbers=factory(name$s,dependencies$s,e=>{var{typed:e,addScalar:n,isNegative:i,isInteger:a,stirlingS2:o}=e;return e(name$s,{"number | BigNumber":function(e){if(!a(e)||i(e))throw new TypeError("Non-negative integer value expected in function bellNumbers");for(var t=0,r=0;r<=e;r++)t=n(t,o(e,r));return t}})}),name$r="catalan",dependencies$r=["typed","addScalar","divideScalar","multiplyScalar","combinations","isNegative","isInteger"],createCatalan=factory(name$r,dependencies$r,e=>{var{typed:e,addScalar:t,divideScalar:r,multiplyScalar:n,combinations:i,isNegative:a,isInteger:o}=e;return e(name$r,{"number | BigNumber":function(e){if(!o(e)||a(e))throw new TypeError("Non-negative integer value expected in function catalan");return r(i(n(e,2),e),t(e,1))}})}),name$q="composition",dependencies$q=["typed","addScalar","combinations","isNegative","isPositive","isInteger","larger"],createComposition=factory(name$q,dependencies$q,e=>{var{typed:e,addScalar:r,combinations:n,isPositive:i,isInteger:a,larger:o}=e;return e(name$q,{"number | BigNumber, number | BigNumber":function(e,t){if(!(a(e)&&i(e)&&a(t)&&i(t)))throw new TypeError("Positive integer value expected in function composition");if(o(t,e))throw new TypeError("k must be less than or equal to n in function composition");return n(r(e,-1),r(t,-1))}})}),name$p="simplifyUtil",dependencies$p=["FunctionNode","OperatorNode","SymbolNode"],createUtil=factory(name$p,dependencies$p,e=>{var{FunctionNode:r,OperatorNode:n,SymbolNode:i}=e,a={add:!0,multiply:!0},o={add:!0,multiply:!0};function s(e,t){if(!isOperatorNode(e))return!1;e=e.fn.toString();return t&&hasOwnProperty$1(t,e)&&hasOwnProperty$1(t[e],"associative")?t[e].associative:o[e]||!1}function u(e){function n(e){for(var t=0;t<e.args.length;t++){var r=e.args[t];isOperatorNode(r)&&i===r.op?n(r):a.push(r)}}var i,a=[];return s(e)?(i=e.op,n(e),a):e.args}function c(t){return isOperatorNode(t)?function(e){try{return new n(t.op,t.fn,e,t.implicit)}catch(e){return console.error(e),[]}}:function(e){return new r(new i(t.name),e)}}return{createMakeNodeFunction:c,isCommutative:function(e,t){return!isOperatorNode(e)||(e=e.fn.toString(),t&&hasOwnProperty$1(t,e)&&hasOwnProperty$1(t[e],"commutative")?t[e].commutative:a[e]||!1)},isAssociative:s,flatten:function e(t){if(!t.args||0===t.args.length)return t;t.args=u(t);for(var r=0;r<t.args.length;r++)e(t.args[r])},allChildren:u,unflattenr:function e(t){if(t.args&&0!==t.args.length){for(var r=c(t),n=t.args.length,i=0;i<n;i++)e(t.args[i]);if(2<n&&s(t)){for(var a=t.args.pop();0<t.args.length;)a=r([t.args.pop(),a]);t.args=a.args}}},unflattenl:function e(t){if(t.args&&0!==t.args.length){for(var r=c(t),n=t.args.length,i=0;i<n;i++)e(t.args[i]);if(2<n&&s(t)){for(var a=t.args.shift();0<t.args.length;)a=r([a,t.args.shift()]);t.args=a.args}}}}}),name$o="simplifyCore",dependencies$o=["equal","isZero","add","subtract","multiply","divide","pow","ConstantNode","OperatorNode","FunctionNode","ParenthesisNode"],createSimplifyCore=factory(name$o,dependencies$o,e=>{var{equal:s,isZero:u,add:c,subtract:l,multiply:p,divide:m,pow:f,ConstantNode:d,OperatorNode:h,FunctionNode:y,ParenthesisNode:g}=e,x=new d(0),v=new d(1);return function e(t){if(isOperatorNode(t)&&t.isUnary()){var r=e(t.args[0]);if("+"===t.op)return r;if("-"===t.op){if(isOperatorNode(r)){if(r.isUnary()&&"-"===r.op)return r.args[0];if(r.isBinary()&&"subtract"===r.fn)return new h("-","subtract",[r.args[1],r.args[0]])}return new h(t.op,t.fn,[r])}}else if(isOperatorNode(t)&&t.isBinary()){var n=e(t.args[0]),i=e(t.args[1]);if("+"===t.op){if(isConstantNode(n)){if(u(n.value))return i;if(isConstantNode(i))return new d(c(n.value,i.value))}return isConstantNode(i)&&u(i.value)?n:isOperatorNode(i)&&i.isUnary()&&"-"===i.op?new h("-","subtract",[n,i.args[0]]):new h(t.op,t.fn,i?[n,i]:[n])}if("-"===t.op){if(isConstantNode(n)&&i){if(isConstantNode(i))return new d(l(n.value,i.value));if(u(n.value))return new h("-","unaryMinus",[i])}if("subtract"===t.fn)return isConstantNode(i)&&u(i.value)?n:isOperatorNode(i)&&i.isUnary()&&"-"===i.op?e(new h("+","add",[n,i.args[0]])):new h(t.op,t.fn,[n,i])}else{if("*"===t.op){if(isConstantNode(n)){if(u(n.value))return x;if(s(n.value,1))return i;if(isConstantNode(i))return new d(p(n.value,i.value))}if(isConstantNode(i)){if(u(i.value))return x;if(s(i.value,1))return n;if(isOperatorNode(n)&&n.isBinary()&&n.op===t.op&&isConstantNode(r=n.args[0])){var a=new d(p(r.value,i.value));return new h(t.op,t.fn,[a,n.args[1]],t.implicit)}return new h(t.op,t.fn,[i,n],t.implicit)}return new h(t.op,t.fn,[n,i],t.implicit)}if("/"===t.op){if(isConstantNode(n)){if(u(n.value))return x;if(isConstantNode(i)&&(s(i.value,1)||s(i.value,2)||s(i.value,4)))return new d(m(n.value,i.value))}return new h(t.op,t.fn,[n,i])}if("^"===t.op){if(isConstantNode(i)){if(u(i.value))return v;if(s(i.value,1))return n;if(isConstantNode(n))return new d(f(n.value,i.value));if(isOperatorNode(n)&&n.isBinary()&&"^"===n.op&&isConstantNode(a=n.args[1]))return new h(t.op,t.fn,[n.args[0],new d(p(a.value,i.value))])}return new h(t.op,t.fn,[n,i])}}}else{if(isParenthesisNode(t)){var o=e(t.content);return isParenthesisNode(o)||isSymbolNode(o)||isConstantNode(o)?o:new g(o)}if(isFunctionNode(t))return o=t.args.map(e).map(function(e){return isParenthesisNode(e)?e.content:e}),new y(e(t.fn),o)}return t}}),name$n="simplifyConstant",dependencies$n=["typed","config","mathWithTransform","?fraction","?bignumber","ConstantNode","OperatorNode","FunctionNode","SymbolNode"],createSimplifyConstant=factory(name$n,dependencies$n,e=>{var{typed:t,config:r,mathWithTransform:l,fraction:n,bignumber:i,ConstantNode:a,OperatorNode:o,FunctionNode:p,SymbolNode:e}=e,{isCommutative:m,isAssociative:f,allChildren:d,createMakeNodeFunction:h}=createUtil({FunctionNode:p,OperatorNode:o,SymbolNode:e});function y(t,r,n){try{return x(l[t].apply(null,r),n)}catch(e){return r=r.map(function(e){return isFraction(e)?e.valueOf():e}),x(l[t].apply(null,r),n)}}var g=t({Fraction:function(e){var t=e.s*e.n;t=t<0?new o("-","unaryMinus",[new a(-t)]):new a(t);return 1!==e.d?new o("/","divide",[t,new a(e.d)]):t},number:function(e){return e<0?u(new a(-e)):new a(e)},BigNumber:function(e){return e<0?u(new a(-e)):new a(e)},Complex:function(e){throw new Error("Cannot convert Complex number to Node")}});function s(e,t){if(t&&!1!==t.exactFractions&&isFinite(e)&&n){var r=n(e),t=t&&"number"==typeof t.fractionsLimit?t.fractionsLimit:1/0;if(r.valueOf()===e&&r.n<t&&r.d<t)return r}return e}var x=t({"string, Object":function(e,t){return"BigNumber"===r.number?(void 0===i&&noBignumber(),i(e)):"Fraction"===r.number?(void 0===n&&noFraction(),n(e)):s(parseFloat(e),t)},"Fraction, Object":function(e,t){return e},"BigNumber, Object":function(e,t){return e},"number, Object":s,"Complex, Object":function(e,t){return 0!==e.im?e:s(e.re,t)}});function u(e){return new o("-","unaryMinus",[e])}function v(r,e,n,i){return e.reduce(function(e,t){if(isNode(e)||isNode(t))isNode(e)?isNode(t)||(t=g(t)):e=g(e);else{try{return y(r,[e,t],i)}catch(e){}e=g(e),t=g(t)}return n([e,t])})}return function(e,t){return t=function t(e,r){switch(e.type){case"SymbolNode":return e;case"ConstantNode":return"number"!=typeof e.value&&isNaN(e.value)?e:x(e.value,r);case"FunctionNode":if(l[e.name]&&l[e.name].rawArgs)return e;var n=["add","multiply"];if(-1===n.indexOf(e.name)){var i=e.args.map(e=>t(e,r));if(!i.some(isNode))try{return y(e.name,i,r)}catch(e){}return i=i.map(function(e){return isNode(e)?e:g(e)}),new p(e.name,i)}case"OperatorNode":var a,o,n=e.fn.toString(),i=h(e);if(isOperatorNode(e)&&e.isUnary())a=[t(e.args[0],r)],o=isNode(a[0])?i(a):y(n,a,r);else if(f(e))if(a=(a=d(e)).map(e=>t(e,r)),m(n)){for(var s=[],u=[],c=0;c<a.length;c++)(isNode(a[c])?u:s).push(a[c]);o=1<s.length?(o=v(n,s,i,r),u.unshift(o),v(n,u,i,r)):v(n,a,i,r)}else o=v(n,a,i,r);else a=e.args.map(e=>t(e,r)),o=v(n,a,i,r);return o;case"ParenthesisNode":return t(e.content,r);default:throw new Error("Unimplemented node type in simplifyConstant: ".concat(e.type))}}(e,t),isNode(t)?t:g(t)}}),name$m="resolve",dependencies$m=["parse","FunctionNode","OperatorNode","ParenthesisNode"],createResolve=factory(name$m,dependencies$m,e=>{var{parse:a,FunctionNode:o,OperatorNode:s,ParenthesisNode:u}=e;return function t(e,r){if(!r)return e;if(isMap(r)||(r=createMap$1(r)),isSymbolNode(e)){var n=r.get(e.name);if(isNode(n))return t(n,r);if("number"==typeof n)return a(String(n))}else{if(isOperatorNode(e)){var i=e.args.map(function(e){return t(e,r)});return new s(e.op,e.fn,i,e.implicit)}if(isParenthesisNode(e))return new u(t(e.content,r));if(isFunctionNode(e))return i=e.args.map(function(e){return t(e,r)}),new o(e.name,i)}return e}}),name$l="simplify",dependencies$l=["config","typed","parse","add","subtract","multiply","divide","pow","isZero","equal","?fraction","?bignumber","mathWithTransform","ConstantNode","FunctionNode","OperatorNode","ParenthesisNode","SymbolNode"],createSimplify=factory(name$l,dependencies$l,e=>{var{config:t,typed:r,parse:u,add:n,subtract:i,multiply:a,divide:o,pow:s,isZero:c,equal:p,fraction:l,bignumber:m,mathWithTransform:e,ConstantNode:f,FunctionNode:d,OperatorNode:h,ParenthesisNode:y,SymbolNode:g}=e,m=createSimplifyConstant({typed:r,config:t,mathWithTransform:e,fraction:l,bignumber:m,ConstantNode:f,OperatorNode:h,FunctionNode:d,SymbolNode:g}),o=createSimplifyCore({equal:p,isZero:c,add:n,subtract:i,multiply:a,divide:o,pow:s,ConstantNode:f,OperatorNode:h,FunctionNode:d,ParenthesisNode:y}),x=createResolve({parse:u,FunctionNode:d,OperatorNode:h,ParenthesisNode:y}),{isCommutative:v,isAssociative:b,flatten:w,unflattenr:N,unflattenl:M,createMakeNodeFunction:S}=createUtil({FunctionNode:d,OperatorNode:h,SymbolNode:g}),s=r("simplify",{string:function(e){return this(u(e),this.rules,createEmptyMap(),{})},"string, Map | Object":function(e,t){return this(u(e),this.rules,t,{})},"string, Map | Object, Object":function(e,t,r){return this(u(e),this.rules,t,r)},"string, Array":function(e,t){return this(u(e),t,createEmptyMap(),{})},"string, Array, Map | Object":function(e,t,r){return this(u(e),t,r,{})},"string, Array, Map | Object, Object":function(e,t,r,n){return this(u(e),t,r,n)},"Node, Map | Object":function(e,t){return this(e,this.rules,t,{})},"Node, Map | Object, Object":function(e,t,r){return this(e,this.rules,t,r)},Node:function(e){return this(e,this.rules,createEmptyMap(),{})},"Node, Array":function(e,t){return this(e,t,createEmptyMap(),{})},"Node, Array, Map | Object":function(e,t,r){return this(e,t,r,{})},"Node, Array, Object, Object":function(e,t,r,n){return this(e,t,createMap$1(r),n)},"Node, Array, Map, Object":function(e,t,r,n){t=function(e){for(var t=[],r=0;r<e.length;r++){var n,i=e[r],a=void 0,o=typeof i;switch(o){case"string":var s=i.split("->");if(2!==s.length)throw SyntaxError("Could not parse rule: "+i);i={l:s[0],r:s[1]};case"object":a={l:$(u(i.l)),r:$(u(i.r))},i.context&&(a.evaluate=i.context),i.evaluate&&(a.evaluate=u(i.evaluate)),b(a.l)&&(n=S(a.l),s=new g("_p"+A++),a.expanded={},a.expanded.l=n([a.l.clone(),s]),w(a.expanded.l),N(a.expanded.l),a.expanded.r=n([a.r,s]));break;case"function":a=i;break;default:throw TypeError("Unsupported type of rule: "+o)}t.push(a)}return t}(t);for(var i=x(e,r),a={},o=(i=$(i)).toString({parenthesis:"all"});!a[o];){a[o]=!0;for(var s=A=0;s<t.length;s++)i="function"==typeof t[s]?t[s](i,n):(w(i),O(i,t[s])),M(i);o=i.toString({parenthesis:"all"})}return i}});function $(e){return e.transform(function(e,t,r){return isParenthesisNode(e)?$(e.content):e})}s.simplifyCore=o,s.resolve=x;var E={true:!0,false:!0,e:!0,i:!0,Infinity:!0,LN2:!0,LN10:!0,LOG2E:!0,LOG10E:!0,NaN:!0,phi:!0,pi:!0,SQRT1_2:!0,SQRT2:!0,tau:!0};s.rules=[o,{l:"log(e)",r:"1"},{l:"n-n1",r:"n+-n1"},{l:"-(c*v)",r:"(-c) * v"},{l:"-v",r:"(-1) * v"},{l:"n/n1^n2",r:"n*n1^-n2"},{l:"n/n1",r:"n*n1^-1"},{l:"(n ^ n1) ^ n2",r:"n ^ (n1 * n2)"},{l:"n*n",r:"n^2"},{l:"n * n^n1",r:"n^(n1+1)"},{l:"n^n1 * n^n2",r:"n^(n1+n2)"},{l:"n+n",r:"2*n"},{l:"n+-n",r:"0"},{l:"n1*n2 + n2",r:"(n1+1)*n2"},{l:"n1*n3 + n2*n3",r:"(n1+n2)*n3"},{l:"n1 + -1 * (n2 + n3)",r:"n1 + -1 * n2 + -1 * n3"},m,{l:"(-n)*n1",r:"-(n*n1)"},{l:"c+v",r:"v+c",context:{add:{commutative:!1}}},{l:"v*c",r:"c*v",context:{multiply:{commutative:!1}}},{l:"n+-n1",r:"n-n1"},{l:"n*(n1^-1)",r:"n/n1"},{l:"n*n1^-n2",r:"n/n1^n2"},{l:"n1^-1",r:"1/n1"},{l:"n*(n1/n2)",r:"(n*n1)/n2"},{l:"n-(n1+n2)",r:"n-n1-n2"},{l:"1*n",r:"n"},{l:"n1/(n2/n3)",r:"(n1*n3)/n2"}];var A=0;var O=r("applyRule",{"Node, Object":function(e,t){var r=e;if(r instanceof h||r instanceof d){if(r.args)for(var n=0;n<r.args.length;n++)r.args[n]=O(r.args[n],t)}else r instanceof y&&r.content&&(r.content=O(r.content,t));var i=t.r,a=D(t.l,r)[0];return!a&&t.expanded&&(i=t.expanded.r,a=D(t.expanded.l,r)[0]),a&&(e=r.implicit,r=i.clone(),e&&"implicit"in i&&(r.implicit=!0),r=r.transform(function(e){return e.isSymbolNode&&hasOwnProperty$1(a.placeholders,e.name)?a.placeholders[e.name].clone():e})),r}});function C(e,t){var r,n,i={placeholders:{}};if(!e.placeholders&&!t.placeholders)return i;if(!e.placeholders)return t;if(!t.placeholders)return e;for(r in e.placeholders)if(hasOwnProperty$1(e.placeholders,r)&&(i.placeholders[r]=e.placeholders[r],hasOwnProperty$1(t.placeholders,r)&&!function e(t,r){if(t instanceof f&&r instanceof f){if(!p(t.value,r.value))return!1}else if(t instanceof g&&r instanceof g){if(t.name!==r.name)return!1}else{if(!(t instanceof h&&r instanceof h||t instanceof d&&r instanceof d))return!1;if(t instanceof h){if(t.op!==r.op||t.fn!==r.fn)return!1}else if(t instanceof d&&t.name!==r.name)return!1;if(t.args.length!==r.args.length)return!1;for(var n=0;n<t.args.length;n++)if(!e(t.args[n],r.args[n]))return!1}return!0}(e.placeholders[r],t.placeholders[r])))return null;for(n in t.placeholders)hasOwnProperty$1(t.placeholders,n)&&(i.placeholders[n]=t.placeholders[n]);return i}function T(e,t){var r,n=[];if(0===e.length||0===t.length)return n;for(var i=0;i<e.length;i++)for(var a=0;a<t.length;a++)(r=C(e[i],t[a]))&&n.push(r);return n}function D(e,t,r){var n=[{placeholders:{}}];if(e instanceof h&&t instanceof h||e instanceof d&&t instanceof d){if(e instanceof h){if(e.op!==t.op||e.fn!==t.fn)return[]}else if(e instanceof d&&e.name!==t.name)return[];if(!(1===t.args.length&&1===e.args.length||!b(t)&&t.args.length===e.args.length||r)){if(2<=t.args.length&&2===e.args.length){for(var i=function(e,t){var r,n,i=[],a=S(e);if(v(e,t))for(var o=0;o<e.args.length;o++)(n=e.args.slice(0)).splice(o,1),r=1===n.length?n[0]:a(n),i.push(a([e.args[o],r]));else r=1===(n=e.args.slice(1)).length?n[0]:a(n),i.push(a([e.args[0],r]));return i}(t,e.context),a=[],o=0;o<i.length;o++)var s=D(e,i[o],!0),a=a.concat(s);return a}if(2<e.args.length)throw Error("Unexpected non-binary associative function: "+e.toString());return[]}for(var u=[],c=0;c<e.args.length;c++){var l=D(e.args[c],t.args[c]);if(0===l.length)return[];u.push(l)}n=function(e){if(0===e.length)return e;for(var t=e.reduce(T),r=[],n={},i=0;i<t.length;i++){var a=JSON.stringify(t[i]);n[a]||(n[a]=!0,r.push(t[i]))}return r}(u)}else if(e instanceof g){if(0===e.name.length)throw new Error("Symbol in rule has 0 length...!?");if(E[e.name]){if(e.name!==t.name)return[]}else if("n"===e.name[0]||"_p"===e.name.substring(0,2))n[0].placeholders[e.name]=t;else if("v"===e.name[0]){if(isConstantNode(t))return[];n[0].placeholders[e.name]=t}else{if("c"!==e.name[0])throw new Error("Invalid symbol in rule: "+e.name);if(!(t instanceof f))return[];n[0].placeholders[e.name]=t}}else{if(!(e instanceof f))return[];if(!p(e.value,t.value))return[]}return n}return s}),name$k="derivative",dependencies$k=["typed","config","parse","simplify","equal","isZero","numeric","ConstantNode","FunctionNode","OperatorNode","ParenthesisNode","SymbolNode"],createDerivative=factory(name$k,dependencies$k,e=>{var{typed:t,config:r,parse:n,simplify:i,equal:o,isZero:s,numeric:a,ConstantNode:u,FunctionNode:l,OperatorNode:p,ParenthesisNode:c,SymbolNode:m}=e,e=t("derivative",{"Node, SymbolNode, Object":function(e,t,r){var n={};d(n,e,t.name);n=h(e,n);return r.simplify?i(n):n},"Node, SymbolNode":function(e,t){return this(e,t,{simplify:!0})},"string, SymbolNode":function(e,t){return this(n(e),t)},"string, SymbolNode, Object":function(e,t,r){return this(n(e),t,r)},"string, string":function(e,t){return this(n(e),n(t))},"string, string, Object":function(e,t,r){return this(n(e),n(t),r)},"Node, string":function(e,t){return this(e,n(t))},"Node, string, Object":function(e,t,r){return this(e,n(t),r)}});e._simplify=!0,e.toTex=function(e){return f.apply(null,e.args)};var f=t("_derivTex",{"Node, SymbolNode":function(e,t){return isConstantNode(e)&&"string"===typeOf$1(e.value)?f(n(e.value).toString(),t.toString(),1):f(e.toString(),t.toString(),1)},"Node, ConstantNode":function(e,t){if("string"===typeOf$1(t.value))return f(e,n(t.value));throw new Error("The second parameter to 'derivative' is a non-string constant")},"Node, SymbolNode, ConstantNode":function(e,t,r){return f(e.toString(),t.name,r.value)},"string, string, number":function(e,t,r){r=1===r?"{d\\over d"+t+"}":"{d^{"+r+"}\\over d"+t+"^{"+r+"}}";return r+"\\left[".concat(e,"\\right]")}}),d=t("constTag",{"Object, ConstantNode, string":function(e,t){return e[t]=!0},"Object, SymbolNode, string":function(e,t,r){return t.name!==r&&(e[t]=!0)},"Object, ParenthesisNode, string":function(e,t,r){return d(e,t.content,r)},"Object, FunctionAssignmentNode, string":function(e,t,r){return-1===t.params.indexOf(r)?e[t]=!0:d(e,t.expr,r)},"Object, FunctionNode | OperatorNode, string":function(e,t,r){if(0<t.args.length){for(var n=d(e,t.args[0],r),i=1;i<t.args.length;++i)n=d(e,t.args[i],r)&&n;if(n)return e[t]=!0}return!1}}),h=t("_derivative",{"ConstantNode, Object":function(e){return y(0)},"SymbolNode, Object":function(e,t){return void 0!==t[e]?y(0):y(1)},"ParenthesisNode, Object":function(e,t){return new c(h(e.content,t))},"FunctionAssignmentNode, Object":function(e,t){return void 0!==t[e]?y(0):h(e.expr,t)},"FunctionNode, Object":function(e,t){if(1!==e.args.length&&function(e){if("log"!==e.name&&"nthRoot"!==e.name&&"pow"!==e.name||2!==e.args.length){for(var t=0;t<e.args.length;++t)e.args[t]=y(0);throw e.compile().evaluate(),new Error("Expected TypeError, but none found")}}(e),void 0!==t[e])return y(0);var r,n,i,a=e.args[0],o=!1,s=!1;switch(e.name){case"cbrt":o=!0,n=new p("*","multiply",[y(3),new p("^","pow",[a,new p("/","divide",[y(2),y(3)])])]);break;case"sqrt":case"nthRoot":if(1===e.args.length)o=!0,n=new p("*","multiply",[y(2),new l("sqrt",[a])]);else if(2===e.args.length)return t[r=new p("/","divide",[y(1),e.args[1]])]=t[e.args[1]],h(new p("^","pow",[a,r]),t);break;case"log10":r=y(10);case"log":if(r||1!==e.args.length){if(1===e.args.length&&r||2===e.args.length&&void 0!==t[e.args[1]])n=new p("*","multiply",[a.clone(),new l("log",[r||e.args[1]])]),o=!0;else if(2===e.args.length)return h(new p("/","divide",[new l("log",[a]),new l("log",[e.args[1]])]),t)}else n=a.clone(),o=!0;break;case"pow":return t[r]=t[e.args[1]],h(new p("^","pow",[a,e.args[1]]),t);case"exp":n=new l("exp",[a.clone()]);break;case"sin":n=new l("cos",[a.clone()]);break;case"cos":n=new p("-","unaryMinus",[new l("sin",[a.clone()])]);break;case"tan":n=new p("^","pow",[new l("sec",[a.clone()]),y(2)]);break;case"sec":n=new p("*","multiply",[e,new l("tan",[a.clone()])]);break;case"csc":s=!0,n=new p("*","multiply",[e,new l("cot",[a.clone()])]);break;case"cot":s=!0,n=new p("^","pow",[new l("csc",[a.clone()]),y(2)]);break;case"asin":o=!0,n=new l("sqrt",[new p("-","subtract",[y(1),new p("^","pow",[a.clone(),y(2)])])]);break;case"acos":s=o=!0,n=new l("sqrt",[new p("-","subtract",[y(1),new p("^","pow",[a.clone(),y(2)])])]);break;case"atan":o=!0,n=new p("+","add",[new p("^","pow",[a.clone(),y(2)]),y(1)]);break;case"asec":o=!0,n=new p("*","multiply",[new l("abs",[a.clone()]),new l("sqrt",[new p("-","subtract",[new p("^","pow",[a.clone(),y(2)]),y(1)])])]);break;case"acsc":s=o=!0,n=new p("*","multiply",[new l("abs",[a.clone()]),new l("sqrt",[new p("-","subtract",[new p("^","pow",[a.clone(),y(2)]),y(1)])])]);break;case"acot":s=o=!0,n=new p("+","add",[new p("^","pow",[a.clone(),y(2)]),y(1)]);break;case"sinh":n=new l("cosh",[a.clone()]);break;case"cosh":n=new l("sinh",[a.clone()]);break;case"tanh":n=new p("^","pow",[new l("sech",[a.clone()]),y(2)]);break;case"sech":s=!0,n=new p("*","multiply",[e,new l("tanh",[a.clone()])]);break;case"csch":s=!0,n=new p("*","multiply",[e,new l("coth",[a.clone()])]);break;case"coth":s=!0,n=new p("^","pow",[new l("csch",[a.clone()]),y(2)]);break;case"asinh":o=!0,n=new l("sqrt",[new p("+","add",[new p("^","pow",[a.clone(),y(2)]),y(1)])]);break;case"acosh":o=!0,n=new l("sqrt",[new p("-","subtract",[new p("^","pow",[a.clone(),y(2)]),y(1)])]);break;case"atanh":o=!0,n=new p("-","subtract",[y(1),new p("^","pow",[a.clone(),y(2)])]);break;case"asech":s=o=!0,n=new p("*","multiply",[a.clone(),new l("sqrt",[new p("-","subtract",[y(1),new p("^","pow",[a.clone(),y(2)])])])]);break;case"acsch":s=o=!0,n=new p("*","multiply",[new l("abs",[a.clone()]),new l("sqrt",[new p("+","add",[new p("^","pow",[a.clone(),y(2)]),y(1)])])]);break;case"acoth":s=o=!0,n=new p("-","subtract",[y(1),new p("^","pow",[a.clone(),y(2)])]);break;case"abs":n=new p("/","divide",[new l(new m("abs"),[a.clone()]),a.clone()]);break;default:throw new Error('Function "'+e.name+'" is not supported by derivative, or a wrong number of arguments is passed')}var u=o?(i="/","divide"):(i="*","multiply"),c=h(a,t);return s&&(c=new p("-","unaryMinus",[c])),new p(i,u,[c,n])},"OperatorNode, Object":function(e,r){if(void 0!==r[e])return y(0);if("+"===e.op)return new p(e.op,e.fn,e.args.map(function(e){return h(e,r)}));if("-"===e.op){if(e.isUnary())return new p(e.op,e.fn,[h(e.args[0],r)]);if(e.isBinary())return new p(e.op,e.fn,[h(e.args[0],r),h(e.args[1],r)])}if("*"===e.op){var t=e.args.filter(function(e){return void 0!==r[e]});if(0<t.length){var n=e.args.filter(function(e){return void 0===r[e]}),n=1===n.length?n[0]:new p("*","multiply",n),n=t.concat(h(n,r));return new p("*","multiply",n)}return new p("+","add",e.args.map(function(t){return new p("*","multiply",e.args.map(function(e){return e===t?h(e,r):e.clone()}))}))}if("/"===e.op&&e.isBinary()){var i=e.args[0],a=e.args[1];return void 0!==r[a]?new p("/","divide",[h(i,r),a]):void 0!==r[i]?new p("*","multiply",[new p("-","unaryMinus",[i]),new p("/","divide",[h(a,r),new p("^","pow",[a.clone(),y(2)])])]):new p("/","divide",[new p("-","subtract",[new p("*","multiply",[h(i,r),a.clone()]),new p("*","multiply",[i.clone(),h(a,r)])]),new p("^","pow",[a.clone(),y(2)])])}if("^"===e.op&&e.isBinary()){n=e.args[0],i=e.args[1];if(void 0!==r[n])return isConstantNode(n)&&(s(n.value)||o(n.value,1))?y(0):new p("*","multiply",[e,new p("*","multiply",[new l("log",[n.clone()]),h(i.clone(),r)])]);if(void 0===r[i])return new p("*","multiply",[new p("^","pow",[n.clone(),i.clone()]),new p("+","add",[new p("*","multiply",[h(n,r),new p("/","divide",[i.clone(),n.clone()])]),new p("*","multiply",[h(i,r),new l("log",[n.clone()])])])]);if(isConstantNode(i)){if(s(i.value))return y(0);if(o(i.value,1))return h(n,r)}a=new p("^","pow",[n.clone(),new p("-","subtract",[i,y(1)])]);return new p("*","multiply",[i.clone(),new p("*","multiply",[h(n,r),a])])}throw new Error('Operator "'+e.op+'" is not supported by derivative, or a wrong number of arguments is passed')}});function y(e,t){return new u(a(e,t||r.number))}return e}),name$j="rationalize",dependencies$j=["config","typed","equal","isZero","add","subtract","multiply","divide","pow","parse","simplify","?bignumber","?fraction","mathWithTransform","ConstantNode","OperatorNode","FunctionNode","SymbolNode","ParenthesisNode"],createRationalize=factory(name$j,dependencies$j,e=>{var{config:t,typed:r,equal:n,isZero:i,add:a,subtract:o,multiply:s,divide:u,pow:c,parse:l,simplify:m,fraction:p,bignumber:f,mathWithTransform:d,ConstantNode:h,OperatorNode:y,FunctionNode:g,SymbolNode:x,ParenthesisNode:e}=e,v=createSimplifyConstant({typed:r,config:t,mathWithTransform:d,fraction:p,bignumber:f,ConstantNode:h,OperatorNode:y,FunctionNode:g,SymbolNode:x}),b=createSimplifyCore({equal:n,isZero:i,add:a,subtract:o,multiply:s,divide:u,pow:c,ConstantNode:h,OperatorNode:y,FunctionNode:g,ParenthesisNode:e});return r(name$j,{string:function(e){return this(l(e),{},!1)},"string, boolean":function(e,t){return this(l(e),{},t)},"string, Object":function(e,t){return this(l(e),t,!1)},"string, Object, boolean":function(e,t,r){return this(l(e),t,r)},Node:function(e){return this(e,{},!1)},"Node, boolean":function(e,t){return this(e,{},t)},"Node, Object":function(e,t){return this(e,t,!1)},"Node, Object, boolean":function(e,t,r){var n,i,a=((p={}).firstRules=(o=[b,{l:"n+n",r:"2*n"},{l:"n+-n",r:"0"},v,{l:"n*(n1^-1)",r:"n/n1"},{l:"n*n1^-n2",r:"n/n1^n2"},{l:"n1^-1",r:"1/n1"},{l:"n*(n1/n2)",r:"(n*n1)/n2"},{l:"1*n",r:"n"}]).concat(s=[{l:"(-n1)/(-n2)",r:"n1/n2"},{l:"(-n1)*(-n2)",r:"n1*n2"},{l:"n1--n2",r:"n1+n2"},{l:"n1-n2",r:"n1+(-n2)"},{l:"(n1+n2)*n3",r:"(n1*n3 + n2*n3)"},{l:"n1*(n2+n3)",r:"(n1*n2+n1*n3)"},{l:"c1*n + c2*n",r:"(c1+c2)*n"},{l:"c1*n + n",r:"(c1+1)*n"},{l:"c1*n - c2*n",r:"(c1-c2)*n"},{l:"c1*n - n",r:"(c1-1)*n"},{l:"v/c",r:"(1/c)*v"},{l:"v/-c",r:"-(1/c)*v"},{l:"-v*-c",r:"c*v"},{l:"-v*c",r:"-c*v"},{l:"v*-c",r:"-c*v"},{l:"v*c",r:"c*v"},{l:"-(-n1*n2)",r:"(n1*n2)"},{l:"-(n1*n2)",r:"(-n1*n2)"},{l:"-(-n1+n2)",r:"(n1-n2)"},{l:"-(n1+n2)",r:"(-n1-n2)"},{l:"(n1^n2)^n3",r:"(n1^(n2*n3))"},{l:"-(-n1/n2)",r:"(n1/n2)"},{l:"-(n1/n2)",r:"(-n1/n2)"}],n=[{l:"(n1/(n2/n3))",r:"((n1*n3)/n2)"},{l:"(n1/n2/n3)",r:"(n1/(n2*n3))"}]),p.distrDivRules=[{l:"(n1/n2 + n3/n4)",r:"((n1*n4 + n3*n2)/(n2*n4))"},{l:"(n1/n2 + n3)",r:"((n1 + n3*n2)/n2)"},{l:"(n1 + n2/n3)",r:"((n1*n3 + n2)/n3)"}],p.sucDivRules=n,p.firstRulesAgain=o.concat(s),p.finalRules=[b,{l:"n*-n",r:"-n^2"},{l:"n*n",r:"n^2"},v,{l:"n*-n^n1",r:"-n^(n1+1)"},{l:"n*n^n1",r:"n^(n1+1)"},{l:"n^n1*-n^n2",r:"-n^(n1+n2)"},{l:"n^n1*n^n2",r:"n^(n1+n2)"},{l:"n^n1*-n",r:"-n^(n1+1)"},{l:"n^n1*n",r:"n^(n1+1)"},{l:"n^n1/-n",r:"-n^(n1-1)"},{l:"n^n1/n",r:"n^(n1-1)"},{l:"n/-n^n1",r:"-n^(1-n1)"},{l:"n/n^n1",r:"n^(1-n1)"},{l:"n^n1/-n^n2",r:"n^(n1-n2)"},{l:"n^n1/n^n2",r:"n^(n1-n2)"},{l:"n1+(-n2*n3)",r:"n1-n2*n3"},{l:"v*(-c)",r:"-c*v"},{l:"n1+-n2",r:"n1-n2"},{l:"v*c",r:"c*v"},{l:"(n1^n2)^n3",r:"(n1^(n2*n3))"}],p),o=function(e,t,r,n){var o=[],t=m(e,n,t,{exactFractions:!1}),s="+-*"+((r=!!r)?"/":"");!function e(t){var r=t.type;{if("FunctionNode"===r)throw new Error("There is an unsolved function call");if("OperatorNode"===r)if("^"===t.op){if("ConstantNode"!==t.args[1].type||!isInteger$1(parseFloat(t.args[1].value)))throw new Error("There is a non-integer exponent");e(t.args[0])}else{if(-1===s.indexOf(t.op))throw new Error("Operator "+t.op+" invalid in polynomial expression");for(var n=0;n<t.args.length;n++)e(t.args[n])}else if("SymbolNode"===r){var i=t.name,a=o.indexOf(i);-1===a&&o.push(i)}else if("ParenthesisNode"===r)e(t.content);else if("ConstantNode"!==r)throw new Error("type "+r+" is not allowed in polynomial expression")}}(t);r={};return r.expression=t,r.variables=o,r}(e,t,!0,a.firstRules),s=o.variables.length;if(e=o.expression,1<=s){e=function e(t,r,n){var i=t.type;var a=1<arguments.length;{var o,s;"OperatorNode"===i&&t.isBinary()&&(o=!1,"^"===t.op&&("ParenthesisNode"!==t.args[0].type&&"OperatorNode"!==t.args[0].type||"ConstantNode"!==t.args[1].type||(s=parseFloat(t.args[1].value),o=2<=s&&isInteger$1(s))),o&&(t=2<s?(o=t.args[0],s=new y("^","pow",[t.args[0].cloneDeep(),new h(s-1)]),new y("*","multiply",[o,s])):new y("*","multiply",[t.args[0],t.args[0].cloneDeep()]),a&&("content"===n?r.content=t:r.args[n]=t)))}if("ParenthesisNode"===i)e(t.content,t,"content");else if("ConstantNode"!==i&&"SymbolNode"!==i)for(var u=0;u<t.args.length;u++)e(t.args[u],t,u);if(!a)return t}(e);var u,c=!0,l=!1;for(e=m(e,a.firstRules,{},{exactFractions:!1});;){if(u=c?a.distrDivRules:a.sucDivRules,c=!c,(u=(e=m(e,u)).toString())===i)break;l=!0,i=u}l&&(e=m(e,a.firstRulesAgain,{},{exactFractions:!1})),e=m(e,a.finalRules,{},{exactFractions:!1})}var p=[],t={};return"OperatorNode"===e.type&&e.isBinary()&&"/"===e.op?(1===s&&(e.args[0]=w(e.args[0],p),e.args[1]=w(e.args[1])),r&&(t.numerator=e.args[0],t.denominator=e.args[1])):(1===s&&(e=w(e,p)),r&&(t.numerator=e,t.denominator=null)),r?(t.coefficients=p,t.variables=o.variables,t.expression=e,t):e}});function w(e,u){var t={cte:1,oper:"+",fire:""},c=(u=void 0===u?[]:u)[0]=0,l="";!function e(t,r,n){var i=t.type;{if("FunctionNode"===i)throw new Error("There is an unsolved function call");if("OperatorNode"===i){if(-1==="+-*^".indexOf(t.op))throw new Error("Operator "+t.op+" invalid");if(null!==r){if(("unaryMinus"===t.fn||"pow"===t.fn)&&"add"!==r.fn&&"subtract"!==r.fn&&"multiply"!==r.fn)throw new Error("Invalid "+t.op+" placing");if(("subtract"===t.fn||"add"===t.fn||"multiply"===t.fn)&&"add"!==r.fn&&"subtract"!==r.fn)throw new Error("Invalid "+t.op+" placing");if(("subtract"===t.fn||"add"===t.fn||"unaryMinus"===t.fn)&&0!==n.noFil)throw new Error("Invalid "+t.op+" placing")}"^"!==t.op&&"*"!==t.op||(n.fire=t.op);for(var a=0;a<t.args.length;a++)"unaryMinus"===t.fn&&(n.oper="-"),"+"!==t.op&&"subtract"!==t.fn||(n.fire="",n.cte=1,n.oper=0===a?"+":t.op),n.noFil=a,e(t.args[a],t,n)}else if("SymbolNode"===i){if(t.name!==l&&""!==l)throw new Error("There is more than one variable");if(l=t.name,null!==r){if("^"===r.op&&0!==n.noFil)throw new Error("In power the variable should be the first parameter");if("*"===r.op&&1!==n.noFil)throw new Error("In multiply the variable should be the second parameter");""!==n.fire&&"*"!==n.fire||(c<1&&(u[1]=0),u[1]+=n.cte*("+"===n.oper?1:-1),c=Math.max(1,c))}else u[1]=1}else{if("ConstantNode"!==i)throw new Error("Type "+i+" is not allowed");var o=parseFloat(t.value);if(null!==r){if("^"===r.op){if(1!==n.noFil)throw new Error("Constant cannot be powered");if(!isInteger$1(o)||o<=0)throw new Error("Non-integer exponent is not allowed");for(var s=c+1;s<o;s++)u[s]=0;return c<o&&(u[o]=0),u[o]+=n.cte*("+"===n.oper?1:-1),void(c=Math.max(o,c))}n.cte=o,""===n.fire&&(u[0]+=n.cte*("+"===n.oper?1:-1))}else u[0]=o}}}(e,null,t);for(var r,n,i,a,o,s=!0,p=c=u.length-1;0<=p;p--)0!==u[p]&&(n=new h(s?u[p]:Math.abs(u[p])),i=u[p]<0?"-":"+",0<p&&(o=new x(l),1<p&&(a=new h(p),o=new y("^","pow",[o,a])),n=-1===u[p]&&s?new y("-","unaryMinus",[o]):1===Math.abs(u[p])?o:new y("*","multiply",[n,o])),r=s?n:"+"==i?new y("+","add",[r,n]):new y("-","subtract",[r,n]),s=!1);return s?new h(0):r}}),name$i="reviver",dependencies$i=["classes"],createReviver=factory(name$i,dependencies$i,e=>{var n=e["classes"];return function(e,t){var r=n[t&&t.mathjs];return r&&"function"==typeof r.fromJSON?r.fromJSON(t):t}}),name$h="replacer",dependencies$h=[],createReplacer=factory(name$h,dependencies$h,()=>function(e,t){return"number"!=typeof t||isFinite(t)&&!isNaN(t)?t:{mathjs:"number",value:String(t)}}),version$1="9.5.1",createTrue=factory("true",[],()=>!0),createFalse=factory("false",[],()=>!1),createNull=factory("null",[],()=>null),createInfinity=recreateFactory("Infinity",["config","?BigNumber"],e=>{var{config:t,BigNumber:e}=e;return"BigNumber"===t.number?new e(1/0):1/0}),createNaN=recreateFactory("NaN",["config","?BigNumber"],e=>{var{config:t,BigNumber:e}=e;return"BigNumber"===t.number?new e(NaN):NaN}),createPi=recreateFactory("pi",["config","?BigNumber"],e=>{var{config:t,BigNumber:e}=e;return"BigNumber"===t.number?createBigNumberPi(e):pi$1}),createTau=recreateFactory("tau",["config","?BigNumber"],e=>{var{config:t,BigNumber:e}=e;return"BigNumber"===t.number?createBigNumberTau(e):tau$1}),createE=recreateFactory("e",["config","?BigNumber"],e=>{var{config:t,BigNumber:e}=e;return"BigNumber"===t.number?createBigNumberE(e):e$1}),createPhi=recreateFactory("phi",["config","?BigNumber"],e=>{var{config:t,BigNumber:e}=e;return"BigNumber"===t.number?createBigNumberPhi(e):phi$1}),createLN2=recreateFactory("LN2",["config","?BigNumber"],e=>{var{config:t,BigNumber:e}=e;return"BigNumber"===t.number?new e(2).ln():Math.LN2}),createLN10=recreateFactory("LN10",["config","?BigNumber"],e=>{var{config:t,BigNumber:e}=e;return"BigNumber"===t.number?new e(10).ln():Math.LN10}),createLOG2E=recreateFactory("LOG2E",["config","?BigNumber"],e=>{var{config:t,BigNumber:e}=e;return"BigNumber"===t.number?new e(1).div(new e(2).ln()):Math.LOG2E}),createLOG10E=recreateFactory("LOG10E",["config","?BigNumber"],e=>{var{config:t,BigNumber:e}=e;return"BigNumber"===t.number?new e(1).div(new e(10).ln()):Math.LOG10E}),createSQRT1_2=recreateFactory("SQRT1_2",["config","?BigNumber"],e=>{var{config:t,BigNumber:e}=e;return"BigNumber"===t.number?new e("0.5").sqrt():Math.SQRT1_2}),createSQRT2=recreateFactory("SQRT2",["config","?BigNumber"],e=>{var{config:t,BigNumber:e}=e;return"BigNumber"===t.number?new e(2).sqrt():Math.SQRT2}),createI=recreateFactory("i",["Complex"],e=>{var e=e["Complex"];return e.I}),createVersion=factory("version",[],()=>version$1);function recreateFactory(e,t,r){return factory(e,t,r,{recreateOnConfigChange:!0})}var createSpeedOfLight=unitFactory("speedOfLight","299792458","m s^-1"),createGravitationConstant=unitFactory("gravitationConstant","6.67430e-11","m^3 kg^-1 s^-2"),createPlanckConstant=unitFactory("planckConstant","6.62607015e-34","J s"),createReducedPlanckConstant=unitFactory("reducedPlanckConstant","1.0545718176461565e-34","J s"),createMagneticConstant=unitFactory("magneticConstant","1.25663706212e-6","N A^-2"),createElectricConstant=unitFactory("electricConstant","8.8541878128e-12","F m^-1"),createVacuumImpedance=unitFactory("vacuumImpedance","376.730313667","ohm"),createCoulomb=unitFactory("coulomb","8.987551792261171e9","N m^2 C^-2"),createElementaryCharge=unitFactory("elementaryCharge","1.602176634e-19","C"),createBohrMagneton=unitFactory("bohrMagneton","9.2740100783e-24","J T^-1"),createConductanceQuantum=unitFactory("conductanceQuantum","7.748091729863649e-5","S"),createInverseConductanceQuantum=unitFactory("inverseConductanceQuantum","12906.403729652257","ohm"),createMagneticFluxQuantum=unitFactory("magneticFluxQuantum","2.0678338484619295e-15","Wb"),createNuclearMagneton=unitFactory("nuclearMagneton","5.0507837461e-27","J T^-1"),createKlitzing=unitFactory("klitzing","25812.807459304513","ohm"),createBohrRadius=unitFactory("bohrRadius","5.29177210903e-11","m"),createClassicalElectronRadius=unitFactory("classicalElectronRadius","2.8179403262e-15","m"),createElectronMass=unitFactory("electronMass","9.1093837015e-31","kg"),createFermiCoupling=unitFactory("fermiCoupling","1.1663787e-5","GeV^-2"),createFineStructure=numberFactory("fineStructure",.0072973525693),createHartreeEnergy=unitFactory("hartreeEnergy","4.3597447222071e-18","J"),createProtonMass=unitFactory("protonMass","1.67262192369e-27","kg"),createDeuteronMass=unitFactory("deuteronMass","3.3435830926e-27","kg"),createNeutronMass=unitFactory("neutronMass","1.6749271613e-27","kg"),createQuantumOfCirculation=unitFactory("quantumOfCirculation","3.6369475516e-4","m^2 s^-1"),createRydberg=unitFactory("rydberg","10973731.568160","m^-1"),createThomsonCrossSection=unitFactory("thomsonCrossSection","6.6524587321e-29","m^2"),createWeakMixingAngle=numberFactory("weakMixingAngle",.2229),createEfimovFactor=numberFactory("efimovFactor",22.7),createAtomicMass=unitFactory("atomicMass","1.66053906660e-27","kg"),createAvogadro=unitFactory("avogadro","6.02214076e23","mol^-1"),createBoltzmann=unitFactory("boltzmann","1.380649e-23","J K^-1"),createFaraday=unitFactory("faraday","96485.33212331001","C mol^-1"),createFirstRadiation=unitFactory("firstRadiation","3.7417718521927573e-16","W m^2"),createLoschmidt=unitFactory("loschmidt","2.686780111798444e25","m^-3"),createGasConstant=unitFactory("gasConstant","8.31446261815324","J K^-1 mol^-1"),createMolarPlanckConstant=unitFactory("molarPlanckConstant","3.990312712893431e-10","J s mol^-1"),createMolarVolume=unitFactory("molarVolume","0.022413969545014137","m^3 mol^-1"),createSackurTetrode=numberFactory("sackurTetrode",-1.16487052358),createSecondRadiation=unitFactory("secondRadiation","0.014387768775039337","m K"),createStefanBoltzmann=unitFactory("stefanBoltzmann","5.67037441918443e-8","W m^-2 K^-4"),createWienDisplacement=unitFactory("wienDisplacement","2.897771955e-3","m K"),createMolarMass=unitFactory("molarMass","0.99999999965e-3","kg mol^-1"),createMolarMassC12=unitFactory("molarMassC12","11.9999999958e-3","kg mol^-1"),createGravity=unitFactory("gravity","9.80665","m s^-2"),createPlanckLength=unitFactory("planckLength","1.616255e-35","m"),createPlanckMass=unitFactory("planckMass","2.176435e-8","kg"),createPlanckTime=unitFactory("planckTime","5.391245e-44","s"),createPlanckCharge=unitFactory("planckCharge","1.87554603778e-18","C"),createPlanckTemperature=unitFactory("planckTemperature","1.416785e+32","K");function unitFactory(e,n,i){return factory(e,["config","Unit","BigNumber"],e=>{var{config:t,Unit:r,BigNumber:e}=e,e=new r("BigNumber"===t.number?new e(n):parseFloat(n),i);return e.fixPrefix=!0,e})}function numberFactory(e,r){return factory(e,["config","BigNumber"],e=>{var{config:t,BigNumber:e}=e;return"BigNumber"===t.number?new e(r):r})}var name$g="apply",dependencies$g=["typed","isInteger"],createApplyTransform=factory(name$g,dependencies$g,e=>{var{typed:t,isInteger:e}=e,r=createApply({typed:t,isInteger:e});return t("apply",{"...any":function(e){var t=e[1];isNumber(t)?e[1]=t-1:isBigNumber(t)&&(e[1]=t.minus(1));try{return r.apply(null,e)}catch(e){throw errorTransform(e)}}})},{isTransformFunction:!0}),name$f="column",dependencies$f=["typed","Index","matrix","range"],createColumnTransform=factory(name$f,dependencies$f,e=>{var{typed:t,Index:r,matrix:n,range:e}=e,i=createColumn({typed:t,Index:r,matrix:n,range:e});return t("column",{"...any":function(e){var t=e.length-1,r=e[t];isNumber(r)&&(e[t]=r-1);try{return i.apply(null,e)}catch(e){throw errorTransform(e)}}})},{isTransformFunction:!0});function compileInlineExpression(e,t,r){var n=e.filter(function(e){return isSymbolNode(e)&&!(e.name in t)&&!r.has(e.name)})[0];if(!n)throw new Error('No undefined variable found in inline expression "'+e+'"');var i=n.name,a=createSubScope(r),o=e.compile();return function(e){return a.set(i,e),o.evaluate(a)}}var name$e="filter",dependencies$e=["typed"],createFilterTransform=factory(name$e,dependencies$e,e=>{var e=e["typed"];function t(e,t,r){var n,i;return e[0]&&(n=e[0].compile().evaluate(r)),e[1]&&(i=isSymbolNode(e[1])||isFunctionAssignmentNode(e[1])?e[1].compile().evaluate(r):compileInlineExpression(e[1],t,r)),a(n,i)}t.rawArgs=!0;var a=e("filter",{"Array, function":_filter,"Matrix, function":function(e,t){return e.create(_filter(e.toArray(),t))},"Array, RegExp":filterRegExp,"Matrix, RegExp":function(e,t){return e.create(filterRegExp(e.toArray(),t))}});return t},{isTransformFunction:!0});function _filter(e,n){var i=maxArgumentCount(n);return filter$1(e,function(e,t,r){return 1===i?n(e):2===i?n(e,[t+1]):n(e,[t+1],r)})}var name$d="forEach",dependencies$d=["typed"],createForEachTransform=factory(name$d,dependencies$d,e=>{var e=e["typed"];function t(e,t,r){var n,i;return e[0]&&(n=e[0].compile().evaluate(r)),e[1]&&(i=isSymbolNode(e[1])||isFunctionAssignmentNode(e[1])?e[1].compile().evaluate(r):compileInlineExpression(e[1],t,r)),a(n,i)}t.rawArgs=!0;var a=e("forEach",{"Array | Matrix, function":function(t,i){var a=maxArgumentCount(i);(function r(e,n){Array.isArray(e)?forEach$1(e,function(e,t){r(e,n.concat(t+1))}):1===a?i(e):2===a?i(e,n):i(e,n,t)})(t.valueOf(),[])}});return t},{isTransformFunction:!0}),name$c="index",dependencies$c=["Index"],createIndexTransform=factory(name$c,dependencies$c,e=>{var a=e["Index"];return function(){for(var e=[],t=0,r=arguments.length;t<r;t++){var n=arguments[t];if(isRange(n))n.start--,n.end-=0<n.step?0:2;else if(n&&!0===n.isSet)n=n.map(function(e){return e-1});else if(isArray(n)||isMatrix(n))n=n.map(function(e){return e-1});else if(isNumber(n))n--;else if(isBigNumber(n))n=n.toNumber()-1;else if("string"!=typeof n)throw new TypeError("Dimension must be an Array, Matrix, number, string, or Range");e[t]=n}var i=new a;return a.apply(i,e),i}},{isTransformFunction:!0}),name$b="map",dependencies$b=["typed"],createMapTransform=factory(name$b,dependencies$b,e=>{var e=e["typed"];function t(e,t,r){var n,i;return e[0]&&(n=e[0].compile().evaluate(r)),e[1]&&(i=isSymbolNode(e[1])||isFunctionAssignmentNode(e[1])?e[1].compile().evaluate(r):compileInlineExpression(e[1],t,r)),a(n,i)}t.rawArgs=!0;var a=e("map",{"Array, function":function(e,t){return _map(e,t,e)},"Matrix, function":function(e,t){return e.create(_map(e.valueOf(),t,e))}});return t},{isTransformFunction:!0});function _map(e,t,i){var a=maxArgumentCount(t);return function r(e,n){return Array.isArray(e)?map$1(e,function(e,t){return r(e,n.concat(t+1))}):1===a?t(e):2===a?t(e,n):t(e,n,i)}(e,[])}function lastDimToZeroBase(e){var t;return 2===e.length&&isCollection(e[0])&&(isNumber(t=(e=e.slice())[1])?e[1]=t-1:isBigNumber(t)&&(e[1]=t.minus(1))),e}var name$a="max",dependencies$a=["typed","config","numeric","larger"],createMaxTransform=factory(name$a,dependencies$a,e=>{var{typed:t,config:r,numeric:n,larger:e}=e,i=createMax({typed:t,config:r,numeric:n,larger:e});return t("max",{"...any":function(e){e=lastDimToZeroBase(e);try{return i.apply(null,e)}catch(e){throw errorTransform(e)}}})},{isTransformFunction:!0}),name$9="mean",dependencies$9=["typed","add","divide"],createMeanTransform=factory(name$9,dependencies$9,e=>{var{typed:t,add:r,divide:e}=e,n=createMean({typed:t,add:r,divide:e});return t("mean",{"...any":function(e){e=lastDimToZeroBase(e);try{return n.apply(null,e)}catch(e){throw errorTransform(e)}}})},{isTransformFunction:!0}),name$8="min",dependencies$8=["typed","config","numeric","smaller"],createMinTransform=factory(name$8,dependencies$8,e=>{var{typed:t,config:r,numeric:n,smaller:e}=e,i=createMin({typed:t,config:r,numeric:n,smaller:e});return t("min",{"...any":function(e){e=lastDimToZeroBase(e);try{return i.apply(null,e)}catch(e){throw errorTransform(e)}}})},{isTransformFunction:!0}),name$7="range",dependencies$7=["typed","config","?matrix","?bignumber","smaller","smallerEq","larger","largerEq"],createRangeTransform=factory(name$7,dependencies$7,e=>{var{typed:t,config:r,matrix:n,bignumber:i,smaller:a,smallerEq:o,larger:s,largerEq:e}=e,u=createRange({typed:t,config:r,matrix:n,bignumber:i,smaller:a,smallerEq:o,larger:s,largerEq:e});return t("range",{"...any":function(e){return"boolean"!=typeof e[e.length-1]&&e.push(!0),u.apply(null,e)}})},{isTransformFunction:!0}),name$6="row",dependencies$6=["typed","Index","matrix","range"],createRowTransform=factory(name$6,dependencies$6,e=>{var{typed:t,Index:r,matrix:n,range:e}=e,i=createRow({typed:t,Index:r,matrix:n,range:e});return t("row",{"...any":function(e){var t=e.length-1,r=e[t];isNumber(r)&&(e[t]=r-1);try{return i.apply(null,e)}catch(e){throw errorTransform(e)}}})},{isTransformFunction:!0}),name$5="subset",dependencies$5=["typed","matrix"],createSubsetTransform=factory(name$5,dependencies$5,e=>{var{typed:t,matrix:e}=e,r=createSubset({typed:t,matrix:e});return t("subset",{"...any":function(e){try{return r.apply(null,e)}catch(e){throw errorTransform(e)}}})},{isTransformFunction:!0}),name$4="concat",dependencies$4=["typed","matrix","isInteger"],createConcatTransform=factory(name$4,dependencies$4,e=>{var{typed:t,matrix:r,isInteger:e}=e,n=createConcat({typed:t,matrix:r,isInteger:e});return t("concat",{"...any":function(e){var t=e.length-1,r=e[t];isNumber(r)?e[t]=r-1:isBigNumber(r)&&(e[t]=r.minus(1));try{return n.apply(null,e)}catch(e){throw errorTransform(e)}}})},{isTransformFunction:!0}),name$3="diff",dependencies$3=["typed","matrix","subtract","number","bignumber"],createDiffTransform=factory(name$3,dependencies$3,e=>{var{typed:t,matrix:r,subtract:n,number:i,bignumber:e}=e,a=createDiff({typed:t,matrix:r,subtract:n,number:i,bignumber:e});return t(name$3,{"...any":function(e){e=lastDimToZeroBase(e);try{return a.apply(null,e)}catch(e){throw errorTransform(e)}}})},{isTransformFunction:!0}),name$2="std",dependencies$2=["typed","sqrt","variance"],createStdTransform=factory(name$2,dependencies$2,e=>{var{typed:t,sqrt:r,variance:e}=e,n=createStd({typed:t,sqrt:r,variance:e});return t("std",{"...any":function(e){e=lastDimToZeroBase(e);try{return n.apply(null,e)}catch(e){throw errorTransform(e)}}})},{isTransformFunction:!0}),name$1="sum",dependencies$1=["typed","config","add","numeric"],createSumTransform=factory(name$1,dependencies$1,e=>{var{typed:t,config:r,add:n,numeric:e}=e,i=createSum({typed:t,config:r,add:n,numeric:e});return t(name$1,{"...any":function(e){e=lastDimToZeroBase(e);try{return i.apply(null,e)}catch(e){throw errorTransform(e)}}})},{isTransformFunction:!0}),name="variance",dependencies=["typed","add","subtract","multiply","divide","apply","isNaN"],createVarianceTransform=factory(name,dependencies,e=>{var{typed:t,add:r,subtract:n,multiply:i,divide:a,apply:o,isNaN:e}=e,s=createVariance({typed:t,add:r,subtract:n,multiply:i,divide:a,apply:o,isNaN:e});return t(name,{"...any":function(e){e=lastDimToZeroBase(e);try{return s.apply(null,e)}catch(e){throw errorTransform(e)}}})},{isTransformFunction:!0}),ResultSet=createResultSet({}),Complex=createComplexClass({}),Range=createRangeClass({}),_false=createFalse({}),_null=createNull({}),_true=createTrue({}),BigNumber=createBigNumberClass({config:config}),Matrix=createMatrixClass({}),replacer=createReplacer({}),i=createI({Complex:Complex}),LN10=createLN10({BigNumber:BigNumber,config:config}),LOG10E=createLOG10E({BigNumber:BigNumber,config:config}),_NaN=createNaN({BigNumber:BigNumber,config:config}),pi=createPi({BigNumber:BigNumber,config:config}),SQRT1_2=createSQRT1_2({BigNumber:BigNumber,config:config}),tau=createTau({BigNumber:BigNumber,config:config}),efimovFactor=createEfimovFactor({BigNumber:BigNumber,config:config}),fineStructure=createFineStructure({BigNumber:BigNumber,config:config}),sackurTetrode=createSackurTetrode({BigNumber:BigNumber,config:config}),weakMixingAngle=createWeakMixingAngle({BigNumber:BigNumber,config:config}),Fraction=createFractionClass({}),e=createE({BigNumber:BigNumber,config:config}),_Infinity=createInfinity({BigNumber:BigNumber,config:config}),LOG2E=createLOG2E({BigNumber:BigNumber,config:config}),version=createVersion({}),DenseMatrix=createDenseMatrixClass({Matrix:Matrix}),phi=createPhi({BigNumber:BigNumber,config:config}),typed=createTyped({BigNumber:BigNumber,Complex:Complex,DenseMatrix:DenseMatrix,Fraction:Fraction}),isInteger=createIsInteger({typed:typed}),isNumeric$1=createIsNumeric({typed:typed}),isPositive=createIsPositive({typed:typed}),isNaN$1=createIsNaN({typed:typed}),equalScalar=createEqualScalar({config:config,typed:typed}),number=createNumber({typed:typed}),boolean=createBoolean({typed:typed}),complex=createComplex({Complex:Complex,typed:typed}),splitUnit=createSplitUnit({typed:typed}),unaryPlus=createUnaryPlus({BigNumber:BigNumber,config:config,typed:typed}),apply=createApply({isInteger:isInteger,typed:typed}),cube=createCube({typed:typed}),expm1=createExpm1({Complex:Complex,typed:typed}),log10=createLog10({Complex:Complex,config:config,typed:typed}),multiplyScalar=createMultiplyScalar({typed:typed}),sign=createSign({BigNumber:BigNumber,Fraction:Fraction,complex:complex,typed:typed}),square=createSquare({typed:typed}),bitNot=createBitNot({typed:typed}),arg=createArg({typed:typed}),im=createIm({typed:typed}),not=createNot({typed:typed}),filter=createFilter({typed:typed}),forEach=createForEach({typed:typed}),map=createMap({typed:typed}),erf=createErf({typed:typed}),format=createFormat({typed:typed}),oct=createOct({format:format,typed:typed}),print=createPrint({typed:typed}),isPrime=createIsPrime({typed:typed}),acos=createAcos({Complex:Complex,config:config,typed:typed}),acot=createAcot({BigNumber:BigNumber,typed:typed}),acsc=createAcsc({BigNumber:BigNumber,Complex:Complex,config:config,typed:typed}),asec=createAsec({BigNumber:BigNumber,Complex:Complex,config:config,typed:typed}),asin=createAsin({Complex:Complex,config:config,typed:typed}),atan=createAtan({typed:typed}),atanh=createAtanh({Complex:Complex,config:config,typed:typed}),cosh=createCosh({typed:typed}),coth=createCoth({BigNumber:BigNumber,typed:typed}),csch=createCsch({BigNumber:BigNumber,typed:typed}),sech=createSech({BigNumber:BigNumber,typed:typed}),sinh=createSinh({typed:typed}),tanh=createTanh({typed:typed}),combinations=createCombinations({typed:typed}),pickRandom=createPickRandom({config:config,typed:typed}),randomInt=createRandomInt({config:config,typed:typed}),LN2=createLN2({BigNumber:BigNumber,config:config}),clone=createClone({typed:typed}),hasNumericValue=createHasNumericValue({isNumeric:isNumeric$1,typed:typed}),typeOf=createTypeOf({typed:typed}),string$1=createString({typed:typed}),fraction=createFraction({Fraction:Fraction,typed:typed}),unaryMinus=createUnaryMinus({typed:typed}),addScalar=createAddScalar({typed:typed}),exp=createExp({typed:typed}),log2=createLog2({Complex:Complex,config:config,typed:typed}),sqrt=createSqrt({Complex:Complex,config:config,typed:typed}),conj=createConj({typed:typed}),getMatrixDataType=createGetMatrixDataType({typed:typed}),mode=createMode({isNaN:isNaN$1,isNumeric:isNumeric$1,typed:typed}),bin=createBin({format:format,typed:typed}),acosh=createAcosh({Complex:Complex,config:config,typed:typed}),acsch=createAcsch({BigNumber:BigNumber,typed:typed}),asinh=createAsinh({typed:typed}),cos=createCos({typed:typed}),csc=createCsc({BigNumber:BigNumber,typed:typed}),sin=createSin({typed:typed}),combinationsWithRep=createCombinationsWithRep({typed:typed}),random=createRandom({config:config,typed:typed}),SQRT2=createSQRT2({BigNumber:BigNumber,config:config}),isNegative=createIsNegative({typed:typed}),SparseMatrix=createSparseMatrixClass({Matrix:Matrix,equalScalar:equalScalar,typed:typed}),matrix=createMatrix({DenseMatrix:DenseMatrix,Matrix:Matrix,SparseMatrix:SparseMatrix,typed:typed}),abs=createAbs({typed:typed}),gcd=createGcd({BigNumber:BigNumber,DenseMatrix:DenseMatrix,equalScalar:equalScalar,matrix:matrix,typed:typed}),mod=createMod({DenseMatrix:DenseMatrix,equalScalar:equalScalar,matrix:matrix,typed:typed}),nthRoot=createNthRoot({BigNumber:BigNumber,equalScalar:equalScalar,matrix:matrix,typed:typed}),xgcd=createXgcd({BigNumber:BigNumber,config:config,matrix:matrix,typed:typed}),bitAnd=createBitAnd({equalScalar:equalScalar,matrix:matrix,typed:typed}),bitXor=createBitXor({DenseMatrix:DenseMatrix,matrix:matrix,typed:typed}),or=createOr({DenseMatrix:DenseMatrix,equalScalar:equalScalar,matrix:matrix,typed:typed}),concat=createConcat({isInteger:isInteger,matrix:matrix,typed:typed}),diag=createDiag({DenseMatrix:DenseMatrix,SparseMatrix:SparseMatrix,matrix:matrix,typed:typed}),identity=createIdentity({BigNumber:BigNumber,DenseMatrix:DenseMatrix,SparseMatrix:SparseMatrix,config:config,matrix:matrix,typed:typed}),ones=createOnes({BigNumber:BigNumber,config:config,matrix:matrix,typed:typed}),reshape=createReshape({isInteger:isInteger,matrix:matrix,typed:typed}),size=createSize({matrix:matrix,config:config,typed:typed}),subset=createSubset({matrix:matrix,typed:typed}),zeros=createZeros({BigNumber:BigNumber,config:config,matrix:matrix,typed:typed}),hex$1=createHex({format:format,typed:typed}),round=createRound({BigNumber:BigNumber,DenseMatrix:DenseMatrix,equalScalar:equalScalar,matrix:matrix,typed:typed,zeros:zeros}),leftShift=createLeftShift({DenseMatrix:DenseMatrix,equalScalar:equalScalar,matrix:matrix,typed:typed,zeros:zeros}),rightLogShift=createRightLogShift({DenseMatrix:DenseMatrix,equalScalar:equalScalar,matrix:matrix,typed:typed,zeros:zeros}),compare=createCompare({BigNumber:BigNumber,DenseMatrix:DenseMatrix,Fraction:Fraction,config:config,equalScalar:equalScalar,matrix:matrix,typed:typed}),compareText=createCompareText({matrix:matrix,typed:typed}),smaller=createSmaller({DenseMatrix:DenseMatrix,config:config,matrix:matrix,typed:typed}),larger=createLarger({DenseMatrix:DenseMatrix,config:config,matrix:matrix,typed:typed}),unequal=createUnequal({DenseMatrix:DenseMatrix,config:config,equalScalar:equalScalar,matrix:matrix,typed:typed}),ImmutableDenseMatrix=createImmutableDenseMatrixClass({DenseMatrix:DenseMatrix,smaller:smaller}),FibonacciHeap=createFibonacciHeapClass({larger:larger,smaller:smaller}),sparse=createSparse({SparseMatrix:SparseMatrix,typed:typed}),acoth=createAcoth({BigNumber:BigNumber,Complex:Complex,config:config,typed:typed}),atan2=createAtan2({BigNumber:BigNumber,DenseMatrix:DenseMatrix,equalScalar:equalScalar,matrix:matrix,typed:typed}),sec=createSec({BigNumber:BigNumber,typed:typed}),add$1=createAdd({DenseMatrix:DenseMatrix,SparseMatrix:SparseMatrix,addScalar:addScalar,equalScalar:equalScalar,matrix:matrix,typed:typed}),dot=createDot({addScalar:addScalar,conj:conj,multiplyScalar:multiplyScalar,size:size,typed:typed}),composition=createComposition({addScalar:addScalar,combinations:combinations,isInteger:isInteger,isNegative:isNegative,isPositive:isPositive,larger:larger,typed:typed}),isZero=createIsZero({typed:typed}),matrixFromFunction=createMatrixFromFunction({isZero:isZero,matrix:matrix,typed:typed}),cbrt=createCbrt({BigNumber:BigNumber,Complex:Complex,Fraction:Fraction,config:config,isNegative:isNegative,matrix:matrix,typed:typed,unaryMinus:unaryMinus}),floor=createFloor({config:config,equalScalar:equalScalar,matrix:matrix,round:round,typed:typed}),multiply$1=createMultiply({addScalar:addScalar,dot:dot,equalScalar:equalScalar,matrix:matrix,multiplyScalar:multiplyScalar,typed:typed}),dotMultiply=createDotMultiply({equalScalar:equalScalar,matrix:matrix,multiplyScalar:multiplyScalar,typed:typed}),re=createRe({typed:typed}),flatten=createFlatten({matrix:matrix,typed:typed}),resize=createResize({config:config,matrix:matrix}),squeeze=createSqueeze({matrix:matrix,typed:typed}),to=createTo({matrix:matrix,typed:typed}),pow=createPow({Complex:Complex,config:config,fraction:fraction,identity:identity,matrix:matrix,multiply:multiply$1,number:number,typed:typed}),dotPow=createDotPow({DenseMatrix:DenseMatrix,equalScalar:equalScalar,matrix:matrix,pow:pow,typed:typed}),rightArithShift=createRightArithShift({DenseMatrix:DenseMatrix,equalScalar:equalScalar,matrix:matrix,typed:typed,zeros:zeros}),compareNatural=createCompareNatural({compare:compare,typed:typed}),equalText=createEqualText({compareText:compareText,isZero:isZero,typed:typed}),largerEq=createLargerEq({DenseMatrix:DenseMatrix,config:config,matrix:matrix,typed:typed}),partitionSelect=createPartitionSelect({compare:compare,isNaN:isNaN$1,isNumeric:isNumeric$1,typed:typed}),Index=createIndexClass({ImmutableDenseMatrix:ImmutableDenseMatrix}),asech=createAsech({BigNumber:BigNumber,Complex:Complex,config:config,typed:typed}),tan=createTan({typed:typed}),setDifference=createSetDifference({DenseMatrix:DenseMatrix,Index:Index,compareNatural:compareNatural,size:size,subset:subset,typed:typed}),setIntersect=createSetIntersect({DenseMatrix:DenseMatrix,Index:Index,compareNatural:compareNatural,size:size,subset:subset,typed:typed}),setMultiplicity=createSetMultiplicity({Index:Index,compareNatural:compareNatural,size:size,subset:subset,typed:typed}),setSize=createSetSize({compareNatural:compareNatural,typed:typed}),trace=createTrace({add:add$1,matrix:matrix,typed:typed}),quantileSeq=createQuantileSeq({add:add$1,compare:compare,multiply:multiply$1,partitionSelect:partitionSelect,typed:typed}),gamma=createGamma({BigNumber:BigNumber,Complex:Complex,config:config,multiplyScalar:multiplyScalar,pow:pow,typed:typed}),bignumber=createBignumber({BigNumber:BigNumber,typed:typed}),matrixFromColumns=createMatrixFromColumns({flatten:flatten,matrix:matrix,size:size,typed:typed}),lcm=createLcm({equalScalar:equalScalar,matrix:matrix,typed:typed}),bitOr=createBitOr({DenseMatrix:DenseMatrix,equalScalar:equalScalar,matrix:matrix,typed:typed}),kron=createKron({matrix:matrix,multiplyScalar:multiplyScalar,typed:typed}),transpose=createTranspose({matrix:matrix,typed:typed}),numeric=createNumeric({bignumber:bignumber,fraction:fraction,number:number}),and=createAnd({equalScalar:equalScalar,matrix:matrix,not:not,typed:typed,zeros:zeros}),smallerEq=createSmallerEq({DenseMatrix:DenseMatrix,config:config,matrix:matrix,typed:typed}),sort=createSort({compare:compare,compareNatural:compareNatural,matrix:matrix,typed:typed}),min=createMin({config:config,numeric:numeric,smaller:smaller,typed:typed}),cot=createCot({BigNumber:BigNumber,typed:typed}),setDistinct=createSetDistinct({DenseMatrix:DenseMatrix,Index:Index,compareNatural:compareNatural,size:size,subset:subset,typed:typed}),setPowerset=createSetPowerset({Index:Index,compareNatural:compareNatural,size:size,subset:subset,typed:typed}),index=createIndex({Index:Index,typed:typed}),sum=createSum({add:add$1,config:config,numeric:numeric,typed:typed}),factorial=createFactorial({gamma:gamma,typed:typed}),permutations=createPermutations({factorial:factorial,typed:typed}),matrixFromRows=createMatrixFromRows({flatten:flatten,matrix:matrix,size:size,typed:typed}),subtract=createSubtract({DenseMatrix:DenseMatrix,addScalar:addScalar,equalScalar:equalScalar,matrix:matrix,typed:typed,unaryMinus:unaryMinus}),cross=createCross({matrix:matrix,multiply:multiply$1,subtract:subtract,typed:typed}),range=createRange({bignumber:bignumber,matrix:matrix,config:config,larger:larger,largerEq:largerEq,smaller:smaller,smallerEq:smallerEq,typed:typed}),row=createRow({Index:Index,matrix:matrix,range:range,typed:typed}),prod=createProd({config:config,multiplyScalar:multiplyScalar,numeric:numeric,typed:typed}),equal=createEqual({DenseMatrix:DenseMatrix,equalScalar:equalScalar,matrix:matrix,typed:typed}),max=createMax({config:config,larger:larger,numeric:numeric,typed:typed}),setCartesian=createSetCartesian({DenseMatrix:DenseMatrix,Index:Index,compareNatural:compareNatural,size:size,subset:subset,typed:typed}),setSymDifference=createSetSymDifference({Index:Index,concat:concat,setDifference:setDifference,size:size,subset:subset,typed:typed}),ceil=createCeil({config:config,equalScalar:equalScalar,matrix:matrix,round:round,typed:typed}),xor=createXor({DenseMatrix:DenseMatrix,matrix:matrix,typed:typed}),count=createCount({prod:prod,size:size,typed:typed}),ctranspose=createCtranspose({conj:conj,transpose:transpose,typed:typed}),deepEqual=createDeepEqual({equal:equal,typed:typed}),setIsSubset=createSetIsSubset({Index:Index,compareNatural:compareNatural,size:size,subset:subset,typed:typed}),fix=createFix({Complex:Complex,ceil:ceil,floor:floor,matrix:matrix,typed:typed}),diff=createDiff({matrix:matrix,number:number,subtract:subtract,typed:typed}),divideScalar=createDivideScalar({numeric:numeric,typed:typed}),nthRoots=createNthRoots({Complex:Complex,config:config,divideScalar:divideScalar,typed:typed}),lsolve=createLsolve({DenseMatrix:DenseMatrix,divideScalar:divideScalar,equalScalar:equalScalar,matrix:matrix,multiplyScalar:multiplyScalar,subtract:subtract,typed:typed}),lsolveAll=createLsolveAll({DenseMatrix:DenseMatrix,divideScalar:divideScalar,equalScalar:equalScalar,matrix:matrix,multiplyScalar:multiplyScalar,subtract:subtract,typed:typed}),Spa=createSpaClass({FibonacciHeap:FibonacciHeap,addScalar:addScalar,equalScalar:equalScalar}),setUnion=createSetUnion({Index:Index,concat:concat,setIntersect:setIntersect,setSymDifference:setSymDifference,size:size,subset:subset,typed:typed}),lup=createLup({DenseMatrix:DenseMatrix,Spa:Spa,SparseMatrix:SparseMatrix,abs:abs,addScalar:addScalar,divideScalar:divideScalar,equalScalar:equalScalar,larger:larger,matrix:matrix,multiplyScalar:multiplyScalar,subtract:subtract,typed:typed,unaryMinus:unaryMinus}),slu=createSlu({SparseMatrix:SparseMatrix,abs:abs,add:add$1,divideScalar:divideScalar,larger:larger,largerEq:largerEq,multiply:multiply$1,subtract:subtract,transpose:transpose,typed:typed}),det=createDet({lup:lup,matrix:matrix,multiply:multiply$1,subtract:subtract,typed:typed,unaryMinus:unaryMinus}),distance=createDistance({abs:abs,addScalar:addScalar,divideScalar:divideScalar,multiplyScalar:multiplyScalar,sqrt:sqrt,subtract:subtract,typed:typed,unaryMinus:unaryMinus}),stirlingS2=createStirlingS2({addScalar:addScalar,combinations:combinations,divideScalar:divideScalar,factorial:factorial,isInteger:isInteger,isNegative:isNegative,larger:larger,multiplyScalar:multiplyScalar,pow:pow,subtract:subtract,typed:typed}),catalan=createCatalan({addScalar:addScalar,combinations:combinations,divideScalar:divideScalar,isInteger:isInteger,isNegative:isNegative,multiplyScalar:multiplyScalar,typed:typed}),column=createColumn({Index:Index,matrix:matrix,range:range,typed:typed}),log=createLog({Complex:Complex,config:config,divideScalar:divideScalar,typed:typed}),dotDivide=createDotDivide({DenseMatrix:DenseMatrix,divideScalar:divideScalar,equalScalar:equalScalar,matrix:matrix,typed:typed}),usolveAll=createUsolveAll({DenseMatrix:DenseMatrix,divideScalar:divideScalar,equalScalar:equalScalar,matrix:matrix,multiplyScalar:multiplyScalar,subtract:subtract,typed:typed}),hypot=createHypot({abs:abs,addScalar:addScalar,divideScalar:divideScalar,isPositive:isPositive,multiplyScalar:multiplyScalar,smaller:smaller,sqrt:sqrt,typed:typed}),qr=createQr({addScalar:addScalar,complex:complex,conj:conj,divideScalar:divideScalar,equal:equal,identity:identity,isZero:isZero,matrix:matrix,multiplyScalar:multiplyScalar,sign:sign,sqrt:sqrt,subtract:subtract,typed:typed,unaryMinus:unaryMinus,zeros:zeros}),inv=createInv({abs:abs,addScalar:addScalar,det:det,divideScalar:divideScalar,identity:identity,matrix:matrix,multiply:multiply$1,typed:typed,unaryMinus:unaryMinus}),expm=createExpm({abs:abs,add:add$1,identity:identity,inv:inv,multiply:multiply$1,typed:typed}),divide=createDivide({divideScalar:divideScalar,equalScalar:equalScalar,inv:inv,matrix:matrix,multiply:multiply$1,typed:typed}),mean=createMean({add:add$1,divide:divide,typed:typed}),variance=createVariance({add:add$1,apply:apply,divide:divide,isNaN:isNaN$1,multiply:multiply$1,subtract:subtract,typed:typed}),kldivergence=createKldivergence({divide:divide,dotDivide:dotDivide,isNumeric:isNumeric$1,log:log,matrix:matrix,multiply:multiply$1,sum:sum,typed:typed}),bellNumbers=createBellNumbers({addScalar:addScalar,isInteger:isInteger,isNegative:isNegative,stirlingS2:stirlingS2,typed:typed}),log1p=createLog1p({Complex:Complex,config:config,divideScalar:divideScalar,log:log,typed:typed}),Unit=createUnitClass({BigNumber:BigNumber,Complex:Complex,Fraction:Fraction,abs:abs,addScalar:addScalar,config:config,divideScalar:divideScalar,equal:equal,fix:fix,format:format,isNumeric:isNumeric$1,multiplyScalar:multiplyScalar,number:number,pow:pow,round:round,subtract:subtract}),createUnit=createCreateUnit({Unit:Unit,typed:typed}),sqrtm=createSqrtm({abs:abs,add:add$1,identity:identity,inv:inv,max:max,multiply:multiply$1,size:size,sqrt:sqrt,subtract:subtract,typed:typed}),median=createMedian({add:add$1,compare:compare,divide:divide,partitionSelect:partitionSelect,typed:typed}),std=createStd({sqrt:sqrt,typed:typed,variance:variance}),atomicMass=createAtomicMass({BigNumber:BigNumber,Unit:Unit,config:config}),bohrMagneton=createBohrMagneton({BigNumber:BigNumber,Unit:Unit,config:config}),boltzmann=createBoltzmann({BigNumber:BigNumber,Unit:Unit,config:config}),conductanceQuantum=createConductanceQuantum({BigNumber:BigNumber,Unit:Unit,config:config}),deuteronMass=createDeuteronMass({BigNumber:BigNumber,Unit:Unit,config:config}),electronMass=createElectronMass({BigNumber:BigNumber,Unit:Unit,config:config}),faraday=createFaraday({BigNumber:BigNumber,Unit:Unit,config:config}),firstRadiation=createFirstRadiation({BigNumber:BigNumber,Unit:Unit,config:config}),gravitationConstant=createGravitationConstant({BigNumber:BigNumber,Unit:Unit,config:config}),hartreeEnergy=createHartreeEnergy({BigNumber:BigNumber,Unit:Unit,config:config}),klitzing=createKlitzing({BigNumber:BigNumber,Unit:Unit,config:config}),magneticConstant=createMagneticConstant({BigNumber:BigNumber,Unit:Unit,config:config}),molarMass=createMolarMass({BigNumber:BigNumber,Unit:Unit,config:config}),molarPlanckConstant=createMolarPlanckConstant({BigNumber:BigNumber,Unit:Unit,config:config}),neutronMass=createNeutronMass({BigNumber:BigNumber,Unit:Unit,config:config}),planckCharge=createPlanckCharge({BigNumber:BigNumber,Unit:Unit,config:config}),planckLength=createPlanckLength({BigNumber:BigNumber,Unit:Unit,config:config}),planckTemperature=createPlanckTemperature({BigNumber:BigNumber,Unit:Unit,config:config}),protonMass=createProtonMass({BigNumber:BigNumber,Unit:Unit,config:config}),reducedPlanckConstant=createReducedPlanckConstant({BigNumber:BigNumber,Unit:Unit,config:config}),secondRadiation=createSecondRadiation({BigNumber:BigNumber,Unit:Unit,config:config}),stefanBoltzmann=createStefanBoltzmann({BigNumber:BigNumber,Unit:Unit,config:config}),vacuumImpedance=createVacuumImpedance({BigNumber:BigNumber,Unit:Unit,config:config}),usolve=createUsolve({DenseMatrix:DenseMatrix,divideScalar:divideScalar,equalScalar:equalScalar,matrix:matrix,multiplyScalar:multiplyScalar,subtract:subtract,typed:typed}),lusolve=createLusolve({DenseMatrix:DenseMatrix,lsolve:lsolve,lup:lup,matrix:matrix,slu:slu,typed:typed,usolve:usolve}),eigs=createEigs({abs:abs,add:add$1,addScalar:addScalar,atan:atan,bignumber:bignumber,column:column,complex:complex,config:config,cos:cos,diag:diag,divideScalar:divideScalar,dot:dot,equal:equal,flatten:flatten,im:im,inv:inv,larger:larger,matrix:matrix,matrixFromColumns:matrixFromColumns,multiply:multiply$1,multiplyScalar:multiplyScalar,number:number,qr:qr,re:re,sin:sin,smaller:smaller,sqrt:sqrt,subtract:subtract,typed:typed,usolve:usolve,usolveAll:usolveAll}),mad=createMad({abs:abs,map:map,median:median,subtract:subtract,typed:typed}),avogadro=createAvogadro({BigNumber:BigNumber,Unit:Unit,config:config}),classicalElectronRadius=createClassicalElectronRadius({BigNumber:BigNumber,Unit:Unit,config:config}),electricConstant=createElectricConstant({BigNumber:BigNumber,Unit:Unit,config:config}),fermiCoupling=createFermiCoupling({BigNumber:BigNumber,Unit:Unit,config:config}),gravity=createGravity({BigNumber:BigNumber,Unit:Unit,config:config}),loschmidt=createLoschmidt({BigNumber:BigNumber,Unit:Unit,config:config}),molarMassC12=createMolarMassC12({BigNumber:BigNumber,Unit:Unit,config:config}),nuclearMagneton=createNuclearMagneton({BigNumber:BigNumber,Unit:Unit,config:config}),planckMass=createPlanckMass({BigNumber:BigNumber,Unit:Unit,config:config}),quantumOfCirculation=createQuantumOfCirculation({BigNumber:BigNumber,Unit:Unit,config:config}),speedOfLight=createSpeedOfLight({BigNumber:BigNumber,Unit:Unit,config:config}),wienDisplacement=createWienDisplacement({BigNumber:BigNumber,Unit:Unit,config:config}),unit=createUnitFunction({Unit:Unit,typed:typed}),intersect=createIntersect({abs:abs,add:add$1,addScalar:addScalar,config:config,divideScalar:divideScalar,equalScalar:equalScalar,flatten:flatten,matrix:matrix,multiply:multiply$1,multiplyScalar:multiplyScalar,smaller:smaller,subtract:subtract,typed:typed}),coulomb=createCoulomb({BigNumber:BigNumber,Unit:Unit,config:config}),gasConstant=createGasConstant({BigNumber:BigNumber,Unit:Unit,config:config}),magneticFluxQuantum=createMagneticFluxQuantum({BigNumber:BigNumber,Unit:Unit,config:config}),planckConstant=createPlanckConstant({BigNumber:BigNumber,Unit:Unit,config:config}),rydberg=createRydberg({BigNumber:BigNumber,Unit:Unit,config:config}),norm=createNorm({abs:abs,add:add$1,conj:conj,ctranspose:ctranspose,eigs:eigs,equalScalar:equalScalar,larger:larger,matrix:matrix,multiply:multiply$1,pow:pow,smaller:smaller,sqrt:sqrt,typed:typed}),elementaryCharge=createElementaryCharge({BigNumber:BigNumber,Unit:Unit,config:config}),molarVolume=createMolarVolume({BigNumber:BigNumber,Unit:Unit,config:config}),thomsonCrossSection=createThomsonCrossSection({BigNumber:BigNumber,Unit:Unit,config:config}),rotationMatrix=createRotationMatrix({BigNumber:BigNumber,DenseMatrix:DenseMatrix,SparseMatrix:SparseMatrix,addScalar:addScalar,config:config,cos:cos,matrix:matrix,multiplyScalar:multiplyScalar,norm:norm,sin:sin,typed:typed,unaryMinus:unaryMinus}),bohrRadius=createBohrRadius({BigNumber:BigNumber,Unit:Unit,config:config}),planckTime=createPlanckTime({BigNumber:BigNumber,Unit:Unit,config:config}),rotate=createRotate({multiply:multiply$1,rotationMatrix:rotationMatrix,typed:typed}),multinomial=createMultinomial({add:add$1,divide:divide,factorial:factorial,isInteger:isInteger,isPositive:isPositive,multiply:multiply$1,typed:typed}),inverseConductanceQuantum=createInverseConductanceQuantum({BigNumber:BigNumber,Unit:Unit,config:config}),math={},mathWithTransform={},classes={},Node=createNode({mathWithTransform:mathWithTransform}),ArrayNode=createArrayNode({Node:Node}),BlockNode=createBlockNode({Node:Node,ResultSet:ResultSet}),ConstantNode=createConstantNode({Node:Node}),ObjectNode=createObjectNode({Node:Node}),ParenthesisNode=createParenthesisNode({Node:Node}),RelationalNode=createRelationalNode({Node:Node}),Chain=createChainClass({math:math}),reviver=createReviver({classes:classes}),ConditionalNode=createConditionalNode({Node:Node}),OperatorNode=createOperatorNode({Node:Node}),RangeNode=createRangeNode({Node:Node}),FunctionAssignmentNode=createFunctionAssignmentNode({Node:Node,typed:typed}),chain=createChain({Chain:Chain,typed:typed}),AccessorNode=createAccessorNode({Node:Node,subset:subset}),IndexNode=createIndexNode({Node:Node,Range:Range,size:size}),AssignmentNode=createAssignmentNode({matrix:matrix,Node:Node,subset:subset}),SymbolNode=createSymbolNode({Unit:Unit,Node:Node,math:math}),FunctionNode=createFunctionNode({Node:Node,SymbolNode:SymbolNode,math:math}),parse=createParse({AccessorNode:AccessorNode,ArrayNode:ArrayNode,AssignmentNode:AssignmentNode,BlockNode:BlockNode,ConditionalNode:ConditionalNode,ConstantNode:ConstantNode,FunctionAssignmentNode:FunctionAssignmentNode,FunctionNode:FunctionNode,IndexNode:IndexNode,ObjectNode:ObjectNode,OperatorNode:OperatorNode,ParenthesisNode:ParenthesisNode,RangeNode:RangeNode,RelationalNode:RelationalNode,SymbolNode:SymbolNode,config:config,numeric:numeric,typed:typed}),evaluate$1=createEvaluate({parse:parse,typed:typed}),Help=createHelpClass({parse:parse}),simplify=createSimplify({bignumber:bignumber,fraction:fraction,ConstantNode:ConstantNode,FunctionNode:FunctionNode,OperatorNode:OperatorNode,ParenthesisNode:ParenthesisNode,SymbolNode:SymbolNode,add:add$1,config:config,divide:divide,equal:equal,isZero:isZero,mathWithTransform:mathWithTransform,multiply:multiply$1,parse:parse,pow:pow,subtract:subtract,typed:typed}),rationalize=createRationalize({bignumber:bignumber,fraction:fraction,ConstantNode:ConstantNode,FunctionNode:FunctionNode,OperatorNode:OperatorNode,ParenthesisNode:ParenthesisNode,SymbolNode:SymbolNode,add:add$1,config:config,divide:divide,equal:equal,isZero:isZero,mathWithTransform:mathWithTransform,multiply:multiply$1,parse:parse,pow:pow,simplify:simplify,subtract:subtract,typed:typed}),Parser$1=createParserClass({evaluate:evaluate$1}),help=createHelp({Help:Help,mathWithTransform:mathWithTransform,typed:typed}),derivative=createDerivative({ConstantNode:ConstantNode,FunctionNode:FunctionNode,OperatorNode:OperatorNode,ParenthesisNode:ParenthesisNode,SymbolNode:SymbolNode,config:config,equal:equal,isZero:isZero,numeric:numeric,parse:parse,simplify:simplify,typed:typed}),parser=createParser({Parser:Parser$1,typed:typed}),compile=createCompile({parse:parse,typed:typed});_extends$1(math,{reviver:reviver,false:_false,null:_null,true:_true,replacer:replacer,i:i,LN10:LN10,LOG10E:LOG10E,NaN:_NaN,pi:pi,SQRT1_2:SQRT1_2,tau:tau,efimovFactor:efimovFactor,fineStructure:fineStructure,sackurTetrode:sackurTetrode,weakMixingAngle:weakMixingAngle,e:e,Infinity:_Infinity,LOG2E:LOG2E,PI:pi,version:version,E:e,phi:phi,typed:typed,isInteger:isInteger,isNumeric:isNumeric$1,isPositive:isPositive,isNaN:isNaN$1,equalScalar:equalScalar,number:number,boolean:boolean,complex:complex,splitUnit:splitUnit,unaryPlus:unaryPlus,apply:apply,cube:cube,expm1:expm1,log10:log10,multiplyScalar:multiplyScalar,sign:sign,square:square,bitNot:bitNot,arg:arg,im:im,not:not,filter:filter,forEach:forEach,map:map,erf:erf,format:format,oct:oct,print:print,isPrime:isPrime,acos:acos,acot:acot,acsc:acsc,asec:asec,asin:asin,atan:atan,atanh:atanh,cosh:cosh,coth:coth,csch:csch,sech:sech,sinh:sinh,tanh:tanh,chain:chain,combinations:combinations,pickRandom:pickRandom,randomInt:randomInt,LN2:LN2,clone:clone,hasNumericValue:hasNumericValue,typeOf:typeOf,string:string$1,fraction:fraction,unaryMinus:unaryMinus,addScalar:addScalar,exp:exp,log2:log2,sqrt:sqrt,conj:conj,getMatrixDataType:getMatrixDataType,mode:mode,bin:bin,acosh:acosh,acsch:acsch,asinh:asinh,cos:cos,csc:csc,sin:sin,combinationsWithRep:combinationsWithRep,random:random,SQRT2:SQRT2,isNegative:isNegative,matrix:matrix,abs:abs,gcd:gcd,mod:mod,nthRoot:nthRoot,xgcd:xgcd,bitAnd:bitAnd,bitXor:bitXor,or:or,concat:concat,diag:diag,identity:identity,ones:ones,reshape:reshape,size:size,subset:subset,zeros:zeros,hex:hex$1,round:round,leftShift:leftShift,rightLogShift:rightLogShift,compare:compare,compareText:compareText,smaller:smaller,larger:larger,unequal:unequal,sparse:sparse,acoth:acoth,atan2:atan2,sec:sec,add:add$1,dot:dot,composition:composition,isZero:isZero,matrixFromFunction:matrixFromFunction,cbrt:cbrt,floor:floor,multiply:multiply$1,dotMultiply:dotMultiply,re:re,flatten:flatten,resize:resize,squeeze:squeeze,to:to,pow:pow,dotPow:dotPow,rightArithShift:rightArithShift,compareNatural:compareNatural,equalText:equalText,largerEq:largerEq,partitionSelect:partitionSelect,asech:asech,tan:tan,setDifference:setDifference,setIntersect:setIntersect,setMultiplicity:setMultiplicity,setSize:setSize,trace:trace,quantileSeq:quantileSeq,gamma:gamma,bignumber:bignumber,matrixFromColumns:matrixFromColumns,lcm:lcm,bitOr:bitOr,kron:kron,transpose:transpose,numeric:numeric,and:and,smallerEq:smallerEq,sort:sort,min:min,cot:cot,setDistinct:setDistinct,setPowerset:setPowerset,index:index,sum:sum,factorial:factorial,permutations:permutations,matrixFromRows:matrixFromRows,subtract:subtract,cross:cross,range:range,row:row,prod:prod,equal:equal,max:max,setCartesian:setCartesian,setSymDifference:setSymDifference,ceil:ceil,xor:xor,count:count,ctranspose:ctranspose,deepEqual:deepEqual,setIsSubset:setIsSubset,fix:fix,diff:diff,divideScalar:divideScalar,nthRoots:nthRoots,lsolve:lsolve,lsolveAll:lsolveAll,setUnion:setUnion,lup:lup,slu:slu,det:det,distance:distance,stirlingS2:stirlingS2,catalan:catalan,column:column,log:log,dotDivide:dotDivide,usolveAll:usolveAll,hypot:hypot,qr:qr,inv:inv,expm:expm,divide:divide,mean:mean,variance:variance,kldivergence:kldivergence,bellNumbers:bellNumbers,log1p:log1p,createUnit:createUnit,sqrtm:sqrtm,median:median,std:std,atomicMass:atomicMass,bohrMagneton:bohrMagneton,boltzmann:boltzmann,conductanceQuantum:conductanceQuantum,deuteronMass:deuteronMass,electronMass:electronMass,faraday:faraday,firstRadiation:firstRadiation,gravitationConstant:gravitationConstant,hartreeEnergy:hartreeEnergy,klitzing:klitzing,magneticConstant:magneticConstant,molarMass:molarMass,molarPlanckConstant:molarPlanckConstant,neutronMass:neutronMass,planckCharge:planckCharge,planckLength:planckLength,planckTemperature:planckTemperature,protonMass:protonMass,reducedPlanckConstant:reducedPlanckConstant,secondRadiation:secondRadiation,stefanBoltzmann:stefanBoltzmann,vacuumImpedance:vacuumImpedance,usolve:usolve,lusolve:lusolve,eigs:eigs,mad:mad,avogadro:avogadro,classicalElectronRadius:classicalElectronRadius,electricConstant:electricConstant,fermiCoupling:fermiCoupling,gravity:gravity,loschmidt:loschmidt,molarMassC12:molarMassC12,nuclearMagneton:nuclearMagneton,planckMass:planckMass,quantumOfCirculation:quantumOfCirculation,speedOfLight:speedOfLight,wienDisplacement:wienDisplacement,unit:unit,parse:parse,evaluate:evaluate$1,intersect:intersect,simplify:simplify,rationalize:rationalize,coulomb:coulomb,gasConstant:gasConstant,magneticFluxQuantum:magneticFluxQuantum,planckConstant:planckConstant,rydberg:rydberg,norm:norm,help:help,derivative:derivative,elementaryCharge:elementaryCharge,molarVolume:molarVolume,thomsonCrossSection:thomsonCrossSection,rotationMatrix:rotationMatrix,parser:parser,bohrRadius:bohrRadius,planckTime:planckTime,rotate:rotate,multinomial:multinomial,compile:compile,inverseConductanceQuantum:inverseConductanceQuantum,config:config}),_extends$1(mathWithTransform,math,{apply:createApplyTransform({isInteger:isInteger,typed:typed}),filter:createFilterTransform({typed:typed}),map:createMapTransform({typed:typed}),forEach:createForEachTransform({typed:typed}),subset:createSubsetTransform({matrix:matrix,typed:typed}),index:createIndexTransform({Index:Index}),concat:createConcatTransform({isInteger:isInteger,matrix:matrix,typed:typed}),max:createMaxTransform({config:config,larger:larger,numeric:numeric,typed:typed}),min:createMinTransform({config:config,numeric:numeric,smaller:smaller,typed:typed}),sum:createSumTransform({add:add$1,config:config,numeric:numeric,typed:typed}),column:createColumnTransform({Index:Index,matrix:matrix,range:range,typed:typed}),range:createRangeTransform({bignumber:bignumber,matrix:matrix,config:config,larger:larger,largerEq:largerEq,smaller:smaller,smallerEq:smallerEq,typed:typed}),diff:createDiffTransform({bignumber:bignumber,matrix:matrix,number:number,subtract:subtract,typed:typed}),row:createRowTransform({Index:Index,matrix:matrix,range:range,typed:typed}),mean:createMeanTransform({add:add$1,divide:divide,typed:typed}),variance:createVarianceTransform({add:add$1,apply:apply,divide:divide,isNaN:isNaN$1,multiply:multiply$1,subtract:subtract,typed:typed}),std:createStdTransform({sqrt:sqrt,typed:typed,variance:variance})}),_extends$1(classes,{ResultSet:ResultSet,Complex:Complex,Range:Range,Node:Node,ArrayNode:ArrayNode,BlockNode:BlockNode,ConstantNode:ConstantNode,ObjectNode:ObjectNode,ParenthesisNode:ParenthesisNode,RelationalNode:RelationalNode,Chain:Chain,BigNumber:BigNumber,Matrix:Matrix,ConditionalNode:ConditionalNode,OperatorNode:OperatorNode,Fraction:Fraction,RangeNode:RangeNode,DenseMatrix:DenseMatrix,FunctionAssignmentNode:FunctionAssignmentNode,SparseMatrix:SparseMatrix,ImmutableDenseMatrix:ImmutableDenseMatrix,FibonacciHeap:FibonacciHeap,AccessorNode:AccessorNode,IndexNode:IndexNode,Index:Index,AssignmentNode:AssignmentNode,Spa:Spa,Unit:Unit,SymbolNode:SymbolNode,FunctionNode:FunctionNode,Help:Help,Parser:Parser$1}),Chain.createProxy(math);class CompareOperatorError extends TypeError{constructor(e){super(`Operator "${e}" is invalid`),TypeError.captureStackTrace&&TypeError.captureStackTrace(this,CompareOperatorError),this.name="CompareOperatorError",this.operator=e}}class DataFormatError extends Error{constructor(e){super("Invalid data format: "+e),Error.captureStackTrace&&Error.captureStackTrace(this,DataFormatError),this.name="ImportError",this.data=e}}class DieActionValueError extends Error{constructor(e,t=null){super(`Die "${e}" must have more than 1 possible value to `+(t||"do this action")),Error.captureStackTrace&&Error.captureStackTrace(this,DieActionValueError),this.name="DieActionValueError",this.action=t,this.die=e}}class NotationError extends Error{constructor(e){super(`Notation "${e}" is invalid`),Error.captureStackTrace&&Error.captureStackTrace(this,NotationError),this.name="NotationError",this.notation=e}}class RequiredArgumentError extends Error{constructor(e=null){super("Missing argument"+(e?` "${e}"`:"")),Error.captureStackTrace&&Error.captureStackTrace(this,RequiredArgumentError),this.argumentName=e}}const compareNumbers=(e,t,r)=>{var n=Number(e),i=Number(t);let a;if(Number.isNaN(n)||Number.isNaN(i))return!1;switch(r){case"=":case"==":a=n===i;break;case"<":a=n<i;break;case">":a=i<n;break;case"<=":a=n<=i;break;case">=":a=i<=n;break;case"!":case"!=":a=n!==i;break;default:a=!1}return a},evaluate=e=>evaluate$1(e),isNumeric=e=>("number"==typeof e||"string"==typeof e)&&(!Number.isNaN(e)&&Number.isFinite(Number(e))),isSafeNumber=e=>{if(!isNumeric(e))return!1;e=Number(e);return e<=Number.MAX_SAFE_INTEGER&&e>=Number.MIN_SAFE_INTEGER},sumArray=e=>Array.isArray(e)?e.reduce((e,t)=>e+(isNumeric(t)?parseFloat(""+t):0),0):0,toFixed=(e,t=0)=>parseFloat(parseFloat(""+e).toFixed(t||0)),SMALLEST_UNSAFE_INTEGER=9007199254740992,LARGEST_SAFE_INTEGER=SMALLEST_UNSAFE_INTEGER-1,UINT32_MAX=-1>>>0,UINT32_SIZE=UINT32_MAX+1,INT32_SIZE=UINT32_SIZE/2,INT32_MAX=INT32_SIZE-1,UINT21_SIZE=1<<21,UINT21_MAX=UINT21_SIZE-1;function int32(e){return 0|e.next()}function add(t,r){return 0===r?t:e=>t(e)+r}function int53(e){var t=0|e.next(),e=e.next()>>>0;return(t&UINT21_MAX)*UINT32_SIZE+e+(t&UINT21_SIZE?-SMALLEST_UNSAFE_INTEGER:0)}function int53Full(e){for(;;){var t=0|e.next();if(!(4194304&t)){var r=e.next()>>>0;return(t&UINT21_MAX)*UINT32_SIZE+r+(t&UINT21_SIZE?-SMALLEST_UNSAFE_INTEGER:0)}if(4194304==(8388607&t)&&0==(0|e.next()))return SMALLEST_UNSAFE_INTEGER}}function uint32(e){return e.next()>>>0}function uint53(e){var t=e.next()&UINT21_MAX,e=e.next()>>>0;return t*UINT32_SIZE+e}function uint53Full(e){for(;;){var t=0|e.next();if(!(t&UINT21_SIZE)){var r=e.next()>>>0;return(t&UINT21_MAX)*UINT32_SIZE+r}if(0==(t&UINT21_MAX)&&0==(0|e.next()))return SMALLEST_UNSAFE_INTEGER}}function isPowerOfTwoMinusOne(e){return 0==(e+1&e)}function bitmask(t){return e=>e.next()&t}function downscaleToLoopCheckedRange(e){const r=e+1,n=r*Math.floor(UINT32_SIZE/r);return e=>{let t=0;for(;t=e.next()>>>0,t>=n;);return t%r}}function downscaleToRange(e){return(isPowerOfTwoMinusOne(e)?bitmask:downscaleToLoopCheckedRange)(e)}function isEvenlyDivisibleByMaxInt32(e){return 0==(0|e)}function upscaleWithHighMasking(r){return e=>{var t=e.next()&r,e=e.next()>>>0;return t*UINT32_SIZE+e}}function upscaleToLoopCheckedRange(i){const a=i*Math.floor(SMALLEST_UNSAFE_INTEGER/i);return e=>{let t=0;do{var r=e.next()&UINT21_MAX,n=e.next()>>>0;t=r*UINT32_SIZE+n}while(t>=a);return t%i}}function upscaleWithinU53(e){var t=e+1;if(isEvenlyDivisibleByMaxInt32(t)){e=(t/UINT32_SIZE|0)-1;if(isPowerOfTwoMinusOne(e))return upscaleWithHighMasking(e)}return upscaleToLoopCheckedRange(t)}function upscaleWithinI53AndLoopCheck(i,a){return e=>{let t=0;do{var r=0|e.next(),n=e.next()>>>0;t=(r&UINT21_MAX)*UINT32_SIZE+n+(r&UINT21_SIZE?-SMALLEST_UNSAFE_INTEGER:0)}while(t<i||t>a);return t}}function integer(e,t){if(e=Math.floor(e),t=Math.floor(t),e<-SMALLEST_UNSAFE_INTEGER||!isFinite(e))throw new RangeError("Expected min to be at least "+-SMALLEST_UNSAFE_INTEGER);if(t>SMALLEST_UNSAFE_INTEGER||!isFinite(t))throw new RangeError("Expected max to be at most "+SMALLEST_UNSAFE_INTEGER);var r=t-e;return r<=0||!isFinite(r)?()=>e:r===UINT32_MAX?0===e?uint32:add(int32,e+INT32_SIZE):r<UINT32_MAX?add(downscaleToRange(r),e):r===LARGEST_SAFE_INTEGER?add(uint53,e):r<LARGEST_SAFE_INTEGER?add(upscaleWithinU53(r),e):t-1-e===LARGEST_SAFE_INTEGER?add(uint53Full,e):e===-SMALLEST_UNSAFE_INTEGER&&t===SMALLEST_UNSAFE_INTEGER?int53Full:e===-SMALLEST_UNSAFE_INTEGER&&t===LARGEST_SAFE_INTEGER?int53:e===-LARGEST_SAFE_INTEGER&&t===SMALLEST_UNSAFE_INTEGER?add(int53,1):t===SMALLEST_UNSAFE_INTEGER?add(upscaleWithinI53AndLoopCheck(e-1,t-1),1):upscaleWithinI53AndLoopCheck(e,t)}function isLeastBitTrue(e){return 1==(1&e.next())}function lessThan(t,r){return e=>t(e)<r}function probability(e){if(e<=0)return()=>!1;if(1<=e)return()=>!0;var t=e*UINT32_SIZE;return t%1==0?lessThan(int32,t-INT32_SIZE|0):lessThan(uint53,Math.round(e*SMALLEST_UNSAFE_INTEGER))}function bool(e,t){return null==t?null==e?isLeastBitTrue:probability(e):e<=0?()=>!1:t<=e?()=>!0:lessThan(integer(0,t-1),e)}function date(e,t){const r=integer(+e,+t);return e=>new Date(r(e))}function die(e){return integer(1,e)}function dice(e,n){const i=die(e);return t=>{const r=[];for(let e=0;e<n;++e)r.push(i(t));return r}}const DEFAULT_STRING_POOL="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-";function string(a=DEFAULT_STRING_POOL){var e=a.length;if(!e)throw new Error("Expected pool not to be an empty string");const o=integer(0,e-1);return(t,r)=>{let n="";for(let e=0;e<r;++e){var i=o(t);n+=a.charAt(i)}return n}}const LOWER_HEX_POOL="0123456789abcdef",lowerHex=string(LOWER_HEX_POOL),upperHex=string(LOWER_HEX_POOL.toUpperCase());function hex(e){return e?upperHex:lowerHex}function convertSliceArgument(e,t){return e<0?Math.max(e+t,0):Math.min(e,t)}function toInteger(e){e=+e;return e<0?Math.ceil(e):Math.floor(e)}function pick(e,t,r,n){var i=t.length;if(0===i)throw new RangeError("Cannot pick from an empty array");r=null==r?0:convertSliceArgument(toInteger(r),i),i=void 0===n?i:convertSliceArgument(toInteger(n),i);if(i<=r)throw new RangeError(`Cannot pick between bounds ${r} and `+i);const a=integer(r,i-1);return t[a(e)]}function multiply(t,r){return 1===r?t:0===r?()=>0:e=>t(e)*r}function realZeroToOneExclusive(e){return uint53(e)/SMALLEST_UNSAFE_INTEGER}function realZeroToOneInclusive(e){return uint53Full(e)/SMALLEST_UNSAFE_INTEGER}function real(e,t,r=!1){if(!isFinite(e))throw new RangeError("Expected min to be a finite number");if(!isFinite(t))throw new RangeError("Expected max to be a finite number");return add(multiply(r?realZeroToOneInclusive:realZeroToOneExclusive,t-e),e)}const sliceArray=Array.prototype.slice;function shuffle(t,r,n=0){var i=r.length;if(i)for(let e=i-1>>>0;e>n;--e){const s=integer(0,e);var a,o=s(t);e!==o&&(a=r[e],r[e]=r[o],r[o]=a)}return r}function sample(e,t,r){if(r<0||r>t.length||!isFinite(r))throw new RangeError("Expected sampleSize to be within 0 and the length of the population");if(0===r)return[];var n=sliceArray.call(t),t=n.length;if(t===r)return shuffle(e,n,0);r=t-r;return shuffle(e,n,r-1).slice(r)}const stringRepeat=(()=>{try{if("xxx"==="x".repeat(3))return(e,t)=>e.repeat(t)}catch(e){}return(e,t)=>{let r="";for(;0<t;)1&t&&(r+=e),t>>=1,e+=e;return r}})();function zeroPad(e,t){return stringRepeat("0",t-e.length)+e}function uuid4(e){const t=e.next()>>>0;var r=0|e.next(),n=0|e.next();const i=e.next()>>>0;return zeroPad(t.toString(16),8)+"-"+zeroPad((65535&r).toString(16),4)+"-"+zeroPad((r>>4&4095|16384).toString(16),4)+"-"+zeroPad((16383&n|32768).toString(16),4)+"-"+zeroPad((n>>4&65535).toString(16),4)+zeroPad(i.toString(16),8)}const nativeMath={next(){return Math.random()*UINT32_SIZE|0}};class Random{constructor(e=nativeMath){this.engine=e}int32(){return int32(this.engine)}uint32(){return uint32(this.engine)}uint53(){return uint53(this.engine)}uint53Full(){return uint53Full(this.engine)}int53(){return int53(this.engine)}int53Full(){return int53Full(this.engine)}integer(e,t){return integer(e,t)(this.engine)}realZeroToOneInclusive(){return realZeroToOneInclusive(this.engine)}realZeroToOneExclusive(){return realZeroToOneExclusive(this.engine)}real(e,t,r=!1){return real(e,t,r)(this.engine)}bool(e,t){return bool(e,t)(this.engine)}pick(e,t,r){return pick(this.engine,e,t,r)}shuffle(e){return shuffle(this.engine,e)}sample(e,t){return sample(this.engine,e,t)}die(e){return die(e)(this.engine)}dice(e,t){return dice(e,t)(this.engine)}uuid4(){return uuid4(this.engine)}string(e,t){return string(t)(this.engine,e)}hex(e,t){return hex(t)(this.engine,e)}date(e,t){return date(e,t)(this.engine)}}const I32Array=(()=>{try{var e=new ArrayBuffer(4);const t=new Int32Array(e);if(t[0]=INT32_SIZE,t[0]===-INT32_SIZE)return Int32Array}catch(e){}return Array})();let data=null;const COUNT=128;let index$3=COUNT;const browserCrypto={next(){return index$3>=COUNT&&(null===data&&(data=new I32Array(COUNT)),crypto.getRandomValues(data),index$3=0),0|data[index$3++]}};function createEntropy(t=nativeMath,r=16){const n=[];n.push(0|(new Date).getTime());for(let e=1;e<r;++e)n[e]=0|t.next();return n}const imul=(()=>{try{if(-5===Math.imul(UINT32_MAX,5))return Math.imul}catch(e){}return(e,t)=>{var r=65535&e,n=65535&t;return r*n+((e>>>16&65535)*n+r*(t>>>16&65535)<<16>>>0)|0}})(),ARRAY_SIZE=624,ARRAY_MAX=ARRAY_SIZE-1,M=397,ARRAY_SIZE_MINUS_M=ARRAY_SIZE-M,A=2567483615;class MersenneTwister19937{constructor(){this.data=new I32Array(ARRAY_SIZE),this.index=0,this.uses=0}static seed(e){return(new MersenneTwister19937).seed(e)}static seedWithArray(e){return(new MersenneTwister19937).seedWithArray(e)}static autoSeed(){return MersenneTwister19937.seedWithArray(createEntropy())}next(){(0|this.index)>=ARRAY_SIZE&&(refreshData(this.data),this.index=0);var e=this.data[this.index];return this.index=this.index+1|0,this.uses+=1,0|temper(e)}getUseCount(){return this.uses}discard(e){if(e<=0)return this;for(this.uses+=e,(0|this.index)>=ARRAY_SIZE&&(refreshData(this.data),this.index=0);e+this.index>ARRAY_SIZE;)e-=ARRAY_SIZE-this.index,refreshData(this.data),this.index=0;return this.index=this.index+e|0,this}seed(e){let t=0;this.data[0]=t=0|e;for(let e=1;e<ARRAY_SIZE;e=e+1|0)this.data[e]=t=imul(t^t>>>30,1812433253)+e|0;return this.index=ARRAY_SIZE,this.uses=0,this}seedWithArray(e){return this.seed(19650218),seedWithArray(this.data,e),this}}function refreshData(e){let t=0,r=0;for(;(0|t)<ARRAY_SIZE_MINUS_M;t=t+1|0)r=e[t]&INT32_SIZE|e[t+1|0]&INT32_MAX,e[t]=e[t+M|0]^r>>>1^(1&r?A:0);for(;(0|t)<ARRAY_MAX;t=t+1|0)r=e[t]&INT32_SIZE|e[t+1|0]&INT32_MAX,e[t]=e[t-ARRAY_SIZE_MINUS_M|0]^r>>>1^(1&r?A:0);r=e[ARRAY_MAX]&INT32_SIZE|e[0]&INT32_MAX,e[ARRAY_MAX]=e[M-1]^r>>>1^(1&r?A:0)}function temper(e){return e^=e>>>11,e^=e<<7&2636928640,(e^=e<<15&4022730752)^e>>>18}function seedWithArray(e,t){let r=1,n=0;var i=t.length;let a=0|Math.max(i,ARRAY_SIZE),o=0|e[0];for(;0<(0|a);--a)e[r]=o=(e[r]^imul(o^o>>>30,1664525))+(0|t[n])+(0|n)|0,r=r+1|0,++n,(0|r)>ARRAY_MAX&&(e[0]=e[ARRAY_MAX],r=1),n>=i&&(n=0);for(a=ARRAY_MAX;0<(0|a);--a)e[r]=o=(e[r]^imul(o^o>>>30,1566083941))-r|0,r=r+1|0,(0|r)>ARRAY_MAX&&(e[0]=e[ARRAY_MAX],r=1);e[0]=INT32_SIZE}let data$1=null;const COUNT$1=128;let index$1$1=COUNT$1;const nodeCrypto={next(){return index$1$1>=COUNT$1&&(data$1=new Int32Array(new Int8Array(require("crypto").randomBytes(4*COUNT$1)).buffer),index$1$1=0),0|data$1[index$1$1++]}},engineSymbol=Symbol("engine"),randomSymbol=Symbol("random"),maxEngine={range:[],next(){return this.range[1]-this.range[0]}},minEngine={next(){return 0}},engines={browserCrypto:browserCrypto,nodeCrypto:nodeCrypto,MersenneTwister19937:MersenneTwister19937,nativeMath:nativeMath,min:minEngine,max:maxEngine};class NumberGenerator{constructor(e=nativeMath){this.engine=e||nativeMath}get engine(){return this[engineSymbol]}set engine(e){if(e&&"function"!=typeof e.next)throw new TypeError("engine must have function `next()`");this[engineSymbol]=e||nativeMath,this[randomSymbol]=new Random(this[engineSymbol])}integer(e,t){return this[engineSymbol].range=[e,t],this[randomSymbol].integer(e,t)}real(e,t,r=!1){return this[engineSymbol].range=[e,t],this[randomSymbol].real(e,t,r)}}const generator=new NumberGenerator,operatorSymbol=Symbol("operator"),valueSymbol$1=Symbol("value");class ComparePoint{constructor(e,t){if(!e)throw new RequiredArgumentError("operator");if(!t&&0!==t)throw new RequiredArgumentError("value");this.operator=e,this.value=t}static isValidOperator(e){return"string"==typeof e&&/^(?:[<>!]?=|[<>])$/.test(e)}set operator(e){if(!this.constructor.isValidOperator(e))throw new CompareOperatorError(e);this[operatorSymbol]=e}get operator(){return this[operatorSymbol]}set value(e){if(!isNumeric(e))throw new TypeError("value must be a finite number");this[valueSymbol$1]=Number(e)}get value(){return this[valueSymbol$1]}isMatch(e){return compareNumbers(e,this.value,this.operator)}toJSON(){var{operator:e,value:t}=this;return{operator:e,type:"compare-point",value:t}}toString(){return""+this.operator+this.value}}class Modifier{constructor(){this.order=999}get name(){return"modifier"}get notation(){return""}get maxIterations(){return 1e3}run(e,t){return e}toJSON(){var{notation:e,name:t}=this;return{name:t,notation:e,type:"modifier"}}toString(){return this.notation}}const comparePointSymbol=Symbol("compare-point");class ComparisonModifier extends Modifier{constructor(e){super(),e&&(this.comparePoint=e)}get comparePoint(){return this[comparePointSymbol]}set comparePoint(e){if(!(e instanceof ComparePoint))throw new TypeError("comparePoint must be instance of ComparePoint");this[comparePointSymbol]=e}get name(){return"comparison"}get notation(){return""+(this.comparePoint||"")}isComparePoint(e){return!!this.comparePoint&&this.comparePoint.isMatch(e)}toJSON(){var e=this["comparePoint"];return Object.assign(super.toJSON(),{comparePoint:e})}}const compoundSymbol=Symbol("compound"),penetrateSymbol=Symbol("penetrate");class ExplodeModifier extends ComparisonModifier{constructor(e=null,t=!1,r=!1){super(e),this[compoundSymbol]=!!t,this[penetrateSymbol]=!!r,this.order=3}get compound(){return this[compoundSymbol]}get name(){return"explode"}get notation(){return"!"+(this.compound?"!":"")+(this.penetrate?"p":"")+super.notation}get penetrate(){return this[penetrateSymbol]}run(e,a){if(a.min===a.max)throw new DieActionValueError(a,"explode");const t=e;return t.rolls=e.rolls.map(e=>{const t=[e];let r=e.value;for(let e=0;e<this.maxIterations&&this.isComparePoint(r);e++){const n=t[t.length-1],i=a.rollOnce();r=i.value,n.modifiers.add("explode"),this.penetrate&&(n.modifiers.add("penetrate"),--i.value),t.push(i)}return this.compound&&1<t.length?(e.value=sumArray(t.map(e=>e.value)),e.modifiers=["explode","compound"],this.penetrate&&e.modifiers.add("penetrate"),e):t}).flat(),t}toJSON(){var{compound:e,penetrate:t}=this;return Object.assign(super.toJSON(),{compound:e,penetrate:t})}}const flags={compound:"!",explode:"!","critical-failure":"__","critical-success":"**",drop:"d",max:"v",min:"^",penetrate:"p","re-roll":"r","re-roll-once":"ro","target-failure":"_","target-success":"*"},getModifierFlags=(...e)=>[...e].reduce((e,t)=>{let r;return r=t instanceof Modifier?t.name:t,e+(flags[r]||r)},""),calculationValueSymbol$1=Symbol("calculation-value"),modifiersSymbol$3=Symbol("modifiers"),initialValueSymbol=Symbol("initial-value"),useInTotalSymbol$1=Symbol("use-in-total"),valueSymbol=Symbol("value");class RollResult{constructor(e,t=[],r=!0){if(isNumeric(e))this[initialValueSymbol]=Number(e),this.modifiers=t||[],this.useInTotal=r;else{if(!e||"object"!=typeof e||Array.isArray(e))throw e===1/0?new RangeError("Result value must be a finite number"):new TypeError("Result value is invalid: "+e);var n=isNumeric(e.initialValue)?e.initialValue:e.value;if(!isNumeric(n))throw new TypeError("Result value is invalid: "+n);this[initialValueSymbol]=Number(n),isNumeric(e.value)&&Number(e.value)!==this[initialValueSymbol]&&(this.value=e.value),isNumeric(e.calculationValue)&&parseFloat(""+e.calculationValue)!==this.value&&(this.calculationValue=e.calculationValue),this.modifiers=e.modifiers||t||[],this.useInTotal="boolean"==typeof e.useInTotal?e.useInTotal:r||!1}}get calculationValue(){return isNumeric(this[calculationValueSymbol$1])?parseFloat(this[calculationValueSymbol$1]):this.value}set calculationValue(e){var t=isNumeric(e);if(e===1/0)throw new RangeError("Result calculation value must be a finite number");if(e&&!t)throw new TypeError("Result calculation value is invalid: "+e);this[calculationValueSymbol$1]=t?parseFloat(""+e):null}get initialValue(){return this[initialValueSymbol]}get modifierFlags(){return getModifierFlags(...this.modifiers)}get modifiers(){return this[modifiersSymbol$3]}set modifiers(e){if((Array.isArray(e)||e instanceof Set)&&[...e].every(e=>"string"==typeof e))this[modifiersSymbol$3]=new Set([...e]);else{if(e||0===e)throw new TypeError("modifiers must be a Set or array of modifier names: "+e);this[modifiersSymbol$3]=new Set}}get useInTotal(){return!!this[useInTotalSymbol$1]}set useInTotal(e){this[useInTotalSymbol$1]=!!e}get value(){return isNumeric(this[valueSymbol])?this[valueSymbol]:this[initialValueSymbol]}set value(e){if(e===1/0)throw new RangeError("Result value must be a finite number");if(!isNumeric(e))throw new TypeError("Result value is invalid: "+e);this[valueSymbol]=Number(e)}toJSON(){var{calculationValue:e,initialValue:t,modifierFlags:r,modifiers:n,useInTotal:i,value:a}=this;return{calculationValue:e,initialValue:t,modifierFlags:r,modifiers:[...n],type:"result",useInTotal:i,value:a}}toString(){return this.value+this.modifierFlags}}const rollsSymbol$1=Symbol("rolls");class RollResults{constructor(e=[]){this.rolls=e}get length(){return this.rolls.length||0}get rolls(){return[...this[rollsSymbol$1]]}set rolls(e){if(!e||!Array.isArray(e))throw new TypeError("rolls must be an array: "+e);this[rollsSymbol$1]=[],e.forEach(e=>{this.addRoll(e)})}get value(){return this.rolls.reduce((e,t)=>e+(t.useInTotal?t.calculationValue:0),0)}addRoll(e){e=e instanceof RollResult?e:new RollResult(e);this[rollsSymbol$1].push(e)}toJSON(){var{rolls:e,value:t}=this;return{rolls:e,type:"roll-results",value:t}}toString(){return`[${this.rolls.join(", ")}]`}}const onceSymbol=Symbol("once");class ReRollModifier extends ComparisonModifier{constructor(e=!1,t=null){super(t),this.once=!!e,this.order=4}get name(){return"re-roll"}get notation(){return"r"+(this.once?"o":"")+super.notation}get once(){return!!this[onceSymbol]}set once(e){this[onceSymbol]=!!e}run(e,n){if(n.min===n.max)throw new DieActionValueError(n,"re-roll");return e.rolls.map(t=>{for(let e=0;e<this.maxIterations&&this.isComparePoint(t.value);e++){var r=n.rollOnce();if(t.value=r.value,t.modifiers.add("re-roll"+(this.once?"-once":"")),this.once)break}return t}),e}toJSON(){var e=this["once"];return Object.assign(super.toJSON(),{once:e})}}const modifiersSymbol$2=Symbol("modifiers"),qtySymbol$1=Symbol("qty"),sidesSymbol=Symbol("sides"),minSymbol$1=Symbol("min-value"),maxSymbol$1=Symbol("max-value");class StandardDice{constructor(e,t=1,r=null,n=1,i=null){if(!e&&0!==e)throw new RequiredArgumentError("sides");if(e===1/0)throw new RangeError("numerical sides must be finite number");if(isNumeric(e)){if(e<1||!isSafeNumber(e))throw new RangeError("numerical sides must be a positive finite number")}else if("string"!=typeof e)throw new TypeError("non-numerical sides must be a string");if(!isNumeric(t))throw new TypeError("qty must be a positive finite integer");if(t<1||999<t)throw new RangeError("qty must be between 1 and 999");if(!isNumeric(n))throw new TypeError("min must a finite number");if(!isSafeNumber(n))throw new RangeError("min must a finite number");if(i&&!isNumeric(i))throw new TypeError("max must a finite number");if(i&&!isSafeNumber(i))throw new RangeError("max must a finite number");this[qtySymbol$1]=parseInt(""+t,10),this[sidesSymbol]=e,r&&(this.modifiers=r),this[minSymbol$1]=parseInt(n,10),this[maxSymbol$1]=i?parseInt(""+i,10):e}get average(){return(this.min+this.max)/2}get modifiers(){return this[modifiersSymbol$2]?new Map([...this[modifiersSymbol$2]].sort((e,t)=>e[1].order-t[1].order)):null}set modifiers(e){let t;if(e instanceof Map)t=e;else if(Array.isArray(e))t=new Map(e.map(e=>[e.name,e]));else{if("object"!=typeof e)throw new TypeError("modifiers should be a Map, array, or an Object containing Modifiers");t=new Map(Object.entries(e))}if(t.size&&[...t.entries()].some(e=>!(e[1]instanceof Modifier)))throw new TypeError("modifiers must only contain Modifier instances");this[modifiersSymbol$2]=t,this[modifiersSymbol$2].forEach(e=>{e instanceof ExplodeModifier&&!e.comparePoint?e.comparePoint=new ComparePoint("=",this.max):e instanceof ReRollModifier&&!e.comparePoint&&(e.comparePoint=new ComparePoint("=",this.min))})}get max(){return this[maxSymbol$1]}get min(){return this[minSymbol$1]}get name(){return"standard"}get notation(){let e=this.qty+"d"+this.sides;return this.modifiers&&this.modifiers.size&&(e+=[...this.modifiers.values()].reduce((e,t)=>e+t.notation,"")),e}get qty(){return this[qtySymbol$1]}get sides(){return this[sidesSymbol]}roll(){const t=new RollResults;for(let e=0;e<this.qty;e++)t.addRoll(this.rollOnce());return(this.modifiers||[]).forEach(e=>{e.run(t,this)}),t}rollOnce(){return new RollResult(generator.integer(this.min,this.max))}toJSON(){var{average:e,max:t,min:r,modifiers:n,name:i,notation:a,qty:o,sides:s}=this;return{average:e,max:t,min:r,modifiers:n,name:i,notation:a,qty:o,sides:s,type:"die"}}toString(){return this.notation}}class FudgeDice extends StandardDice{constructor(e=2,t=1,r=null){let n=e;if(n||0===n){if(1!==n&&2!==n)throw new RangeError("nonBlanks must be 1 or 2")}else n=2;super(n,t,r,-1,1)}get name(){return"fudge"}get nonBlanks(){return super.sides}get sides(){return"F."+this.nonBlanks}rollOnce(){let e=0;var t;return 2===this.nonBlanks?e=generator.integer(1,3)-2:1===this.nonBlanks&&(1===(t=generator.integer(1,6))?e=-1:6===t&&(e=1)),new RollResult(e)}}class PercentileDice extends StandardDice{constructor(e=1,t=null,r=!1){super(100,e,t),this.sidesAsNumber=!!r}get name(){return"percentile"}get sides(){return this.sidesAsNumber?super.sides:"%"}}class CriticalFailureModifier extends ComparisonModifier{constructor(e){super(e),this.order=9}get name(){return"critical-failure"}get notation(){return"cf"+super.notation}run(e,t){return e.rolls.forEach(e=>(this.isComparePoint(e.value)&&e.modifiers.add("critical-failure"),e)),e}}class CriticalSuccessModifier extends ComparisonModifier{constructor(e){super(e),this.order=8}get name(){return"critical-success"}get notation(){return"cs"+super.notation}run(e,t){return e.rolls.forEach(e=>(this.isComparePoint(e.value)&&e.modifiers.add("critical-success"),e)),e}}const calculationValueSymbol=Symbol("calculation-value"),isRollGroupSymbol=Symbol("is-roll-group"),modifiersSymbol$1=Symbol("modifiers"),resultsSymbol=Symbol("results"),useInTotalSymbol=Symbol("use-in-total");class ResultGroup{constructor(e=[],t=[],r=!1,n=!0){this.isRollGroup=r,this.modifiers=t,this.results=e,this.useInTotal=n}get calculationValue(){return isNumeric(this[calculationValueSymbol])?parseFloat(this[calculationValueSymbol]):this.value}set calculationValue(e){var t=isNumeric(e);if(e===1/0)throw new RangeError("Results calculation value must be a finite number");if(e&&!t)throw new TypeError("Results calculation value is invalid: "+e);this[calculationValueSymbol]=t?parseFloat(""+e):null}get isRollGroup(){return this[isRollGroupSymbol]}set isRollGroup(e){this[isRollGroupSymbol]=!!e}get length(){return this.results.length||0}get modifierFlags(){return getModifierFlags(...this.modifiers)}get modifiers(){return this[modifiersSymbol$1]}set modifiers(e){if((Array.isArray(e)||e instanceof Set)&&[...e].every(e=>"string"==typeof e))this[modifiersSymbol$1]=new Set([...e]);else{if(e||0===e)throw new TypeError("modifiers must be a Set or array of modifier names: "+e);this[modifiersSymbol$1]=new Set}}get results(){return[...this[resultsSymbol]]}set results(e){if(!e||!Array.isArray(e))throw new TypeError("results must be an array: "+e);this[resultsSymbol]=[],e.forEach(e=>{this.addResult(e)})}get useInTotal(){return!!this[useInTotalSymbol]}set useInTotal(e){this[useInTotalSymbol]=!!e}get value(){if(!this.results.length)return 0;var e=this.results.reduce((e,t)=>{let r=t;return t instanceof ResultGroup?r=t.useInTotal?t.calculationValue:0:t instanceof RollResults&&(r=t.value),e+r},"string"==typeof this.results[0]?"":0);return"string"==typeof e?evaluate(e):e}addResult(e){let t;if(e instanceof ResultGroup||e instanceof RollResults)t=e;else{if("string"!=typeof e&&!isNumeric(e))throw new TypeError("value must be one of ResultGroup, RollResults, string, or number");t=e}this[resultsSymbol].push(t)}toJSON(){var{calculationValue:e,isRollGroup:t,modifierFlags:r,modifiers:n,results:i,useInTotal:a,value:o}=this;return{calculationValue:e,isRollGroup:t,modifierFlags:r,modifiers:[...n],results:i,type:"result-group",useInTotal:a,value:o}}toString(){let e;return e=this.isRollGroup?`{${this.results.join(", ")}}`:this.results.join(""),this.modifierFlags&&(e=`(${e})`+this.modifierFlags),e}}const endSymbol=Symbol("end"),qtySymbol=Symbol("qty");class KeepModifier extends Modifier{constructor(e="h",t=1){super(),this.end=e,this.qty=t,this.order=5}get end(){return this[endSymbol]}set end(e){if("h"!==e&&"l"!==e)throw new RangeError('End must be "h" or "l"');this[endSymbol]=e}get name(){return"keep-"+this.end}get notation(){return"k"+this.end+this.qty}get qty(){return this[qtySymbol]}set qty(e){if(e===1/0)throw new RangeError("qty must be a finite number");if(!isNumeric(e)||e<1)throw new TypeError("qty must be a positive finite integer");this[qtySymbol]=Math.floor(e)}rangeToDrop(e){return"h"===this.end?[0,e.length-this.qty]:[this.qty,e.length]}run(e,t){let r,n;return n=e instanceof ResultGroup?(r=e.results,1===r.length&&r[0]instanceof ResultGroup?r[0].results.map((e,r)=>e instanceof RollResults?e.rolls.map((e,t)=>({value:e.value,index:[r,t]})):null).flat().filter(Boolean):[...r].map((e,t)=>({value:e.value,index:t}))):(r=e.rolls,[...r].map((e,t)=>({value:e.value,index:t}))),n=n.sort((e,t)=>e.value-t.value).map(e=>e.index).slice(...this.rangeToDrop(n)),n.forEach(e=>{let t;t=Array.isArray(e)?r[0].results[e[0]].rolls[e[1]]:r[e],t.modifiers.add("drop"),t.useInTotal=!1}),e}toJSON(){var{end:e,qty:t}=this;return Object.assign(super.toJSON(),{end:e,qty:t})}}class DropModifier extends KeepModifier{constructor(e="l",t=1){super(e,t),this.order=6}get name(){return"drop-"+this.end}get notation(){return"d"+this.end+this.qty}rangeToDrop(e){return"h"===this.end?[e.length-this.qty,e.length]:[0,this.qty]}}const maxSymbol=Symbol("max");class MaxModifier extends Modifier{constructor(e){super(),this.max=e,this.order=2}get max(){return this[maxSymbol]}set max(e){if(!isNumeric(e))throw new TypeError("max must be a number");this[maxSymbol]=parseFloat(""+e)}get name(){return"max"}get notation(){return"max"+this.max}run(e,t){const r=e;return r.rolls=e.rolls.map(e=>{const t=e;return e.value>this.max&&(t.value=this.max,t.modifiers.add("max")),t}),r}toJSON(){var e=this["max"];return Object.assign(super.toJSON(),{max:e})}}const minSymbol=Symbol("min");class MinModifier extends Modifier{constructor(e){super(),this.min=e,this.order=1}get min(){return this[minSymbol]}set min(e){if(!isNumeric(e))throw new TypeError("min must be a number");this[minSymbol]=parseFloat(""+e)}get name(){return"min"}get notation(){return"min"+this.min}run(e,t){const r=e;return r.rolls=e.rolls.map(e=>{const t=e;return e.value<this.min&&(t.value=this.min,t.modifiers.add("min")),t}),r}toJSON(){var e=this["min"];return Object.assign(super.toJSON(),{min:e})}}const directionSymbol=Symbol("direction");class SortingModifier extends Modifier{constructor(e="a"){super(),this.direction=e,this.order=10}get direction(){return this[directionSymbol]}set direction(e){if("a"!==e&&"d"!==e)throw new RangeError('Direction must be "a" (Ascending) or "d" (Descending)');this[directionSymbol]=e}get name(){return"sorting"}get notation(){return"s"+this.direction}run(e,t){let r;return r=e instanceof ResultGroup?"results":"rolls",e[r]=e[r].sort((e,t)=>"d"===this.direction?t.value-e.value:e.value-t.value),e instanceof ResultGroup&&(e[r]=e[r].map(e=>e instanceof ResultGroup||e instanceof RollResults?this.run(e,t):e)),e}toJSON(){var e=this["direction"];return Object.assign(super.toJSON(),{direction:e})}}const failureCPSymbol=Symbol("failure-cp");class TargetModifier extends ComparisonModifier{constructor(e,t=null){super(e),this.failureComparePoint=t,this.order=7}get failureComparePoint(){return this[failureCPSymbol]}set failureComparePoint(e){if(e&&!(e instanceof ComparePoint))throw new TypeError("failure comparePoint must be instance of ComparePoint or null");this[failureCPSymbol]=e||null}get name(){return"target"}get notation(){return""+super.notation+(this.failureComparePoint?"f"+this.failureComparePoint:"")}get successComparePoint(){return this.comparePoint}set successComparePoint(e){super.comparePoint=e}getStateValue(e){return this.isSuccess(e)?1:this.isFailure(e)?-1:0}isFailure(e){return!!this.failureComparePoint&&this.failureComparePoint.isMatch(e)}isNeutral(e){return!this.isSuccess(e)&&!this.isFailure(e)}isSuccess(e){return this.isComparePoint(e)}run(e,t){let r;return r=e instanceof ResultGroup?e.results:e.rolls,r.forEach(e=>{this.isSuccess(e.value)?e.modifiers.add("target-success"):this.isFailure(e.value)&&e.modifiers.add("target-failure"),e.calculationValue=this.getStateValue(e.value)}),e}toJSON(){var{failureComparePoint:e,successComparePoint:t}=this;const r=super.toJSON();return delete r.comparePoint,Object.assign(r,{failureComparePoint:e,successComparePoint:t})}}const isBase64=e=>{try{return!(!e||btoa(atob(e))!==e)}catch(e){return!1}},isJson=e=>{try{var t=!!e&&JSON.parse(e);return!(!t||"object"!=typeof t)}catch(e){return!1}},modifiersSymbol=Symbol("modifiers"),expressionsSymbol$1=Symbol("expressions");class RollGroup{constructor(e=[],t=[]){this.expressions=e,this.modifiers=t}get expressions(){return[...this[expressionsSymbol$1]||[]]}set expressions(t){if(!t)throw new RequiredArgumentError("expressions");if(!Array.isArray(t))throw new TypeError("expressions must be an array: "+t);this[expressionsSymbol$1]=[],t.forEach(e=>{if(!e||!Array.isArray(e))throw new TypeError("Expressions must be an array of arrays: "+t);if(0===e.length)throw new TypeError("Sub expressions cannot be empty: "+t);if(!e.every(e=>e instanceof StandardDice||"string"==typeof e||"number"==typeof e))throw new TypeError("Sub expression items must be Dice, numbers, or strings");this[expressionsSymbol$1].push(e)})}get modifiers(){return this[modifiersSymbol]?new Map([...this[modifiersSymbol]].sort((e,t)=>e[1].order-t[1].order)):null}set modifiers(e){let t;if(e instanceof Map)t=e;else if(Array.isArray(e))t=new Map(e.map(e=>[e.name,e]));else{if("object"!=typeof e)throw new TypeError("modifiers should be a Map, array, or an Object containing Modifiers");t=new Map(Object.entries(e))}if(t.size&&[...t.entries()].some(e=>!(e[1]instanceof Modifier)))throw new TypeError("modifiers must only contain Modifier instances");this[modifiersSymbol]=t}get notation(){let e=this.expressions.map(e=>e.reduce((e,t)=>e+t,"")).join(", ");return e=`{${e}}`,this.modifiers&&this.modifiers.size&&(e+=[...this.modifiers.values()].reduce((e,t)=>e+t.notation,"")),e}roll(){const t=new ResultGroup(this.expressions.map(e=>{e=e.map(e=>e instanceof StandardDice?e.roll():e);return new ResultGroup(e)}));return t.isRollGroup=!0,(this.modifiers||[]).forEach(e=>{e.run(t,this)}),t}toJSON(){var{modifiers:e,notation:t,expressions:r}=this;return{expressions:r,modifiers:e,notation:t,type:"group"}}toString(){return this.notation}}function peg$subclass(e,t){function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r}function peg$SyntaxError(e,t,r,n){this.message=e,this.expected=t,this.found=r,this.location=n,this.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,peg$SyntaxError)}function peg$parse(p,e){function a(e,t,r){return new ExplodeModifier(r,!!e,!!t)}function n(e,t){return new TargetModifier(e,t)}function i(e,t){return new DropModifier(e||"l",t)}function o(e,t){return new KeepModifier(e||"h",t)}function s(e){return new MaxModifier(e)}function u(e){return new MinModifier(e)}function c(e,t){return new ReRollModifier(!!e,t)}function l(e){return new CriticalSuccessModifier(e)}function m(e){return new CriticalFailureModifier(e)}function f(e){return new SortingModifier(e||"a")}function d(e,t,r){return evaluate(_t())}function h(e,t,r){return[e,...t,r]}var t,r,y,g={},x={Main:zt},v=zt,b=It("{",!1),w=",",N=It(",",!1),M=It("}",!1),S="d",$=It("d",!1),E=function(e,t){return new StandardDice(t,e||1)},A="d%",O=It("d%",!1),C=function(e){return new PercentileDice(e||1)},T="dF",D=It("dF",!1),_=".",I=It(".",!1),R=/^[12]/,B=Rt(["1","2"],!1,!1),q=function(e,t){return new FudgeDice(t?parseInt(t[1],10):2,e||1)},F="!",z=It("!",!1),P="p",k=It("p",!1),U=/^[lh]/,L=Rt(["l","h"],!1,!1),j="k",G=It("k",!1),H="max",V=It("max",!1),Z="min",W=It("min",!1),J="r",Y=It("r",!1),X="o",Q=It("o",!1),K="cs",ee=It("cs",!1),te="cf",re=It("cf",!1),ne="s",ie=It("s",!1),ae="a",oe=It("a",!1),se="f",ue=It("f",!1),ce=function(e){return e},le=function(e,t){return new ComparePoint(e,t)},pe="!=",me=It("!=",!1),fe="<=",de=It("<=",!1),he=">=",ye=It(">=",!1),ge="=",xe=It("=",!1),ve=">",be=It(">",!1),we="<",Ne=It("<",!1),Me="(",Se=It("(",!1),$e=")",Ee=It(")",!1),Ae=function(e,t){return[...e=Array.isArray(e)?e:[e],...t.map(([,e,,t])=>[e,t]).flat(2)]},Oe="abs",Ce=It("abs",!1),Te="ceil",De=It("ceil",!1),_e="cos",Ie=It("cos",!1),Re="exp",Be=It("exp",!1),qe="floor",Fe=It("floor",!1),ze="log",Pe=It("log",!1),ke="round",Ue=It("round",!1),Le="sign",je=It("sign",!1),Ge="sin",He=It("sin",!1),Ve="sqrt",Ze=It("sqrt",!1),We="tan",Je=It("tan",!1),Ye=function(e,t){return[e+"(",...t,")"]},Xe="pow",Qe=It("pow",!1),Ke=function(e,t,r){return[e+"(",...t,",",...r,")"]},et="-",tt=It("-",!1),rt=/^[.]/,nt=Rt(["."],!1,!1),it=function(){return parseFloat(_t())},at=/^[1-9]/,ot=Rt([["1","9"]],!1,!1),st=/^[0-9]/,ut=Rt([["0","9"]],!1,!1),ct=function(){return parseInt(_t(),10)},lt="**",pt=It("**",!1),mt=function(){return"^"},ft="*",dt=It("*",!1),ht="^",yt=It("^",!1),gt="%",xt=It("%",!1),vt="/",bt=It("/",!1),wt="+",Nt=It("+",!1),Mt={type:"other",description:"whitespace"},St=/^[ \t\n\r]/,$t=Rt([" ","\t","\n","\r"],!1,!1),Et=0,At=0,Ot=[{line:1,column:1}],Ct=0,Tt=[],Dt=0;if("startRule"in(e=void 0!==e?e:{})){if(!(e.startRule in x))throw new Error("Can't start parsing from rule \""+e.startRule+'".');v=x[e.startRule]}function _t(){return p.substring(At,Et)}function It(e,t){return{type:"literal",text:e,ignoreCase:t}}function Rt(e,t,r){return{type:"class",parts:e,inverted:t,ignoreCase:r}}function Bt(e){var t,r=Ot[e];if(r)return r;for(t=e-1;!Ot[t];)t--;for(r={line:(r=Ot[t]).line,column:r.column};t<e;)10===p.charCodeAt(t)?(r.line++,r.column=1):r.column++,t++;return Ot[e]=r}function qt(e,t){var r=Bt(e),n=Bt(t);return{start:{offset:e,line:r.line,column:r.column},end:{offset:t,line:n.line,column:n.column}}}function Ft(e){Et<Ct||(Ct<Et&&(Ct=Et,Tt=[]),Tt.push(e))}function zt(){return Gt()}function Pt(){var e,t,r,n,i,a,o,s,u,c,l=Et;if(123===p.charCodeAt(Et)?(e="{",Et++):(e=g,0===Dt&&Ft(b)),e!==g)if(Yt()!==g)if((c=Gt())!==g){for(t=[],r=Et,r=(n=Yt())!==g?(44===p.charCodeAt(Et)?(i=w,Et++):(i=g,0===Dt&&Ft(N)),i!==g&&(a=Yt())!==g&&(o=Gt())!==g?n=[n,i,a,o]:(Et=r,g)):(Et=r,g);r!==g;)t.push(r),r=Et,r=(n=Yt())!==g?(44===p.charCodeAt(Et)?(i=w,Et++):(i=g,0===Dt&&Ft(N)),i!==g&&(a=Yt())!==g&&(o=Gt())!==g?n=[n,i,a,o]:(Et=r,g)):(Et=r,g);if(t!==g)if((r=Yt())!==g)if(125===p.charCodeAt(Et)?(n="}",Et++):(n=g,0===Dt&&Ft(M)),n!==g){for(i=[],a=Ut();a!==g;)i.push(a),a=Ut();l=i!==g?(At=l,s=c,u=t,c=i,e=new RollGroup([s,...u.map(e=>e[3])],Object.assign({},...c.map(e=>({[e.name]:e}))))):(Et=l,g)}else Et=l,l=g;else Et=l,l=g;else Et=l,l=g}else Et=l,l=g;else Et=l,l=g;else Et=l,l=g;return l}function kt(){var e,t,r,n,i=Et,a=function(){var e,t,r;e=Et,(t=jt())===g&&(t=null);e=t!==g?(100===p.charCodeAt(Et)?(r=S,Et++):(r=g,0===Dt&&Ft($)),r!==g?(r=jt())!==g?(At=e,t=E(t,r)):(Et=e,g):(Et=e,g)):(Et=e,g);return e}();if((a=a===g&&(a=function(){var e,t,r;e=Et,(t=jt())===g&&(t=null);e=t!==g?(p.substr(Et,2)===A?(r=A,Et+=2):(r=g,0===Dt&&Ft(O)),r!==g?(At=e,t=C(t)):(Et=e,g)):(Et=e,g);return e}())===g?function(){var e,t,r,n,i;e=Et,(t=jt())===g&&(t=null);e=t!==g?(p.substr(Et,2)===T?(r=T,Et+=2):(r=g,0===Dt&&Ft(D)),r!==g?(r=Et,46===p.charCodeAt(Et)?(n=_,Et++):(n=g,0===Dt&&Ft(I)),(r=(r=n!==g?(R.test(p.charAt(Et))?(i=p.charAt(Et),Et++):(i=g,0===Dt&&Ft(B)),i!==g?n=[n,i]:(Et=r,g)):(Et=r,g))===g?null:r)!==g?(At=e,t=q(t,r)):(Et=e,g)):(Et=e,g)):(Et=e,g);return e}():a)!==g){for(e=[],t=Ut();t!==g;)e.push(t),t=Ut();i=e!==g?(At=i,n=e,(r=a).modifiers=Object.assign({},...n.map(e=>({[e.name]:e}))),a=r):(Et=i,g)}else Et=i,i=g;return i}function Ut(){var e=function(){var e,t,r,n,i;e=Et,33===p.charCodeAt(Et)?(t=F,Et++):(t=g,0===Dt&&Ft(z));e=t!==g?(33===p.charCodeAt(Et)?(r=F,Et++):(r=g,0===Dt&&Ft(z)),(r=r===g?null:r)!==g?(112===p.charCodeAt(Et)?(n=P,Et++):(n=g,0===Dt&&Ft(k)),(n=n===g?null:n)!==g?(i=(i=Lt())===g?null:i)!==g?(At=e,t=a(r,n,i)):(Et=e,g):(Et=e,g)):(Et=e,g)):(Et=e,g);return e}();return e=e===g&&(e=function(){var e,t,r;e=Et,e=(t=Lt())!==g?(r=function(){var e,t,r;e=Et,102===p.charCodeAt(Et)?(t=se,Et++):(t=g,0===Dt&&Ft(ue));e=t!==g?(r=Lt(),r!==g?(At=e,t=ce(r)):(Et=e,g)):(Et=e,g);return e}(),(r=r===g?null:r)!==g?(At=e,t=n(t,r)):(Et=e,g)):(Et=e,g);return e}())===g&&(e=function(){var e,t,r,n;e=Et,100===p.charCodeAt(Et)?(t=S,Et++):(t=g,0===Dt&&Ft($));e=t!==g?(U.test(p.charAt(Et))?(r=p.charAt(Et),Et++):(r=g,0===Dt&&Ft(L)),(r=r===g?null:r)!==g?(n=Zt())!==g?(At=e,t=i(r,n)):(Et=e,g):(Et=e,g)):(Et=e,g);return e}())===g&&(e=function(){var e,t,r,n;e=Et,107===p.charCodeAt(Et)?(t=j,Et++):(t=g,0===Dt&&Ft(G));e=t!==g?(U.test(p.charAt(Et))?(r=p.charAt(Et),Et++):(r=g,0===Dt&&Ft(L)),(r=r===g?null:r)!==g?(n=Zt())!==g?(At=e,t=o(r,n)):(Et=e,g):(Et=e,g)):(Et=e,g);return e}())===g&&(e=function(){var e,t,r,n;e=Et,114===p.charCodeAt(Et)?(t=J,Et++):(t=g,0===Dt&&Ft(Y));e=t!==g?(111===p.charCodeAt(Et)?(r=X,Et++):(r=g,0===Dt&&Ft(Q)),(r=r===g?null:r)!==g?(n=(n=Lt())===g?null:n)!==g?(At=e,t=c(r,n)):(Et=e,g):(Et=e,g)):(Et=e,g);return e}())===g&&(e=function(){var e,t,r;e=Et,p.substr(Et,2)===K?(t=K,Et+=2):(t=g,0===Dt&&Ft(ee));e=t!==g?(r=Lt(),r!==g?(At=e,t=l(r)):(Et=e,g)):(Et=e,g);return e}())===g&&(e=function(){var e,t,r;e=Et,p.substr(Et,2)===te?(t=te,Et+=2):(t=g,0===Dt&&Ft(re));e=t!==g?(r=Lt(),r!==g?(At=e,t=m(r)):(Et=e,g)):(Et=e,g);return e}())===g&&(e=function(){var e,t,r;e=Et,115===p.charCodeAt(Et)?(t=ne,Et++):(t=g,0===Dt&&Ft(ie));e=t!==g?(97===p.charCodeAt(Et)?(r=ae,Et++):(r=g,0===Dt&&Ft(oe)),r===g&&(100===p.charCodeAt(Et)?(r=S,Et++):(r=g,0===Dt&&Ft($))),(r=r===g?null:r)!==g?(At=e,t=f(r)):(Et=e,g)):(Et=e,g);return e}())===g&&(e=function(){var e,t,r;e=Et,p.substr(Et,3)===H?(t=H,Et+=3):(t=g,0===Dt&&Ft(V));e=t!==g?(r=Vt(),r!==g?(At=e,t=s(r)):(Et=e,g)):(Et=e,g);return e}())===g?function(){var e,t,r;e=Et,p.substr(Et,3)===Z?(t=Z,Et+=3):(t=g,0===Dt&&Ft(W));e=t!==g?(r=Vt(),r!==g?(At=e,t=u(r)):(Et=e,g)):(Et=e,g);return e}():e}function Lt(){var e,t=Et,r=function(){var e;p.substr(Et,2)===pe?(e=pe,Et+=2):(e=g,0===Dt&&Ft(me));e===g&&(p.substr(Et,2)===fe?(e=fe,Et+=2):(e=g,0===Dt&&Ft(de)),e===g&&(p.substr(Et,2)===he?(e=he,Et+=2):(e=g,0===Dt&&Ft(ye)),e===g&&(61===p.charCodeAt(Et)?(e=ge,Et++):(e=g,0===Dt&&Ft(xe)),e===g&&(62===p.charCodeAt(Et)?(e=ve,Et++):(e=g,0===Dt&&Ft(be)),e===g&&(60===p.charCodeAt(Et)?(e=we,Et++):(e=g,0===Dt&&Ft(Ne)))))));return e}();return t=r!==g&&(e=Vt())!==g?(At=t,le(r,e)):(Et=t,g)}function jt(){var e,t,r,n,i,a,o,s,u,c=Zt();if(c===g)if(c=Et,40===p.charCodeAt(Et)?(e=Me,Et++):(e=g,0===Dt&&Ft(Se)),e!==g)if(Yt()!==g){if(t=Et,(r=Vt())!==g){if(n=[],i=Et,(i=(a=Yt())!==g&&(o=Jt())!==g&&(s=Yt())!==g&&(u=Vt())!==g?a=[a,o,s,u]:(Et=i,g))!==g)for(;i!==g;)n.push(i),i=Et,i=(a=Yt())!==g&&(o=Jt())!==g&&(s=Yt())!==g&&(u=Vt())!==g?a=[a,o,s,u]:(Et=i,g);else n=g;t=n!==g?r=[r,n]:(Et=t,g)}else Et=t,t=g;c=t!==g&&(r=Yt())!==g?(41===p.charCodeAt(Et)?(n=$e,Et++):(n=g,0===Dt&&Ft(Ee)),n!==g?(At=c,e=d()):(Et=c,g)):(Et=c,g)}else Et=c,c=g;else Et=c,c=g;return c}function Gt(){var e,t,r,n,i,a,o=Et,s=Ht();if(s!==g){for(e=[],t=Et,t=(r=Yt())!==g&&(n=Jt())!==g&&(i=Yt())!==g&&(a=Ht())!==g?r=[r,n,i,a]:(Et=t,g);t!==g;)e.push(t),t=Et,t=(r=Yt())!==g&&(n=Jt())!==g&&(i=Yt())!==g&&(a=Ht())!==g?r=[r,n,i,a]:(Et=t,g);o=e!==g?(At=o,Ae(s,e)):(Et=o,g)}else Et=o,o=g;return o}function Ht(){var e,t,r,n=function(){var e,t,r,n,i,a;e=Et,p.substr(Et,3)===Oe?(t=Oe,Et+=3):(t=g,0===Dt&&Ft(Ce));t===g&&(p.substr(Et,4)===Te?(t=Te,Et+=4):(t=g,0===Dt&&Ft(De)),t===g&&(p.substr(Et,3)===_e?(t=_e,Et+=3):(t=g,0===Dt&&Ft(Ie)),t===g&&(p.substr(Et,3)===Re?(t=Re,Et+=3):(t=g,0===Dt&&Ft(Be)),t===g&&(p.substr(Et,5)===qe?(t=qe,Et+=5):(t=g,0===Dt&&Ft(Fe)),t===g&&(p.substr(Et,3)===ze?(t=ze,Et+=3):(t=g,0===Dt&&Ft(Pe)),t===g&&(p.substr(Et,5)===ke?(t=ke,Et+=5):(t=g,0===Dt&&Ft(Ue)),t===g&&(p.substr(Et,4)===Le?(t=Le,Et+=4):(t=g,0===Dt&&Ft(je)),t===g&&(p.substr(Et,3)===Ge?(t=Ge,Et+=3):(t=g,0===Dt&&Ft(He)),t===g&&(p.substr(Et,4)===Ve?(t=Ve,Et+=4):(t=g,0===Dt&&Ft(Ze)),t===g&&(p.substr(Et,3)===We?(t=We,Et+=3):(t=g,0===Dt&&Ft(Je))))))))))));e=t!==g?(40===p.charCodeAt(Et)?(r=Me,Et++):(r=g,0===Dt&&Ft(Se)),r!==g?Yt()!==g?(n=Gt())!==g?Yt()!==g?(41===p.charCodeAt(Et)?(i=$e,Et++):(i=g,0===Dt&&Ft(Ee)),i!==g?(At=e,t=Ye(t,n)):(Et=e,g)):(Et=e,g):(Et=e,g):(Et=e,g):(Et=e,g)):(Et=e,g);e===g&&(e=Et,p.substr(Et,3)===Xe?(t=Xe,Et+=3):(t=g,0===Dt&&Ft(Qe)),t===g&&(p.substr(Et,3)===H?(t=H,Et+=3):(t=g,0===Dt&&Ft(V)),t===g&&(p.substr(Et,3)===Z?(t=Z,Et+=3):(t=g,0===Dt&&Ft(W)))),e=t!==g?(40===p.charCodeAt(Et)?(r=Me,Et++):(r=g,0===Dt&&Ft(Se)),r!==g?Yt()!==g?(n=Gt())!==g?Yt()!==g?(44===p.charCodeAt(Et)?(i=w,Et++):(i=g,0===Dt&&Ft(N)),i!==g?Yt()!==g?(i=Gt())!==g?Yt()!==g?(41===p.charCodeAt(Et)?(a=$e,Et++):(a=g,0===Dt&&Ft(Ee)),a!==g?(At=e,t=Ke(t,n,i)):(Et=e,g)):(Et=e,g):(Et=e,g):(Et=e,g):(Et=e,g)):(Et=e,g):(Et=e,g):(Et=e,g):(Et=e,g)):(Et=e,g));return e}();return n===g&&(n=kt())===g&&(n=Vt())===g&&(n=Et,40===p.charCodeAt(Et)?(e=Me,Et++):(e=g,0===Dt&&Ft(Se)),(n=e!==g&&Yt()!==g&&(t=Gt())!==g&&Yt()!==g?(41===p.charCodeAt(Et)?(r=$e,Et++):(r=g,0===Dt&&Ft(Ee)),r!==g?(At=n,e=h(e,t,r)):(Et=n,g)):(Et=n,g))===g&&(n=Pt())),n}function Vt(){var e,t,r,n,i=Et;return 45===p.charCodeAt(Et)?(e=et,Et++):(e=g,0===Dt&&Ft(tt)),i=(e=e===g?null:e)!==g&&Wt()!==g?(t=Et,rt.test(p.charAt(Et))?(r=p.charAt(Et),Et++):(r=g,0===Dt&&Ft(nt)),(t=(t=r!==g&&(n=Wt())!==g?r=[r,n]:(Et=t,g))===g?null:t)!==g?(At=i,e=it()):(Et=i,g)):(Et=i,g)}function Zt(){var e,t,r,n=Et;if(at.test(p.charAt(Et))?(e=p.charAt(Et),Et++):(e=g,0===Dt&&Ft(ot)),e!==g){for(t=[],st.test(p.charAt(Et))?(r=p.charAt(Et),Et++):(r=g,0===Dt&&Ft(ut));r!==g;)t.push(r),st.test(p.charAt(Et))?(r=p.charAt(Et),Et++):(r=g,0===Dt&&Ft(ut));n=t!==g?(At=n,e=ct()):(Et=n,g)}else Et=n,n=g;return n}function Wt(){var e,t=Et,r=[];if(st.test(p.charAt(Et))?(e=p.charAt(Et),Et++):(e=g,0===Dt&&Ft(ut)),e!==g)for(;e!==g;)r.push(e),st.test(p.charAt(Et))?(e=p.charAt(Et),Et++):(e=g,0===Dt&&Ft(ut));else r=g;return r!==g&&(At=t,r=ct()),t=r}function Jt(){var e,t=Et;return p.substr(Et,2)===lt?(e=lt,Et+=2):(e=g,0===Dt&&Ft(pt)),e!==g&&(At=t,e=mt()),(t=e)===g&&(42===p.charCodeAt(Et)?(t=ft,Et++):(t=g,0===Dt&&Ft(dt)),t===g&&(94===p.charCodeAt(Et)?(t=ht,Et++):(t=g,0===Dt&&Ft(yt)),t===g&&(37===p.charCodeAt(Et)?(t=gt,Et++):(t=g,0===Dt&&Ft(xt)),t===g&&(47===p.charCodeAt(Et)?(t=vt,Et++):(t=g,0===Dt&&Ft(bt)),t===g&&(43===p.charCodeAt(Et)?(t=wt,Et++):(t=g,0===Dt&&Ft(Nt)),t===g&&(45===p.charCodeAt(Et)?(t=et,Et++):(t=g,0===Dt&&Ft(tt)))))))),t}function Yt(){var e,t;for(Dt++,e=[],St.test(p.charAt(Et))?(t=p.charAt(Et),Et++):(t=g,0===Dt&&Ft($t));t!==g;)e.push(t),St.test(p.charAt(Et))?(t=p.charAt(Et),Et++):(t=g,0===Dt&&Ft($t));return Dt--,e===g&&(t=g,0===Dt&&Ft(Mt)),e}if((v=v())!==g&&Et===p.length)return v;throw v!==g&&Et<p.length&&Ft({type:"end"}),t=Tt,r=Ct<p.length?p.charAt(Ct):null,y=Ct<p.length?qt(Ct,Ct+1):qt(Ct,Ct),new peg$SyntaxError(peg$SyntaxError.buildMessage(t,r),t,r,y)}peg$subclass(peg$SyntaxError,Error),peg$SyntaxError.buildMessage=function(e,t){var r,n={literal:function(e){return'"'+a(e.text)+'"'},class:function(e){var t=e.parts.map(function(e){return Array.isArray(e)?o(e[0])+"-"+o(e[1]):o(e)});return"["+(e.inverted?"^":"")+t+"]"},any:function(){return"any character"},end:function(){return"end of input"},other:function(e){return e.description}};function i(e){return e.charCodeAt(0).toString(16).toUpperCase()}function a(e){return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(e){return"\\x0"+i(e)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(e){return"\\x"+i(e)})}function o(e){return e.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(e){return"\\x0"+i(e)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(e){return"\\x"+i(e)})}function s(e){return n[e.type](e)}return"Expected "+function(e){var t,r,n=e.map(s);if(n.sort(),0<n.length){for(r=t=1;t<n.length;t++)n[t-1]!==n[t]&&(n[r]=n[t],r++);n.length=r}switch(n.length){case 1:return n[0];case 2:return n[0]+" or "+n[1];default:return n.slice(0,-1).join(", ")+", or "+n[n.length-1]}}(e)+" but "+((r=t)?'"'+a(r)+'"':"end of input")+" found."};class Parser{static parse(e){if(!e)throw new RequiredArgumentError("notation");if("string"!=typeof e)throw new TypeError("Notation must be a string");return peg$parse(e)}}const exportFormats=Object.freeze({BASE_64:1,JSON:0,OBJECT:2}),notationSymbol=Symbol("notation"),maxTotalSymbol=Symbol("maxTotal"),minTotalSymbol=Symbol("minTotal"),expressionsSymbol=Symbol("expressions"),rollMethodSymbol=Symbol("roll-method"),rollsSymbol=Symbol("rolls"),setRollsSymbol=Symbol("set-rolls"),totalSymbol=Symbol("total"),calculateTotal=e=>toFixed(e.calculationValue,2);class DiceRoll{constructor(e){if(!e)throw new RequiredArgumentError("notation");if(this[expressionsSymbol]=[],e instanceof Object&&!Array.isArray(e)){if(!e.notation)throw new RequiredArgumentError("notation");if("string"!=typeof e.notation)throw new NotationError(e.notation);e.rolls&&this[setRollsSymbol](e.rolls),this[notationSymbol]=e.notation,this[expressionsSymbol]=Parser.parse(this.notation),this.hasRolls()||this.roll()}else{if("string"!=typeof e)throw new NotationError(e);this[notationSymbol]=e,this[expressionsSymbol]=Parser.parse(this.notation),this.roll()}}get averageTotal(){return(this.maxTotal+this.minTotal)/2}get maxTotal(){return this.hasExpressions()?(this[maxTotalSymbol]||(e=this[rollMethodSymbol](engines.max),this[maxTotalSymbol]=calculateTotal(e)),this[maxTotalSymbol]):0;var e}get minTotal(){return this.hasExpressions()?(this[minTotalSymbol]||(e=this[rollMethodSymbol](engines.min),this[minTotalSymbol]=calculateTotal(e)),this[minTotalSymbol]):0;var e}get notation(){return this[notationSymbol]}get output(){let e=this.notation+": ";return this.hasRolls()?e+=this[rollsSymbol]+" = "+this.total:e+="No dice rolled",e}get rolls(){return this[rollsSymbol]?this[rollsSymbol].results:[]}get total(){return!this[totalSymbol]&&this.hasRolls()&&(this[totalSymbol]=calculateTotal(this[rollsSymbol])),this[totalSymbol]||0}export(e=exportFormats.JSON){switch(e){case exportFormats.BASE_64:return btoa(this.export(exportFormats.JSON));case exportFormats.JSON:return JSON.stringify(this);case exportFormats.OBJECT:return JSON.parse(this.export(exportFormats.JSON));default:throw new TypeError(`Invalid export format "${e}"`)}}hasExpressions(){return this[expressionsSymbol]&&0<this[expressionsSymbol].length}hasRolls(){return this.hasExpressions()&&0<this.rolls.length}roll(){return this[totalSymbol]=0,this[rollsSymbol]=this[rollMethodSymbol](),this.rolls}toJSON(){var{averageTotal:e,maxTotal:t,minTotal:r,notation:n,output:i,rolls:a,total:o}=this;return{averageTotal:e,maxTotal:t,minTotal:r,notation:n,output:i,rolls:a,total:o,type:"dice-roll"}}toString(){return this.output}static import(e){if(e){if(isJson(e))return DiceRoll.import(JSON.parse(e));if(isBase64(e))return DiceRoll.import(atob(e));if("object"==typeof e)return new DiceRoll(e);throw new DataFormatError(e)}throw new RequiredArgumentError("data")}[rollMethodSymbol](e){let t;e&&(t=generator.engine,generator.engine=e);var r=new ResultGroup(this[expressionsSymbol].map(e=>e instanceof StandardDice||e instanceof RollGroup?e.roll():e).filter(e=>!!e||0===e));return e&&(generator.engine=t),r}[setRollsSymbol](e){if(e instanceof ResultGroup)this[rollsSymbol]=e;else if(e instanceof RollResults)this[rollsSymbol]=new ResultGroup([e]);else{if(!Array.isArray(e))throw new TypeError("Rolls must be a valid result object, or an array");this[rollsSymbol]=new ResultGroup(e.map(e=>{if(e instanceof ResultGroup||e instanceof RollResults)return e;if(Array.isArray(e))return new RollResults(e);if("object"==typeof e){if(Array.isArray(e.results))return new ResultGroup(e.results,e.modifiers||[],e.isRollGroup||!1,"boolean"!=typeof e.useInTotal||e.useInTotal);if(Array.isArray(e.rolls))return new RollResults(e.rolls)}return e}))}}}const Replacer=e=>{const t=e.workspace.getActiveViewOfType(obsidian.MarkdownView);if("source"===t.getMode()){const n=t.editor,i=n.getDoc();var r=i.getCursor().line;const a=n.getLine(r),o=a.replace(/\s+/g," ").trim(),s=o.split(" "),u=s[s.length-1];e=new DiceRoll(u.toLowerCase());s[s.length-1]=e.output;e=s.join(" ");n.setLine(r,e),n.setCursor(r,e.length)}},DEFAULT_SETTINGS={mySetting:"default",mythicOn:!0,tacOn:!1,replacer:!1,replacerSuffix:"//"};class MyPlugin extends obsidian.Plugin{onload(){return __awaiter(this,void 0,void 0,function*(){console.log("loading plugin"),yield this.loadSettings();let e;this.app.workspace.onLayoutReady(()=>{this.addCommand({id:"run-alternative-tab",name:"TAB",icon:"dice",checkCallback:e=>{return!!this.app.workspace.activeLeaf&&(e||Replacer(this.app),!0)}}),e=getTaggedFiles(this.app),e.simpleList.forEach((o,e)=>{this.addCommand({id:"command-"+(null==o?void 0:o.basename),name:null==o?void 0:o.basename,checkCallback:e=>{let t=this.app.workspace.activeLeaf;if(t){if(!e){console.log("simple");var r="source"===t.getViewState().state.mode,e=this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);if(r&&e){const n=e.editor,i=n.getDoc(),a=i.getCursor();getRandomListItem(this.app,o,e=>{console.log(e);i.replaceRange(e,a)})}}return!0}return!1}})}),e.weightedTables.forEach((o,e)=>{this.addCommand({id:"command-"+(null==o?void 0:o.basename),name:null==o?void 0:o.basename,checkCallback:e=>{let t=this.app.workspace.activeLeaf;if(t){if(!e){var r="source"===t.getViewState().state.mode,e=this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);if(r&&e){const n=e.editor,i=n.getDoc(),a=i.getCursor();getRandomWeightedListItem(this.app,o,e=>{i.replaceRange(e,a)})}}return!0}return!1}})}),e.decks.forEach((e,t)=>{const r=[],n=[];if(e.listItems.forEach(e=>{e.task&&("x"===e.task?r:n).push(e)}),r.length+n.length===0)return null;console.log("BOOG");var i=this.app.metadataCache.getFirstLinkpathDest(e.basename,e.path);if(console.log("PATH ",i),this.app.vault.cachedRead(i).then(e=>{console.log("VALUE ",e)}),e.frontmatter.shuffle&&0===r.length){const a=this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);n.map(e=>{var t=e.position.start.line,r=a.editor.getLine(t).replace("[ ]","[x]");e.task="x",a.editor.setLine(t,r)})}e=Math.floor(Math.random()*r.length);console.log("ROLL ",r[e])})}),this.addRibbonIcon("dice","Dice",()=>{Replacer(this.app)}),this.addSettingTab(new SoloSettingTab(this.app,this)),this.registerCodeMirror(e=>{console.log("codemirror",e)}),this.settings.replacer&&document.addEventListener("keydown",e=>{"Tab"===e.key&&Replacer(this.app)})})}onunload(){console.log("unloading plugin")}loadSettings(){return __awaiter(this,void 0,void 0,function*(){this.settings=Object.assign({},DEFAULT_SETTINGS,yield this.loadData())})}saveSettings(){return __awaiter(this,void 0,void 0,function*(){yield this.saveData(this.settings)})}}class SoloSettingTab extends obsidian.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){let e=this["containerEl"];e.empty(),e.createEl("h2",{text:"Napoleon Settings"}),new obsidian.Setting(e).setName("Mythic").setDesc("Toggle Mythic GME").addToggle(e=>e.setValue(this.plugin.settings.mythicOn).onChange(()=>__awaiter(this,void 0,void 0,function*(){this.plugin.settings.mythicOn=!this.plugin.settings.mythicOn}))),new obsidian.Setting(e).setName("The Adventure Crafter").setDesc("Toggle The Adventure Crafter").addToggle(e=>e.setValue(this.plugin.settings.tacOn).onChange(()=>__awaiter(this,void 0,void 0,function*(){this.plugin.settings.tacOn=!this.plugin.settings.tacOn,yield this.plugin.saveSettings()}))),new obsidian.Setting(e).setName("Replacer").setDesc("Toggle text replacer").addToggle(e=>e.setValue(this.plugin.settings.replacer).onChange(()=>__awaiter(this,void 0,void 0,function*(){this.plugin.settings.replacer=!this.plugin.settings.replacer,yield this.plugin.saveSettings()}))).addText(e=>e.setValue(this.plugin.settings.replacerSuffix).onChange(e=>__awaiter(this,void 0,void 0,function*(){this.plugin.settings.replacerSuffix=e,yield this.plugin.saveSettings()})))}}module.exports=MyPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
